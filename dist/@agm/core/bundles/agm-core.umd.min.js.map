{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@agm/core/services/maps-api-loader/maps-api-loader.ts","ng://@agm/core/services/google-maps-api-wrapper.ts","ng://@agm/core/services/managers/layer-manager.ts","ng://@agm/core/directives/bicycling-layer.ts","ng://@agm/core/services/managers/circle-manager.ts","ng://@agm/core/directives/circle.ts","ng://@agm/core/services/managers/data-layer-manager.ts","ng://@agm/core/directives/data-layer.ts","ng://@agm/core/services/fit-bounds.ts","ng://@agm/core/directives/fit-bounds.ts","ng://@agm/core/services/managers/marker-manager.ts","ng://@agm/core/services/managers/info-window-manager.ts","ng://@agm/core/directives/info-window.ts","ng://@agm/core/services/managers/kml-layer-manager.ts","ng://@agm/core/directives/kml-layer.ts","ng://@agm/core/utils/mvcarray-utils.ts","ng://@agm/core/services/google-maps-types.ts","ng://@agm/core/services/managers/polygon-manager.ts","ng://@agm/core/services/managers/polyline-manager.ts","ng://@agm/core/services/managers/rectangle-manager.ts","ng://@agm/core/directives/map.ts","ng://@agm/core/directives/marker.ts","ng://@agm/core/directives/polygon.ts","ng://@agm/core/directives/polyline-icon.ts","ng://@agm/core/directives/polyline-point.ts","ng://@agm/core/directives/polyline.ts","ng://@agm/core/directives/rectangle.ts","ng://@agm/core/directives/transit-layer.ts","ng://@agm/core/services/maps-api-loader/lazy-maps-api-loader.ts","ng://@agm/core/services/geocoder-service.ts","ng://@agm/core/utils/browser-globals.ts","ng://@agm/core/services/maps-api-loader/noop-maps-api-loader.ts","ng://@agm/core/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","pop","push","__read","o","m","ar","error","__spread","concat","MapsAPILoader","Injectable","GoogleMapsAPIWrapper","_loader","_zone","_this","_map","_mapResolver","prototype","createMap","el","mapOptions","runOutsideAngular","load","map","google","maps","Map","setMapOptions","options","setOptions","createMarker","addToMap","Marker","createInfoWindow","InfoWindow","createCircle","strokePosition","StrokePosition","Circle","createRectangle","Rectangle","createPolyline","getNativeMap","line","Polyline","setMap","createPolygon","polygon","Polygon","createDataLayer","data","Data","createTransitLayer","newLayer","TransitLayer","visible","createBicyclingLayer","BicyclingLayer","containsLocation","latLng","geometry","poly","subscribeToMapEvent","eventName","Observable","observer","addListener","arg","run","clearInstanceListeners","event","setCenter","getZoom","getBounds","getMapTypeId","setZoom","zoom","getCenter","panTo","panBy","x","fitBounds","padding","panToBounds","triggerMapEvent","trigger","NgZone","LayerManager","_wrapper","_layers","addTransitLayer","layer","set","addBicyclingLayer","deleteLayer","get","currentLayer","delete","toggleLayerVisibility","layerId","AgmBicyclingLayer","_manager","_addedToManager","_id","toString","ngOnInit","ngOnChanges","changes","currentValue","id","ngOnDestroy","tslib_1.__decorate","Input","Directive","selector","CircleManager","_apiWrapper","_circles","addCircle","circle","center","lat","latitude","lng","longitude","clickable","draggable","editable","fillColor","fillOpacity","radius","strokeColor","strokeOpacity","strokeWeight","zIndex","removeCircle","getRadius","setEditable","setDraggable","setVisible","setRadius","getNativeCircle","createEventObservable","listener","remove","AgmCircle","centerChange","EventEmitter","circleClick","circleDblClick","drag","dragEnd","dragStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","radiusChange","rightClick","_circleAddedToManager","_eventSubscriptions","_registerEventListeners","_updateCircleOptionsChanges","optionKeys","keys","filter","k","AgmCircle_1","_mapOptions","indexOf","forEach","events","eventEmitter","subscribe","emit","coords","s","unsubscribe","Output","DataLayerManager","addDataLayer","style","geoJson","getDataFeatures","features","deleteDataLayer","l","updateGeoJson","feature","index","splice","setDataOptions","setControlPosition","controlPosition","setControls","controls","setDrawingMode","drawingMode","setStyle","addGeoJson","loadGeoJson","AgmDataLayer","_subscriptions","layerClick","_addEventListeners","name","handler","ev","obj","os","geoJsonChange","dataOptions","AgmDataLayer_1","_dataOptionsAttributes","FitBoundsAccessor","FitBoundsService","loader","_boundsChangeSampleTime$","BehaviorSubject","_includeInBounds$","bounds$","from","pipe","flatMap","sample","switchMap","time","timer","includeInBounds","_generateBounds","shareReplay","bounds","LatLngBounds","extend","addToBounds","_createIdentifier","has","removeFromBounds","changeFitBoundsChangeSampleTime","timeMs","getBounds$","AgmFitBounds","_fitBoundsAccessor","_fitBoundsService","agmFitBounds","_destroyed$","Subject","_latestFitBoundsDetails","_updateBounds","getFitBoundsDetails$","distinctUntilChanged","takeUntil","details","newFitBoundsDetails","complete","tslib_1.__param","Self","MarkerManager","_mapsWrapper","_markers","convertAnimation","uiAnim","Animation","deleteMarker","marker","updateMarkerPosition","setPosition","updateTitle","setTitle","title","updateLabel","setLabel","updateDraggable","updateIcon","setIcon","iconUrl","updateOpacity","setOpacity","opacity","updateVisible","updateZIndex","setZIndex","updateClickable","setClickable","updateAnimation","_c","_b","_a","setAnimation","animation","addMarker","markerPromise","position","icon","_d","getNativeMarker","InfoWindowManager","_markerManager","_infoWindows","deleteInfoWindow","infoWindow","iWindow","close","open","w","hostMarker","addInfoWindow","content","maxWidth","disableAutoPan","infoWindowPromise","infoWindowId","AgmInfoWindow","_infoWindowManager","_el","isOpen","infoWindowClose","_infoWindowAddedToManager","nativeElement","querySelector","_updateOpenState","_setInfoWindowOptions","AgmInfoWindow_1","_infoWindowOptionsInputs","Component","template","ElementRef","KmlLayerManager","addKmlLayer","KmlLayer","preserveViewport","screenOverlays","suppressInfoWindows","url","deleteKmlLayer","AgmKmlLayer","defaultViewportChange","statusChange","_updatePolygonOptions","AgmKmlLayer_1","_kmlLayerOptions","reduce","createMVCEventObservable","array","eventNames","fromEventPattern","evName","previous","newArr","getArray","_handler","evListeners","evListener","SymbolPath","ControlPosition","MapTypeId","MapTypeControlStyle","ScaleControlStyle","ZoomControlStyle","GeocoderLocationType","GeocoderStatus","PolygonManager","_polygons","addPolygon","path","polygonPromise","geodesic","paths","updatePolygon","setPaths","setPolygonOptions","deletePolygon","getPath","getPaths","createPathEventObservable","agmPolygon","startWith","parentMVEvent","merge","chMVC","chMVCEvent","pathIndex","skip","retVal","subArr","toJSON","PolylineManager","_polylines","_convertPoints","_getPoints","point","_convertPath","symbolPath","_convertIcons","icons","_getIcons","agmIcon","fixedRotation","offset","repeat","anchor","Point","anchorX","anchorY","PolylineManager_1","rotation","scale","entries","addPolyline","polylinePromise","updatePolylinePoints","setPath","updateIconSequences","setPolylineOptions","deletePolyline","getMVCPath","agmPolyline","RectangleManager","_rectangles","addRectangle","rectangle","north","east","south","west","removeRectangle","setBounds","create","AgmMap","_elem","_platformId","disableDoubleClickZoom","disableDefaultUI","scrollwheel","keyboardShortcuts","styles","usePanning","scaleControl","mapTypeControl","panControl","rotateControl","fullscreenControl","mapTypeId","clickableIcons","showDefaultInfoWindow","gestureHandling","tilt","_observableSubscriptions","mapClick","mapRightClick","mapDblClick","boundsChange","mapTypeIdChange","idle","zoomChange","mapReady","tilesLoaded","isPlatformServer","container","_initMapInstance","minZoom","maxZoom","controlSize","backgroundColor","draggableCursor","draggingCursor","zoomControl","zoomControlOptions","streetViewControl","streetViewControlOptions","scaleControlOptions","mapTypeControlOptions","panControlOptions","rotateControlOptions","fullscreenControlOptions","restriction","_handleMapCenterChange","_handleMapZoomChange","_handleMapMouseEvents","_handleBoundsChange","_handleMapTypeIdChange","_handleTilesLoadedEvent","_handleIdleEvent","_fitBoundsSubscription","_updateMapOptionsChanges","_updatePosition","AgmMap_1","_mapOptionsAttributes","triggerResize","recenter","setTimeout","_fitBounds","_setCenter","newCenter","_subscribeToFitBoundsUpdates","fitBoundsPadding","_isLatLngBoundsLiteral","newBounds","union","undefined","z","emitter","placeId","stop","providers","host","[class.sebm-google-map-container]","Inject","PLATFORM_ID","markerId","AgmMarker","openInfoWindow","animationChange","markerClick","markerDblClick","markerRightClick","QueryList","_markerAddedToManger","_fitBoundsDetails$","ReplaySubject","ngAfterContentInit","handleInfoWindowUpdate","Error","Number","_updateFitBoundsDetails","asObservable","cs","dcs","rc","ds","de","mover","mout","anChng","ContentChildren","AgmMarker_1","provide","useExisting","forwardRef","inputs","outputs","AgmPolygon","_polygonManager","polyClick","polyDblClick","polyDrag","polyDragEnd","polyDragStart","polyMouseDown","polyMouseMove","polyMouseOut","polyMouseOver","polyMouseUp","polyRightClick","polyPathsChange","_polygonAddedToManager","_init","paths$","pathEvent","AgmPolygon_1","_polygonOptionsAttributes","AgmPolylineIcon","AgmPolylinePoint","positionChanged","AgmPolylinePoint_1","polylineId","AgmPolyline","_polylineManager","lineClick","lineDblClick","lineDrag","lineDragEnd","lineDragStart","lineMouseDown","lineMouseMove","lineMouseOut","lineMouseOver","lineMouseUp","lineRightClick","polyPathChange","_polylineAddedToManager","points","pointSub","iconSub","iconSequences","AgmPolyline_1","_polylineOptionsAttributes","ob$","toArray","AgmRectangle","rectangleClick","rectangleDblClick","_rectangleAddedToManager","_updateRectangleOptionsChanges","AgmRectangle_1","getNorthEast","getSouthWest","AgmTransitLayer","GoogleMapsScriptProtocol","AgmGeocoder","connectableGeocoder$","subscriber","_createGeocoder","multicast","connect","geocoder$","geocode","request","geocoder","_getGoogleResults","bindCallback","geocodeObservable","results","status","OK","of","throwError","Geocoder","providedIn","WindowRef","getNativeWindow","window","DocumentRef","getNativeDocument","document","BROWSER_GLOBALS_PROVIDERS","LAZY_MAPS_API_CONFIG","InjectionToken","LazyMapsAPILoader","_super","config","localeId","_SCRIPT_ID","callbackName","_config","_windowRef","_documentRef","__","constructor","tslib_1.__extends","_scriptLoadingPromise","scriptOnPage","getElementById","_assignScriptLoadingPromise","script","createElement","type","async","defer","src","_getScriptSrc","appendChild","scriptElem","onerror","protocol","HTTPS","AUTO","HTTP","hostAndPath","queryParams","apiVersion","callback","apiKey","client","clientId","channel","libraries","region","language","isArray","join","entry","Optional","LOCALE_ID","String","NoOpMapsAPILoader","coreDirectives","AgmCoreModule","forRoot","lazyMapsAPILoaderConfig","ngModule","AgmCoreModule_1","useClass","useValue","NgModule","declarations","exports"],"mappings":"0bAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAgCrB,SAASO,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HZ,EAAvHa,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOV,OAAOe,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAGK,GAAK,EAAGA,KAASpB,EAAIS,EAAWW,MAAIJ,GAAKH,EAAI,EAAIb,EAAEgB,GAAKH,EAAI,EAAIb,EAAEU,EAAQC,EAAKK,GAAKhB,EAAEU,EAAQC,KAASK,GAChJ,OAAOH,EAAI,GAAKG,GAAKd,OAAOmB,eAAeX,EAAQC,EAAKK,GAAIA,EAGzD,SAASM,EAAQC,EAAYC,GAChC,OAAO,SAAUd,EAAQC,GAAOa,EAAUd,EAAQC,EAAKY,IAGpD,SAASE,EAAWC,EAAaC,GACpC,GAAuB,iBAAZT,SAAoD,mBAArBA,QAAQU,SAAyB,OAAOV,QAAQU,SAASF,EAAaC,GAG7G,SAASE,EAAUC,EAASC,EAAYC,EAAGC,GAC9C,OAAO,IAAKD,IAAMA,EAAIE,UAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,IAAW,MAAOG,GAAKL,EAAOK,IACpF,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,IAAW,MAAOG,GAAKL,EAAOK,IACvF,SAASF,EAAKI,GAAUA,EAAOC,KAAOT,EAAQQ,EAAOL,OAAS,IAAIN,EAAE,SAAUG,GAAWA,EAAQQ,EAAOL,SAAWO,KAAKR,EAAWK,GACnIH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,UAI/D,SAASO,EAAYjB,EAASkB,GACjC,IAAsGC,EAAGC,EAAGC,EAAGC,EAA3GC,EAAI,CAAEC,MAAO,EAAGC,KAAM,WAAa,GAAW,EAAPJ,EAAE,GAAQ,MAAMA,EAAE,GAAI,OAAOA,EAAE,IAAOK,KAAM,GAAIC,IAAK,IAChG,OAAOL,EAAI,CAAEZ,KAAMkB,EAAK,GAAIC,MAASD,EAAK,GAAIE,OAAUF,EAAK,IAAwB,mBAAXG,SAA0BT,EAAES,OAAOC,UAAY,WAAa,OAAOC,OAAUX,EACvJ,SAASM,EAAKM,GAAK,OAAO,SAAUC,GAAK,OACzC,SAAcC,GACV,GAAIjB,EAAG,MAAM,IAAIkB,UAAU,mCAC3B,KAAOd,GAAG,IACN,GAAIJ,EAAI,EAAGC,IAAMC,EAAY,EAARe,EAAG,GAAShB,EAAU,OAAIgB,EAAG,GAAKhB,EAAS,SAAOC,EAAID,EAAU,SAAMC,EAAEiB,KAAKlB,GAAI,GAAKA,EAAEV,SAAWW,EAAIA,EAAEiB,KAAKlB,EAAGgB,EAAG,KAAKtB,KAAM,OAAOO,EAE3J,OADID,EAAI,EAAGC,IAAGe,EAAK,CAAS,EAARA,EAAG,GAAQf,EAAEb,QACzB4B,EAAG,IACP,KAAK,EAAG,KAAK,EAAGf,EAAIe,EAAI,MACxB,KAAK,EAAc,OAAXb,EAAEC,QAAgB,CAAEhB,MAAO4B,EAAG,GAAItB,MAAM,GAChD,KAAK,EAAGS,EAAEC,QAASJ,EAAIgB,EAAG,GAAIA,EAAK,CAAC,GAAI,SACxC,KAAK,EAAGA,EAAKb,EAAEI,IAAIY,MAAOhB,EAAEG,KAAKa,MAAO,SACxC,QACI,KAAkBlB,GAAZA,EAAIE,EAAEG,MAAYzC,OAAS,GAAKoC,EAAEA,EAAEpC,OAAS,MAAkB,IAAVmD,EAAG,IAAsB,IAAVA,EAAG,IAAW,CAAEb,EAAI,EAAG,SACjG,GAAc,IAAVa,EAAG,MAAcf,GAAMe,EAAG,GAAKf,EAAE,IAAMe,EAAG,GAAKf,EAAE,IAAM,CAAEE,EAAEC,MAAQY,EAAG,GAAI,MAC9E,GAAc,IAAVA,EAAG,IAAYb,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIA,EAAIe,EAAI,MAC7D,GAAIf,GAAKE,EAAEC,MAAQH,EAAE,GAAI,CAAEE,EAAEC,MAAQH,EAAE,GAAIE,EAAEI,IAAIa,KAAKJ,GAAK,MACvDf,EAAE,IAAIE,EAAEI,IAAIY,MAChBhB,EAAEG,KAAKa,MAAO,SAEtBH,EAAKlB,EAAKoB,KAAKtC,EAASuB,GAC1B,MAAOZ,GAAKyB,EAAK,CAAC,EAAGzB,GAAIS,EAAI,EAAI,QAAWD,EAAIE,EAAI,EACtD,GAAY,EAARe,EAAG,GAAQ,MAAMA,EAAG,GAAI,MAAO,CAAE5B,MAAO4B,EAAG,GAAKA,EAAG,QAAK,EAAQtB,MAAM,GArB9BL,CAAK,CAACyB,EAAGC,MAwCtD,SAASM,EAAOC,EAAGR,GACtB,IAAIS,EAAsB,mBAAXZ,QAAyBW,EAAEX,OAAOC,UACjD,IAAKW,EAAG,OAAOD,EACf,IAAmBxD,EAAYyB,EAA3BrB,EAAIqD,EAAEL,KAAKI,GAAOE,EAAK,GAC3B,IACI,WAAc,IAANV,GAAgBA,KAAM,MAAQhD,EAAII,EAAEoB,QAAQI,MAAM8B,EAAGJ,KAAKtD,EAAEsB,OAExE,MAAOqC,GAASlC,EAAI,CAAEkC,MAAOA,GACjC,QACQ,IACQ3D,IAAMA,EAAE4B,OAAS6B,EAAIrD,EAAU,SAAIqD,EAAEL,KAAKhD,GAE1D,QAAkB,GAAIqB,EAAG,MAAMA,EAAEkC,OAE7B,OAAOD,EAGJ,SAASE,IACZ,IAAK,IAAIF,EAAK,GAAItD,EAAI,EAAGA,EAAIN,UAAUC,OAAQK,IAC3CsD,EAAKA,EAAGG,OAAON,EAAOzD,UAAUM,KACpC,OAAOsD,mBCxIX,SAAAI,KAEA,OAFsBA,EAAatE,EAAA,CADlCuE,EAAAA,cACqBD,MCYtBE,EAAA,WAIE,SAAAA,EAAoBC,EAAgCC,GAApD,IAAAC,EAAApB,KAAoBA,KAAAkB,QAAAA,EAAgClB,KAAAmB,MAAAA,EAClDnB,KAAKqB,KACD,IAAIlD,QAA4B,SAACC,GAA0BgD,EAAKE,aAAelD,IAgOvF,OA7NE6C,EAAAM,UAAAC,UAAA,SAAUC,EAAiBC,GAA3B,IAAAN,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKF,QAAQU,OAAO9C,KAAK,WAC9B,IAAM+C,EAAM,IAAIC,OAAOC,KAAKC,IAAIP,EAAIC,GACpCN,EAAKE,aAAaO,QAMxBZ,EAAAM,UAAAU,cAAA,SAAcC,GAAd,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClCP,EAAKC,KAAKvC,KAAK,SAAC4B,GAA4BA,EAAEyB,WAAWD,QAO7DjB,EAAAM,UAAAa,aAAA,SAAaF,EAAgEG,GAA7E,IAAAjB,EAAApB,KAEE,YAFW,IAAAkC,IAAAA,EAAkC,SAA8B,IAAAG,IAAAA,GAAA,GAEpErC,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAIrB,OAHIQ,IACFH,EAAQL,IAAMA,GAET,IAAIC,OAAOC,KAAKO,OAAOJ,QAKpCjB,EAAAM,UAAAgB,iBAAA,SAAiBL,GAAjB,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,WAAQ,OAAO,IAAIgD,OAAOC,KAAKS,WAAWN,QAOpEjB,EAAAM,UAAAkB,aAAA,SAAaP,GAAb,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAKrB,MAJsC,iBAA3BK,EAAQQ,iBACjBR,EAAQQ,eAAiBZ,OAAOC,KAAKY,eAAeT,EAAQQ,iBAE9DR,EAAQL,IAAMA,EACP,IAAIC,OAAOC,KAAKa,OAAOV,QAQpCjB,EAAAM,UAAAsB,gBAAA,SAAgBX,GAAhB,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAErB,OADAK,EAAQL,IAAMA,EACP,IAAIC,OAAOC,KAAKe,UAAUZ,QAKvCjB,EAAAM,UAAAwB,eAAA,SAAeb,GAAf,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAK4B,eAAelE,KAAK,SAAC+C,GAC/B,IAAIoB,EAAO,IAAInB,OAAOC,KAAKmB,SAAShB,GAEpC,OADAe,EAAKE,OAAOtB,GACLoB,OAKbhC,EAAAM,UAAA6B,cAAA,SAAclB,GAAd,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAK4B,eAAelE,KAAK,SAAC+C,GAC/B,IAAIwB,EAAU,IAAIvB,OAAOC,KAAKuB,QAAQpB,GAEtC,OADAmB,EAAQF,OAAOtB,GACRwB,OAQbpC,EAAAM,UAAAgC,gBAAA,SAAgBrB,GAAhB,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAA4B,GACpB,IAAI8C,EAAO,IAAI1B,OAAOC,KAAK0B,KAAKvB,GAEhC,OADAsB,EAAKL,OAAOzC,GACL8C,OAUbvC,EAAAM,UAAAmC,mBAAA,SAAmBxB,GAAnB,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GACrB,IAAI8B,EAAkC,IAAI7B,OAAOC,KAAK6B,aAEtD,OADAD,EAASR,OAAOjB,EAAQ2B,QAAUhC,EAAM,MACjC8B,OAUb1C,EAAAM,UAAAuC,qBAAA,SAAqB5B,GAArB,IAAAd,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GACrB,IAAI8B,EAAoC,IAAI7B,OAAOC,KAAKgC,eAExD,OADAJ,EAASR,OAAOjB,EAAQ2B,QAAUhC,EAAM,MACjC8B,OAQb1C,EAAAM,UAAAyC,iBAAA,SAAiBC,EAAgCZ,GAC/C,OAAOvB,OAAOC,KAAKmC,SAASC,KAAKH,iBAAiBC,EAAQZ,IAG5DpC,EAAAM,UAAA6C,oBAAA,SAAuBC,GAAvB,IAAAjD,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrBnD,EAAKC,KAAKvC,KAAK,SAAC4B,GACdA,EAAE8D,YAAYH,EAAW,SAACI,GAAarD,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKgG,YAKhFxD,EAAAM,UAAAoD,uBAAA,WAAA,IAAAvD,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClCP,EAAKC,KAAKvC,KAAK,SAAC+C,GACdC,OAAOC,KAAK6C,MAAMD,uBAAuB9C,QAK/CZ,EAAAM,UAAAsD,UAAA,SAAUZ,GAAV,IAAA7C,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAA4B,OAAAA,EAAIgD,UAAUZ,QAIrEhD,EAAAM,UAAAuD,QAAA,WAAA,IAAA1D,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAA4B,OAAAA,EAAIiD,eAI3D7D,EAAAM,UAAAwD,UAAA,WAAA,IAAA3D,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAA4B,OAAAA,EAAIkD,iBAI3D9D,EAAAM,UAAAyD,aAAA,WAAA,IAAA5D,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAA4B,OAAAA,EAAImD,oBAI3D/D,EAAAM,UAAA0D,QAAA,SAAQC,GAAR,IAAA9D,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAA4B,OAAAA,EAAIoD,QAAQC,QAInEjE,EAAAM,UAAA4D,UAAA,WAAA,IAAA/D,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAA4B,OAAAA,EAAIsD,iBAI3DlE,EAAAM,UAAA6D,MAAA,SAAMnB,GAAN,IAAA7C,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAAQ,OAAAA,EAAIuD,MAAMnB,QAI7ChD,EAAAM,UAAA8D,MAAA,SAAMC,EAAWnG,GAAjB,IAAAiC,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAAQ,OAAAA,EAAIwD,MAAMC,EAAGnG,QAIhD8B,EAAAM,UAAAgE,UAAA,SAAUtB,EAA8DuB,GAAxE,IAAApE,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAAQ,OAAAA,EAAI0D,UAAUtB,EAAQuB,QAIzDvE,EAAAM,UAAAkE,YAAA,SAAYxB,EAA8DuB,GAA1E,IAAApE,EAAApB,KACE,OAAOA,KAAKmB,MAAMQ,kBAAkB,WAClC,OAAOP,EAAKC,KAAKvC,KAAK,SAAC+C,GAAQ,OAAAA,EAAI4D,YAAYxB,EAAQuB,QAO3DvE,EAAAM,UAAAyB,aAAA,WAA8C,OAAOhD,KAAKqB,MAK1DJ,EAAAM,UAAAmE,gBAAA,SAAgBrB,GACd,OAAOrE,KAAKqB,KAAKvC,KAAK,SAAC4B,GAAM,OAAAoB,OAAOC,KAAK6C,MAAMe,QAAQjF,EAAG2D,MApOjDpD,EAAoBxE,EAAA,CADhCuE,EAAAA,oCAK8BD,EAA8B6E,EAAAA,UAJhD3E,GAAb,GCJA4E,EAAA,WAII,SAAAA,EAAoBC,GAAA9F,KAAA8F,SAAAA,EAHZ9F,KAAA+F,QACJ,IAAI/D,IAwDZ,OA9CI6D,EAAAtE,UAAAyE,gBAAA,SAAgBC,EAAwB/D,GACpC,IAAMyB,EAAW3D,KAAK8F,SAASpC,mBAAmBxB,GAClDlC,KAAK+F,QAAQG,IAAID,EAAOtC,IAS5BkC,EAAAtE,UAAA4E,kBAAA,SAAkBF,EAA0B/D,GACxC,IAAMyB,EAAW3D,KAAK8F,SAAShC,qBAAqB5B,GACpDlC,KAAK+F,QAAQG,IAAID,EAAOtC,IAQ5BkC,EAAAtE,UAAA6E,YAAA,SAAYH,GAAZ,IAAA7E,EAAApB,KACI,OAAOA,KAAK+F,QAAQM,IAAIJ,GAAOnH,KAAK,SAAAwH,GAChCA,EAAanD,OAAO,MACpB/B,EAAK2E,QAAQQ,OAAON,MAU5BJ,EAAAtE,UAAAiF,sBAAA,SAAsBP,EAA4C/D,GAAlE,IAAAd,EAAApB,KACI,OAAOA,KAAK+F,QAAQM,IAAIJ,GAAOnH,KAAK,SAAAwH,GAChC,OAAKpE,EAAQ2B,QAIHzC,EAAK0E,SAAS9C,eAAelE,KAAM,SAAC+C,GACvCyE,EAAanD,OAAOtB,UAJvByE,EAAanD,OAAO,SAjDvB0C,EAAYpJ,EAAA,CADxBuE,EAAAA,oCAKiCC,KAJrB4E,GAAb,GCRIY,EAAU,EAUdC,EAAA,WASI,SAAAA,EAAqBC,GAAA3G,KAAA2G,SAAAA,EARb3G,KAAA4G,iBAAkB,EAClB5G,KAAA6G,KAAeJ,KAAWK,WAKzB9G,KAAA6D,SAAU,EAgCvB,OA5BI6C,EAAAnF,UAAAwF,SAAA,WACQ/G,KAAK4G,kBAGT5G,KAAK2G,SAASR,kBAAkBnG,KAAM,CAAC6D,QAAS7D,KAAK6D,UACrD7D,KAAK4G,iBAAkB,IAG3BF,EAAAnF,UAAAyF,YAAA,SAAYC,GACHjH,KAAK4G,iBAGgB,MAAtBK,EAAiB,SACjBjH,KAAK2G,SAASH,sBAAsBxG,KAAM,CAAC6D,QAASoD,EAAiB,QAAEC,gBAK/ER,EAAAnF,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3BH,EAAAnF,UAAAuF,SAAA,WAAqB,MAAO,qBAAqB9G,KAAK6G,IAAIC,YAG1DJ,EAAAnF,UAAA6F,YAAA,WACIpH,KAAK2G,SAASP,YAAYpG,OA7BrBqH,EAAAA,CAARC,EAAAA,+DAPQZ,EAAiBjK,EAAA,CAJ7B8K,EAAAA,UAAU,CACPC,SAAU,+CAYqB3B,KATtBa,GAAb,gBCEE,SAAAe,EAAoBC,EAA2CvG,GAA3CnB,KAAA0H,YAAAA,EAA2C1H,KAAAmB,MAAAA,EAHvDnB,KAAA2H,SACJ,IAAI3F,IA4FV,OAxFEyF,EAAAlG,UAAAqG,UAAA,SAAUC,GACR7H,KAAK2H,SAASzB,IAAI2B,EAAQ7H,KAAK0H,YAAYjF,aAAa,CACtDqF,OAAQ,CAACC,IAAKF,EAAOG,SAAUC,IAAKJ,EAAOK,WAC3CC,UAAWN,EAAOM,UAClBC,UAAWP,EAAOO,UAClBC,SAAUR,EAAOQ,SACjBC,UAAWT,EAAOS,UAClBC,YAAaV,EAAOU,YACpBC,OAAQX,EAAOW,OACfC,YAAaZ,EAAOY,YACpBC,cAAeb,EAAOa,cACtBhG,eAAgBmF,EAAOnF,eACvBiG,aAAcd,EAAOc,aACrB9E,QAASgE,EAAOhE,QAChB+E,OAAQf,EAAOe,WAOnBnB,EAAAlG,UAAAsH,aAAA,SAAahB,GAAb,IAAAzG,EAAApB,KACE,OAAOA,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GACrCA,EAAEqG,OAAO,MACT/B,EAAKuG,SAASpB,OAAOsB,MAIzBJ,EAAAlG,UAAAY,WAAA,SAAW0F,EAAmB3F,GAC5B,OAAOlC,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GACC,iBAA3BoF,EAAQQ,iBACjBR,EAAQQ,eAAiBZ,OAAOC,KAAKY,eAAeT,EAAQQ,iBAE9D5F,EAAEqF,WAAWD,MAIjBuF,EAAAlG,UAAAwD,UAAA,SAAU8C,GACR,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAAM,OAAAA,EAAEiI,eAGjD0C,EAAAlG,UAAA4D,UAAA,SAAU0C,GACR,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAAM,OAAAA,EAAEqI,eAGjDsC,EAAAlG,UAAAuH,UAAA,SAAUjB,GACR,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAAM,OAAAA,EAAEgM,eAGjDrB,EAAAlG,UAAAsD,UAAA,SAAUgD,GACR,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAC7B,SAAChC,GAAQ,OAAOA,EAAE+H,UAAU,CAACkD,IAAKF,EAAOG,SAAUC,IAAKJ,EAAOK,eAGrET,EAAAlG,UAAAwH,YAAA,SAAYlB,GACV,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAAQ,OAAOA,EAAEiM,YAAYlB,EAAOQ,aAG7EZ,EAAAlG,UAAAyH,aAAA,SAAanB,GACX,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAAQ,OAAOA,EAAEkM,aAAanB,EAAOO,cAG9EX,EAAAlG,UAAA0H,WAAA,SAAWpB,GACT,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAAQ,OAAOA,EAAEmM,WAAWpB,EAAOhE,YAG5E4D,EAAAlG,UAAA2H,UAAA,SAAUrB,GACR,OAAO7H,KAAK2H,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAAQ,OAAOA,EAAEoM,UAAUrB,EAAOW,WAG3Ef,EAAAlG,UAAA4H,gBAAA,SAAgBtB,GACd,OAAO7H,KAAK2H,SAAStB,IAAIwB,IAG3BJ,EAAAlG,UAAA6H,sBAAA,SAAyB/E,EAAmBwD,GAA5C,IAAAzG,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrB,IAAI8E,EAAuC,KAK3C,OAJAjI,EAAKuG,SAAStB,IAAIwB,GAAQ/I,KAAK,SAAChC,GAC9BuM,EAAWvM,EAAE0H,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,SAG5E,WACY,OAAb2K,GACFA,EAASC,aAzFN7B,EAAahL,EAAA,CADzBuE,EAAAA,oCAKkCC,EAAqC2E,EAAAA,UAJ3D6B,mBCmJX,SAAA8B,EAAoB5C,GAAA3G,KAAA2G,SAAAA,EAtIX3G,KAAAmI,WAAY,EAMKnI,KAAAoI,WAAY,EAM7BpI,KAAAqI,UAAW,EAeXrI,KAAAwI,OAAS,EAgBTxI,KAAA0C,eAAkD,SAKlD1C,KAAA2I,aAAe,EAKf3I,KAAA6D,SAAU,EAUT7D,KAAAwJ,aAA4C,IAAIC,EAAAA,aAKhDzJ,KAAA0J,YAAwC,IAAID,EAAAA,aAK5CzJ,KAAA2J,eAA2C,IAAIF,EAAAA,aAK/CzJ,KAAA4J,KAAiC,IAAIH,EAAAA,aAKrCzJ,KAAA6J,QAAoC,IAAIJ,EAAAA,aAKxCzJ,KAAA8J,UAAsC,IAAIL,EAAAA,aAK1CzJ,KAAA+J,UAAsC,IAAIN,EAAAA,aAK1CzJ,KAAAgK,UAAsC,IAAIP,EAAAA,aAK1CzJ,KAAAiK,SAAqC,IAAIR,EAAAA,aAKzCzJ,KAAAkK,UAAsC,IAAIT,EAAAA,aAK1CzJ,KAAAmK,QAAoC,IAAIV,EAAAA,aAKxCzJ,KAAAoK,aAAqC,IAAIX,EAAAA,aAKzCzJ,KAAAqK,WAAuC,IAAIZ,EAAAA,aAE7CzJ,KAAAsK,uBAAwB,EAOxBtK,KAAAuK,oBAAsC,SA6FhD,SA/OahB,EAuJXA,EAAAhI,UAAAwF,SAAA,WACE/G,KAAK2G,SAASiB,UAAU5H,MACxBA,KAAKsK,uBAAwB,EAC7BtK,KAAKwK,2BAIPjB,EAAAhI,UAAAyF,YAAA,SAAYC,GACLjH,KAAKsK,yBAGNrD,EAAkB,UAAKA,EAAmB,YAC5CjH,KAAK2G,SAAS9B,UAAU7E,MAEtBiH,EAAkB,UACpBjH,KAAK2G,SAASoC,YAAY/I,MAExBiH,EAAmB,WACrBjH,KAAK2G,SAASqC,aAAahJ,MAEzBiH,EAAiB,SACnBjH,KAAK2G,SAASsC,WAAWjJ,MAEvBiH,EAAgB,QAClBjH,KAAK2G,SAASuC,UAAUlJ,MAE1BA,KAAKyK,4BAA4BxD,KAG3BsC,EAAAhI,UAAAkJ,4BAAR,SAAoCxD,GAClC,IAAI/E,EAAqC,GACrCwI,EACAvO,OAAOwO,KAAK1D,GAAS2D,OAAO,SAAAC,GAAK,OAAsC,IAAtCC,EAAUC,YAAYC,QAAQH,KACnEH,EAAWO,QAAQ,SAACJ,GAAQ3I,EAAQ2I,GAAK5D,EAAQ4D,GAAG3D,eAChDwD,EAAW1N,OAAS,GACtBgD,KAAK2G,SAASxE,WAAWnC,KAAMkC,IAI3BqH,EAAAhI,UAAAiJ,wBAAR,WAAA,IAAApJ,EAAApB,KACMkL,EAAyC,IAAIlJ,IACjDkJ,EAAOhF,IAAI,iBAAkBlG,KAAKwJ,cAClC0B,EAAOhF,IAAI,QAASlG,KAAK0J,aACzBwB,EAAOhF,IAAI,WAAYlG,KAAK2J,gBAC5BuB,EAAOhF,IAAI,OAAQlG,KAAK4J,MACxBsB,EAAOhF,IAAI,UAAWlG,KAAK6J,SAC3BqB,EAAOhF,IAAI,YAAalG,KAAK8J,WAC7BoB,EAAOhF,IAAI,YAAalG,KAAK+J,WAC7BmB,EAAOhF,IAAI,YAAalG,KAAKgK,WAC7BkB,EAAOhF,IAAI,WAAYlG,KAAKiK,UAC5BiB,EAAOhF,IAAI,YAAalG,KAAKkK,WAC7BgB,EAAOhF,IAAI,UAAWlG,KAAKmK,SAC3Be,EAAOhF,IAAI,iBAAkBlG,KAAKoK,cAClCc,EAAOhF,IAAI,aAAclG,KAAKqK,YAE9Ba,EAAOD,QAAQ,SAACE,EAAc9G,GAC5BjD,EAAKmJ,oBAAoBhK,KACrBa,EAAKuF,SAASyC,sBAAqC/E,EAAWjD,GAAMgK,UAAU,SAAC7M,GAC7E,OAAQ8F,GACN,IAAK,iBACHjD,EAAKuF,SAASmC,UAAU1H,GAAMtC,KAAK,SAAC0J,GAAW,OAAA2C,EAAaE,KAAK7C,KACjE,MACF,IAAK,iBACHpH,EAAKuF,SAASxB,UAAU/D,GAAMtC,KAC1B,SAACgJ,GACG,OAAAqD,EAAaE,KAAK,CAACtD,IAAKD,EAAOC,MAAOE,IAAKH,EAAOG,UAC1D,MACF,QACEkD,EAAaE,KACT,CAACC,OAAQ,CAACvD,IAAKxJ,EAAM0F,OAAO8D,MAAOE,IAAK1J,EAAM0F,OAAOgE,gBAOvEsB,EAAAhI,UAAA6F,YAAA,WACEpH,KAAKuK,oBAAoBU,QAAQ,SAASM,GAAmBA,EAAEC,gBAC/DxL,KAAKuK,oBAAsB,KAC3BvK,KAAK2G,SAASkC,aAAa7I,OAM7BuJ,EAAAhI,UAAAwD,UAAA,WAAqC,OAAO/E,KAAK2G,SAAS5B,UAAU/E,OAEpEuJ,EAAAhI,UAAA4D,UAAA,WAA+B,OAAOnF,KAAK2G,SAASxB,UAAUnF,OAjG/CuJ,EAAAwB,YAAwB,CACrC,YAAa,cAAe,cAAe,gBAAiB,iBAAkB,eAC9E,UAAW,SAAU,aA3Id1D,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,iEAMyBD,EAAAA,CAAzBC,EAAAA,MAAM,4EAMED,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,8DAKQD,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,qEAMQD,EAAAA,CAARC,EAAAA,sEAKQD,EAAAA,CAARC,EAAAA,oEAKQD,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,8DAKSD,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAKbpC,EAAAA,CAAToE,EAAAA,yBAAyBhC,EAAAA,oDAKhBpC,EAAAA,CAAToE,EAAAA,yBAAehC,EAAAA,0CAKNpC,EAAAA,CAAToE,EAAAA,yBAAkBhC,EAAAA,6CAKTpC,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAmBhC,EAAAA,8CAKVpC,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAkBhC,EAAAA,6CAKTpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAAqBhC,EAAAA,gDAzIXF,EAASuB,EAAArO,EAAA,CAHrB8K,EAAAA,UAAU,CACTC,SAAU,sCAsJoBC,KApJnB8B,MCCbmC,EAAA,WAIE,SAAAA,EAAoB5F,EAAwC3E,GAAxCnB,KAAA8F,SAAAA,EAAwC9F,KAAAmB,MAAAA,EAHpDnB,KAAA+F,QACR,IAAI/D,IAmFN,OA5EE0J,EAAAnK,UAAAoK,aAAA,SAAa1F,GAAb,IAAA7E,EAAApB,KACQ2D,EAAW3D,KAAK8F,SAASvC,gBAAgB,CAC7CqI,MAAO3F,EAAM2F,QAEd9M,KAAK,SAAA7C,GAIJ,OAHIgK,EAAM4F,SACRzK,EAAK0K,gBAAgB7P,EAAGgK,EAAM4F,SAAS/M,KAAK,SAAAiN,GAAY,OAAA9P,EAAE8P,SAAWA,IAEhE9P,IAET+D,KAAK+F,QAAQG,IAAID,EAAOtC,IAG1B+H,EAAAnK,UAAAyK,gBAAA,SAAgB/F,GAAhB,IAAA7E,EAAApB,KACEA,KAAK+F,QAAQM,IAAIJ,GAAOnH,KAAK,SAAAmN,GAC3BA,EAAE9I,OAAO,MACT/B,EAAK2E,QAAQQ,OAAON,MAIxByF,EAAAnK,UAAA2K,cAAA,SAAcjG,EAAqB4F,GAAnC,IAAAzK,EAAApB,KACEA,KAAK+F,QAAQM,IAAIJ,GAAOnH,KAAK,SAAAmN,GAC3BA,EAAEhB,QAAQ,SAAUkB,GAClBF,EAAE3C,OAAO6C,GAET,IAAIC,EAAQH,EAAEF,SAASf,QAAQmB,EAAS,GACpCC,GAAS,GACXH,EAAEF,SAASM,OAAOD,EAAO,KAG7BhL,EAAK0K,gBAAgBG,EAAGJ,GAAS/M,KAAK,SAAAiN,GAAY,OAAAE,EAAEF,SAAWA,OAInEL,EAAAnK,UAAA+K,eAAA,SAAerG,EAAqB/D,GAElClC,KAAK+F,QAAQM,IAAIJ,GAAOnH,KAAK,SAAAmN,GAC3BA,EAAEM,mBAAmBrK,EAAQsK,iBAC7BP,EAAEQ,YAAYvK,EAAQwK,UACtBT,EAAEU,eAAezK,EAAQ0K,aACzBX,EAAEY,SAAS3K,EAAQ0J,UAOvBF,EAAAnK,UAAA6H,sBAAA,SAAyB/E,EAAmB4B,GAA5C,IAAA7E,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrBnD,EAAK2E,QAAQM,IAAIJ,GAAOnH,KAAK,SAAC7C,GAC5BA,EAAEuI,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,YAU5EgN,EAAAnK,UAAAuK,gBAAA,SAAgB7P,EAAS4P,GACvB,OAAO,IAAI1N,QAAmB,SAACC,EAASC,GACpC,GAAuB,iBAAZwN,EACT,IAEEzN,EADiBnC,EAAE6Q,WAAWjB,IAE9B,MAAOnN,GACPL,EAAOK,OAEmB,iBAAZmN,EAChB5P,EAAE8Q,YAAYlB,EAAS,KAAMzN,GAE7BC,EAAO,uEAjFJqN,EAAgBjP,EAAA,CAD5BuE,EAAAA,oCAK+BC,EAAqC2E,EAAAA,UAJxD8F,GAAb,GCLIjF,EAAU,EAmMduG,EAAA,WAsBE,SAAAA,EAAoBrG,GAAA3G,KAAA2G,SAAAA,EAnBZ3G,KAAA4G,iBAAkB,EAClB5G,KAAA6G,KAAeJ,KAAWK,WAC1B9G,KAAAiN,eAAiC,GAK/BjN,KAAAkN,WAA2C,IAAIzD,EAAAA,aAKhDzJ,KAAA6L,QAAkC,WA0D7C,SAzEamB,EAwBXA,EAAAzL,UAAAwF,SAAA,WACM/G,KAAK4G,kBAGT5G,KAAK2G,SAASgF,aAAa3L,MAC3BA,KAAK4G,iBAAkB,EACvB5G,KAAKmN,uBAGCH,EAAAzL,UAAA4L,mBAAR,WAAA,IAAA/L,EAAApB,KACoB,CAChB,CAAEoN,KAAM,QAASC,QAAS,SAACC,GAAuB,OAAAlM,EAAK8L,WAAW7B,KAAKiC,MAE/DrC,QAAQ,SAACsC,GACjB,IAAMC,EAAKpM,EAAKuF,SAASyC,sBAAsBmE,EAAIH,KAAMhM,GAAMgK,UAAUmC,EAAIF,SAC7EjM,EAAK6L,eAAe1M,KAAKiN,MAK7BR,EAAAzL,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3BmG,EAAAzL,UAAAuF,SAAA,WAAqB,MAAO,gBAAgB9G,KAAK6G,IAAIC,YAGrDkG,EAAAzL,UAAA6F,YAAA,WACEpH,KAAK2G,SAASqF,gBAAgBhM,MAE9BA,KAAKiN,eAAehC,QAAQ,SAAAM,GAAK,OAAAA,EAAEC,iBAIrCwB,EAAAzL,UAAAyF,YAAA,SAAYC,GAAZ,IAAA7F,EAAApB,KACE,GAAKA,KAAK4G,gBAAV,CAIA,IAAI6G,EAAgBxG,EAAiB,QACjCwG,GACFzN,KAAK2G,SAASuF,cAAclM,KAAMyN,EAAcvG,cAGlD,IAAIwG,EAA2B,GAE/BC,EAAaC,uBAAuB3C,QAAQ,SAAAJ,GAAK,OAAC6C,EAAoB7C,GAAK5D,EAAQzK,eAAeqO,GAAK5D,EAAQ4D,GAAG3D,aAAgB9F,EAAayJ,KAE/I7K,KAAK2G,SAAS2F,eAAetM,KAAM0N,KAtEtBV,EAAAY,uBAAwC,CAAC,SAS9CvG,EAAAA,CAAToE,EAAAA,yBAAqBhC,EAAAA,gDAKbpC,EAAAA,CAARC,EAAAA,wBAAiBnL,uCAKTkL,EAAAA,CAARC,EAAAA,+DApBU0F,EAAYW,EAAAlR,EAAA,CAHxB8K,EAAAA,UAAU,CACTC,SAAU,0CAwBoBkE,KAtBnBsB,GAAb,GC9KAa,EAAA,aAQAC,EAAA,WAKE,SAAAA,EAAYC,GAAZ,IAAA3M,EAAApB,KAHmBA,KAAAgO,yBAA2B,IAAIC,EAAAA,gBAAwB,KACvDjO,KAAAkO,kBAAoB,IAAID,EAAAA,gBAA2B,IAAIjM,KAGxEhC,KAAKmO,QAAUC,EAAAA,KAAKL,EAAOnM,QAAQyM,KACjCC,EAAAA,QAAQ,WAAM,OAAAlN,EAAK8M,oBACnBK,EAAAA,OACEvO,KAAKgO,yBAAyBK,KAAKG,EAAAA,UAAU,SAAAC,GAAQ,OAAAC,EAAAA,MAAM,EAAGD,OAEhE5M,EAAAA,IAAI,SAAA8M,GAAmB,OAAAvN,EAAKwN,gBAAgBD,KAC5CE,EAAAA,YAAY,IAuClB,OAnCUf,EAAAvM,UAAAqN,gBAAR,SACED,GAEA,IAAMG,EAAS,IAAIhN,OAAOC,KAAKgN,aAE/B,OADAJ,EAAgB1D,QAAQ,SAAA/O,GAAK,OAAA4S,EAAOE,OAAO9S,KACpC4S,GAGThB,EAAAvM,UAAA0N,YAAA,SAAYhL,GACV,IAAMkD,EAAKnH,KAAKkP,kBAAkBjL,GAClC,IAAIjE,KAAKkO,kBAAkB3P,MAAM4Q,IAAIhI,GAArC,CAGA,IAAMtF,EAAM7B,KAAKkO,kBAAkB3P,MACnCsD,EAAIqE,IAAIiB,EAAIlD,GACZjE,KAAKkO,kBAAkBzP,KAAKoD,KAG9BiM,EAAAvM,UAAA6N,iBAAA,SAAiBnL,GACf,IAAMpC,EAAM7B,KAAKkO,kBAAkB3P,MACnCsD,EAAI0E,OAAOvG,KAAKkP,kBAAkBjL,IAClCjE,KAAKkO,kBAAkBzP,KAAKoD,IAG9BiM,EAAAvM,UAAA8N,gCAAA,SAAgCC,GAC9BtP,KAAKgO,yBAAyBvP,KAAK6Q,IAGrCxB,EAAAvM,UAAAgO,WAAA,WACE,OAAOvP,KAAKmO,SAGJL,EAAAvM,UAAA2N,kBAAV,SAA4BjL,GAC1B,OAAUA,EAAO8D,IAAG,IAAI9D,EAAOgE,KAjDtB6F,EAAgBrR,EAAA,CAD5BuE,EAAAA,oCAMqBD,KALT+M,GAAb,GCpBA0B,EAAA,WAUE,SAAAA,EAC2BC,EACRC,GADQ1P,KAAAyP,mBAAAA,EACRzP,KAAA0P,kBAAAA,EAPV1P,KAAA2P,cAAe,EAEhB3P,KAAA4P,YAA6B,IAAIC,EAAAA,QACjC7P,KAAA8P,wBAAmD,KAkE7D,OAxDEN,EAAAjO,UAAAyF,YAAA,WACEhH,KAAK+P,iBAMPP,EAAAjO,UAAAwF,SAAA,WAAA,IAAA3F,EAAApB,KACEA,KAAKyP,mBACFO,uBACA3B,KACC4B,EAAAA,qBACE,SAAC3K,EAAqBnG,GACpB,OAAAmG,EAAErB,OAAO8D,MAAQ5I,EAAE8E,OAAO8D,KAAOzC,EAAErB,OAAOgE,MAAQ9I,EAAE8E,OAAOgE,MAE/DiI,EAAAA,UAAUlQ,KAAK4P,cAEhBxE,UAAU,SAAA+E,GAAW,OAAA/O,EAAK2O,cAAcI,MAUrCX,EAAAjO,UAAAwO,cAAR,SAAsBK,GAEhBpQ,KAAK8P,yBACP9P,KAAK0P,kBAAkBN,iBAAiBpP,KAAK8P,wBAAwB7L,QAKnEmM,IACFpQ,KAAK8P,wBAA0BM,GAE5BpQ,KAAK8P,0BAGgB,IAAtB9P,KAAK2P,cACP3P,KAAK0P,kBAAkBT,YAAYjP,KAAK8P,wBAAwB7L,SAOpEuL,EAAAjO,UAAA6F,YAAA,WACEpH,KAAK4P,YAAYnR,OACjBuB,KAAK4P,YAAYS,WACoB,OAAjCrQ,KAAK8P,yBACP9P,KAAK0P,kBAAkBN,iBAAiBpP,KAAK8P,wBAAwB7L,SAlEhEoD,EAAAA,CAARC,EAAAA,oEALUkI,EAAY/S,EAAA,CAHxB8K,EAAAA,UAAU,CACTC,SAAU,mBAaP8I,EAAAA,EAAAC,EAAAA,+BAA4C1C,EACTC,KAZ3B0B,GAAb,gBCAE,SAAAgB,EAAsBC,EAA8CtP,GAA9CnB,KAAAyQ,aAAAA,EAA8CzQ,KAAAmB,MAAAA,EAH1DnB,KAAA0Q,SACN,IAAI1O,IAgGV,OA5FQwO,EAAAjP,UAAAoP,iBAAN,SAAuBC,oEACrB,OAAe,OAAXA,EACF,CAAA,EAAO,MAEP,CAAA,EAAO5Q,KAAKyQ,aAAazN,eAAelE,KAAK,WAAM,OAAAgD,OAAOC,KAAK8O,UAAUD,WAI7EJ,EAAAjP,UAAAuP,aAAA,SAAaC,GAAb,IAAA3P,EAAApB,KACQU,EAAIV,KAAK0Q,SAASrK,IAAI0K,GAC5B,OAAS,MAALrQ,EAEKvC,QAAQC,UAEVsC,EAAE5B,KAAK,SAAC4B,GACb,OAAOU,EAAKD,MAAMuD,IAAI,WACpBhE,EAAEyC,OAAO,MACT/B,EAAKsP,SAASnK,OAAOwK,QAK3BP,EAAAjP,UAAAyP,qBAAA,SAAqBD,GACnB,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAC7B,SAAC4B,GAAc,OAAAA,EAAEuQ,YAAY,CAAClJ,IAAKgJ,EAAO/I,SAAUC,IAAK8I,EAAO7I,eAGtEsI,EAAAjP,UAAA2P,YAAA,SAAYH,GACV,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAc,OAAAA,EAAEyQ,SAASJ,EAAOK,UAGzEZ,EAAAjP,UAAA8P,YAAA,SAAYN,GACV,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAgBA,EAAE4Q,SAASP,EAAOxR,UAG3EiR,EAAAjP,UAAAgQ,gBAAA,SAAgBR,GACd,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAc,OAAAA,EAAEsI,aAAa+H,EAAO3I,cAG7EoI,EAAAjP,UAAAiQ,WAAA,SAAWT,GACT,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAc,OAAAA,EAAE+Q,QAAQV,EAAOW,YAGxElB,EAAAjP,UAAAoQ,cAAA,SAAcZ,GACZ,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAc,OAAAA,EAAEkR,WAAWb,EAAOc,YAG3ErB,EAAAjP,UAAAuQ,cAAA,SAAcf,GACZ,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAc,OAAAA,EAAEuI,WAAW8H,EAAOlN,YAG3E2M,EAAAjP,UAAAwQ,aAAA,SAAahB,GACX,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAc,OAAAA,EAAEsR,UAAUjB,EAAOnI,WAG1E4H,EAAAjP,UAAA0Q,gBAAA,SAAgBlB,GACd,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAAc,OAAAA,EAAEwR,aAAanB,EAAO5I,cAGvEqI,EAAAjP,UAAA4Q,gBAAN,SAAsBpB,qGACV,MAAA,CAAA,EAAM/Q,KAAK0Q,SAASrK,IAAI0K,WACnB,OADTrQ,EAAI0R,EAAA5S,OACV6S,GAAAC,EAAA5R,GAAE6R,aAAa,CAAA,EAAMvS,KAAK2Q,iBAAiBI,EAAOyB,0BAAlDH,EAAAtT,MAAAuT,EAAA,CAAeF,EAAA5S,mBAGjBgR,EAAAjP,UAAAkR,UAAA,SAAU1B,GAAV,IAAA3P,EAAApB,KACQ0S,EAAgB,IAAIvU,QAAgB,SAAOC,GAAO,OAAAN,EAAAsD,OAAA,OAAA,EAAA,sEAWzC,OAVdiR,GAAAC,EAAAtS,KAAKyQ,cAAarO,gBACfuQ,SAAU,CAAC5K,IAAKgJ,EAAO/I,SAAUC,IAAK8I,EAAO7I,WAC7C3I,MAAOwR,EAAOxR,MACd6I,UAAW2I,EAAO3I,UAClBwK,KAAM7B,EAAOW,QACbG,QAASd,EAAOc,QAChBhO,QAASkN,EAAOlN,QAChB+E,OAAQmI,EAAOnI,OACfwI,MAAOL,EAAOK,MACdjJ,UAAW4I,EAAO5I,WACP,CAAA,EAAMnI,KAAK2Q,iBAAiBI,EAAOyB,mBAVjD,MAAA,CAAA,EAAAH,EAAAtT,MAAAuT,EAAA,EAUGF,EAAAI,UAAWK,EAAArT,YACVV,KAAKV,WACV4B,KAAK0Q,SAASxK,IAAI6K,EAAQ2B,IAG5BlC,EAAAjP,UAAAuR,gBAAA,SAAgB/B,GACd,OAAO/Q,KAAK0Q,SAASrK,IAAI0K,IAG3BP,EAAAjP,UAAA6H,sBAAA,SAAyB/E,EAAmB0M,GAA5C,IAAA3P,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrBnD,EAAKsP,SAASrK,IAAI0K,GAAQjS,KAAK,SAAC4B,GAC9BA,EAAE8D,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,YA9FjE8R,EAAa/T,EAAA,CADzBuE,EAAAA,oCAKqCC,EAAuC2E,EAAAA,UAJhE4K,mBCGX,SAAAuC,EACYtC,EAA4CtP,EAC5C6R,GADAhT,KAAAyQ,aAAAA,EAA4CzQ,KAAAmB,MAAAA,EAC5CnB,KAAAgT,eAAAA,EALJhT,KAAAiT,aACJ,IAAIjR,IA2EV,OArEE+Q,EAAAxR,UAAA2R,iBAAA,SAAiBC,GAAjB,IAAA/R,EAAApB,KACQoT,EAAUpT,KAAKiT,aAAa5M,IAAI8M,GACtC,OAAe,MAAXC,EAEKjV,QAAQC,UAEVgV,EAAQtU,KAAK,SAACzB,GACnB,OAAO+D,EAAKD,MAAMuD,IAAI,WACpBrH,EAAEgW,QACFjS,EAAK6R,aAAa1M,OAAO4M,QAK/BJ,EAAAxR,UAAA0P,YAAA,SAAYkC,GACV,OAAOnT,KAAKiT,aAAa5M,IAAI8M,GAAYrU,KAAK,SAACzB,GAAkB,OAAAA,EAAE4T,YAAY,CAC7ElJ,IAAKoL,EAAWnL,SAChBC,IAAKkL,EAAWjL,eAIpB6K,EAAAxR,UAAAyQ,UAAA,SAAUmB,GACR,OAAOnT,KAAKiT,aAAa5M,IAAI8M,GACxBrU,KAAK,SAACzB,GAAkB,OAAAA,EAAE2U,UAAUmB,EAAWvK,WAGtDmK,EAAAxR,UAAA+R,KAAA,SAAKH,GAAL,IAAA/R,EAAApB,KACE,OAAOA,KAAKiT,aAAa5M,IAAI8M,GAAYrU,KAAK,SAACyU,GAC7C,OAA6B,MAAzBJ,EAAWK,WACNpS,EAAK4R,eAAeF,gBAAgBK,EAAWK,YAAY1U,KAAK,SAACiS,GACtE,OAAO3P,EAAKqP,aAAazN,eAAelE,KAAK,SAAC+C,GAAQ,OAAA0R,EAAED,KAAKzR,EAAKkP,OAG/D3P,EAAKqP,aAAazN,eAAelE,KAAK,SAAC+C,GAAQ,OAAA0R,EAAED,KAAKzR,QAIjEkR,EAAAxR,UAAA8R,MAAA,SAAMF,GACJ,OAAOnT,KAAKiT,aAAa5M,IAAI8M,GAAYrU,KAAK,SAACyU,GAAM,OAAAA,EAAEF,WAGzDN,EAAAxR,UAAAY,WAAA,SAAWgR,EAA2BjR,GACpC,OAAOlC,KAAKiT,aAAa5M,IAAI8M,GAAYrU,KAAK,SAACzB,GAAkB,OAAAA,EAAE8E,WAAWD,MAGhF6Q,EAAAxR,UAAAkS,cAAA,SAAcN,GACZ,IAAMjR,EAA6B,CACjCwR,QAASP,EAAWO,QACpBC,SAAUR,EAAWQ,SACrB/K,OAAQuK,EAAWvK,OACnBgL,eAAgBT,EAAWS,gBAEM,iBAAxBT,EAAWnL,UAAyD,iBAAzBmL,EAAWjL,YAC/DhG,EAAQyQ,SAAW,CAAC5K,IAAKoL,EAAWnL,SAAUC,IAAKkL,EAAWjL,YAEhE,IAAM2L,EAAoB7T,KAAKyQ,aAAalO,iBAAiBL,GAC7DlC,KAAKiT,aAAa/M,IAAIiN,EAAYU,IAMpCd,EAAAxR,UAAA6H,sBAAA,SAAyB/E,EAAmB8O,GAA5C,IAAA/R,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrBnD,EAAK6R,aAAa5M,IAAI8M,GAAYrU,KAAK,SAACzB,GACtCA,EAAEmH,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,YAzEjEqU,EAAiBtW,EAAA,CAD7BuE,EAAAA,oCAM2BC,EAAqC2E,EAAAA,OACnC4K,KANjBuC,MCJTe,EAAe,EAmCnBC,EAAA,WA0DE,SAAAA,EAAoBC,EAA+CC,GAA/CjU,KAAAgU,mBAAAA,EAA+ChU,KAAAiU,IAAAA,EAX1DjU,KAAAkU,QAAS,EAKRlU,KAAAmU,gBAAsC,IAAI1K,EAAAA,aAG5CzJ,KAAAoU,2BAA4B,EAC5BpU,KAAA6G,KAAeiN,KAAgBhN,iBAqEzC,SA7HaiN,EA4DXA,EAAAxS,UAAAwF,SAAA,WACE/G,KAAK0T,QAAU1T,KAAKiU,IAAII,cAAcC,cAAc,4BACpDtU,KAAKgU,mBAAmBP,cAAczT,MACtCA,KAAKoU,2BAA4B,EACjCpU,KAAKuU,mBACLvU,KAAKwK,2BAIPuJ,EAAAxS,UAAAyF,YAAA,SAAYC,GACLjH,KAAKoU,6BAGLnN,EAAkB,UAAKA,EAAmB,YAA+B,iBAAlBjH,KAAKgI,UACnC,iBAAnBhI,KAAKkI,WACdlI,KAAKgU,mBAAmB/C,YAAYjR,MAElCiH,EAAgB,QAClBjH,KAAKgU,mBAAmBhC,UAAUhS,MAEhCiH,EAAgB,QAClBjH,KAAKuU,mBAEPvU,KAAKwU,sBAAsBvN,KAGrB8M,EAAAxS,UAAAiJ,wBAAR,WAAA,IAAApJ,EAAApB,KACEA,KAAKgU,mBAAmB5K,sBAAsB,aAAcpJ,MAAMoL,UAAU,WAC1EhK,EAAK8S,QAAS,EACd9S,EAAK+S,gBAAgB9I,UAIjB0I,EAAAxS,UAAAgT,iBAAR,WACEvU,KAAKkU,OAASlU,KAAKsT,OAAStT,KAAKqT,SAG3BU,EAAAxS,UAAAiT,sBAAR,SAA8BvN,GAC5B,IAAI/E,EAAqC,GACxB/F,OAAOwO,KAAK1D,GAAS2D,OAClC,SAAAC,GAAK,OAAuD,IAAvD4J,EAAcC,yBAAyB1J,QAAQH,KAC7CI,QAAQ,SAACJ,GAAQ3I,EAAQ2I,GAAK5D,EAAQ4D,GAAG3D,eACpDlH,KAAKgU,mBAAmB7R,WAAWnC,KAAMkC,IAM3C6R,EAAAxS,UAAA+R,KAAA,WAAwB,OAAOtT,KAAKgU,mBAAmBV,KAAKtT,OAK5D+T,EAAAxS,UAAA8R,MAAA,WAAA,IAAAjS,EAAApB,KACE,OAAOA,KAAKgU,mBAAmBX,MAAMrT,MAAMlB,KAAK,WAAQsC,EAAK+S,gBAAgB9I,UAI/E0I,EAAAxS,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3BkN,EAAAxS,UAAAuF,SAAA,WAAqB,MAAO,iBAAmB9G,KAAK6G,IAAIC,YAGxDiN,EAAAxS,UAAA6F,YAAA,WAAgBpH,KAAKgU,mBAAmBd,iBAAiBlT,OAtE1C+T,EAAAW,yBAAqC,CAAC,iBAAkB,YAjD9DrN,EAAAA,CAARC,EAAAA,gEAMQD,EAAAA,CAARC,EAAAA,iEAMQD,EAAAA,CAARC,EAAAA,uEAQQD,EAAAA,CAARC,EAAAA,8DAOQD,EAAAA,CAARC,EAAAA,gEAeQD,EAAAA,CAARC,EAAAA,8DAKSD,EAAAA,CAAToE,EAAAA,yBAA0BhC,EAAAA,qDApDhBsK,EAAaU,EAAAhY,EAAA,CAPzBkY,EAAAA,UAAU,CACTnN,SAAU,kBACVoN,SAAU,kHA+D8B7B,EAAgC8B,EAAAA,cA1D7Dd,GAAb,GC5BAe,EAAA,WAIE,SAAAA,EAAoBhP,EAAwC3E,GAAxCnB,KAAA8F,SAAAA,EAAwC9F,KAAAmB,MAAAA,EAHpDnB,KAAA+F,QACJ,IAAI/D,IA2CV,OApCE8S,EAAAvT,UAAAwT,YAAA,SAAY9O,GACV,IAAMtC,EAAW3D,KAAK8F,SAAS9C,eAAelE,KAAK,SAAA4B,GACjD,OAAO,IAAIoB,OAAOC,KAAKiT,SAAS,CAC9B7M,UAAWlC,EAAMkC,UACjBtG,IAAKnB,EACLuU,iBAAkBhP,EAAMgP,iBACxBC,eAAgBjP,EAAMiP,eACtBC,oBAAqBlP,EAAMkP,oBAC3BC,IAAKnP,EAAMmP,IACXxM,OAAQ3C,EAAM2C,WAGlB5I,KAAK+F,QAAQG,IAAID,EAAOtC,IAG1BmR,EAAAvT,UAAAY,WAAA,SAAW8D,EAAoB/D,GAC7BlC,KAAK+F,QAAQM,IAAIJ,GAAOnH,KAAK,SAAAmN,GAAK,OAAAA,EAAE9J,WAAWD,MAGjD4S,EAAAvT,UAAA8T,eAAA,SAAepP,GAAf,IAAA7E,EAAApB,KACEA,KAAK+F,QAAQM,IAAIJ,GAAOnH,KAAK,SAAAmN,GAC3BA,EAAE9I,OAAO,MACT/B,EAAK2E,QAAQQ,OAAON,MAOxB6O,EAAAvT,UAAA6H,sBAAA,SAAyB/E,EAAmB4B,GAA5C,IAAA7E,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrBnD,EAAK2E,QAAQM,IAAIJ,GAAOnH,KAAK,SAAC4B,GAC5BA,EAAE8D,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,YAzCjEoW,EAAerY,EAAA,CAD3BuE,EAAAA,oCAK+BC,EAAqC2E,EAAAA,UAJxDkP,GAAb,GCPIrO,EAAU,EAKd6O,EAAA,WAyDE,SAAAA,EAAoB3O,GAAA3G,KAAA2G,SAAAA,EAxDZ3G,KAAA4G,iBAAkB,EAClB5G,KAAA6G,KAAeJ,KAAWK,WAC1B9G,KAAAiN,eAAiC,GAOhCjN,KAAAmI,WAAY,EAQZnI,KAAAiV,kBAAmB,EAKnBjV,KAAAkV,gBAAiB,EAKjBlV,KAAAmV,qBAAsB,EAKtBnV,KAAAoV,IAAc,KAKdpV,KAAA4I,OAAwB,KAKvB5I,KAAAkN,WAA0C,IAAIzD,EAAAA,aAK9CzJ,KAAAuV,sBAA4C,IAAI9L,EAAAA,aAOhDzJ,KAAAwV,aAAmC,IAAI/L,EAAAA,mBAwDnD,SA/Ga6L,EA2DXA,EAAA/T,UAAAwF,SAAA,WACM/G,KAAK4G,kBAGT5G,KAAK2G,SAASoO,YAAY/U,MAC1BA,KAAK4G,iBAAkB,EACvB5G,KAAKmN,uBAGPmI,EAAA/T,UAAAyF,YAAA,SAAYC,GACLjH,KAAK4G,iBAGV5G,KAAKyV,sBAAsBxO,IAGrBqO,EAAA/T,UAAAkU,sBAAR,SAA8BxO,GAC5B,IAAM/E,EAAU/F,OAAOwO,KAAK1D,GACP2D,OAAO,SAAAC,GAAK,OAA6C,IAA7C6K,EAAYC,iBAAiB3K,QAAQH,KACjD+K,OAAO,SAACrI,EAAU1C,GAEjB,OADA0C,EAAI1C,GAAK5D,EAAQ4D,GAAG3D,aACbqG,GACN,IACnBpR,OAAOwO,KAAKzI,GAASlF,OAAS,GAChCgD,KAAK2G,SAASxE,WAAWnC,KAAMkC,IAI3BoT,EAAA/T,UAAA4L,mBAAR,WAAA,IAAA/L,EAAApB,KACoB,CAChB,CAACoN,KAAM,QAASC,QAAS,SAACC,GAAsB,OAAAlM,EAAK8L,WAAW7B,KAAKiC,KACrE,CAACF,KAAM,0BAA2BC,QAAS,WAAM,OAAAjM,EAAKmU,sBAAsBlK,SAC5E,CAAC+B,KAAM,iBAAkBC,QAAS,WAAM,OAAAjM,EAAKoU,aAAanK,UAElDJ,QAAQ,SAACsC,GACjB,IAAMC,EAAKpM,EAAKuF,SAASyC,sBAAsBmE,EAAIH,KAAMhM,GAAMgK,UAAUmC,EAAIF,SAC7EjM,EAAK6L,eAAe1M,KAAKiN,MAK7B8H,EAAA/T,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3ByO,EAAA/T,UAAAuF,SAAA,WAAqB,MAAO,eAAe9G,KAAK6G,IAAIC,YAGpDwO,EAAA/T,UAAA6F,YAAA,WACEpH,KAAK2G,SAAS0O,eAAerV,MAE7BA,KAAKiN,eAAehC,QAAQ,SAAAM,GAAK,OAAAA,EAAEC,iBAzGtB8J,EAAAK,iBACX,CAAC,YAAa,mBAAoB,iBAAkB,sBAAuB,MAAO,UAK7EtO,EAAAA,CAARC,EAAAA,iEAQQD,EAAAA,CAARC,EAAAA,wEAKQD,EAAAA,CAARC,EAAAA,sEAKQD,EAAAA,CAARC,EAAAA,2EAKQD,EAAAA,CAARC,EAAAA,2DAKQD,EAAAA,CAARC,EAAAA,8DAKSD,EAAAA,CAAToE,EAAAA,yBAAqBhC,EAAAA,gDAKZpC,EAAAA,CAAToE,EAAAA,yBAAgChC,EAAAA,2DAOvBpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAvDb6L,EAAWI,EAAAjZ,EAAA,CAHvB8K,EAAAA,UAAU,CACTC,SAAU,yCA2DoBsN,KAzDnBQ,GAAb,YCRgBO,EAA4BC,GAC1C,IAAMC,EAAa,CAAC,YAAa,YAAa,UAC9C,OAAOC,EAAAA,iBACL,SAAC3I,GAAsB,OAAA0I,EAAWlU,IAAI,SAAAoU,GAAU,OAAAH,EAAMtR,YAAYyR,EAChE,SAAC7J,EAAe8J,GAAiB,OAAA7I,EAAQtO,MAAM+W,EAAO,CAAE,CAACK,OAAUL,EAAMM,WAAYH,OAAMA,EAAE7J,MAAKA,EAAE8J,SAAQA,UAC9G,SAACG,EAAoBC,GAAqC,OAAAA,EAAYrL,QAAQ,SAAAsL,GAAc,OAAAA,EAAWjN,iBC0S/FkN,EAiNAC,EAeAC,EAyBAC,EAkCAC,EA2BAC,EA+CAC,EA0BAC,eCnqBV,SAAAC,EAAoBvG,EAA4CtP,GAA5CnB,KAAAyQ,aAAAA,EAA4CzQ,KAAAmB,MAAAA,EAHxDnB,KAAAiX,UACN,IAAIjV,IAqGR,OAjGEgV,EAAAzV,UAAA2V,WAAA,SAAWC,GACT,IAAMC,EAAiBpX,KAAKyQ,aAAarN,cAAc,CACrD+E,UAAWgP,EAAKhP,UAChBC,UAAW+O,EAAK/O,UAChBC,SAAU8O,EAAK9O,SACfC,UAAW6O,EAAK7O,UAChBC,YAAa4O,EAAK5O,YAClB8O,SAAUF,EAAKE,SACfC,MAAOH,EAAKG,MACZ7O,YAAa0O,EAAK1O,YAClBC,cAAeyO,EAAKzO,cACpBC,aAAcwO,EAAKxO,aACnB9E,QAASsT,EAAKtT,QACd+E,OAAQuO,EAAKvO,SAEf5I,KAAKiX,UAAU/Q,IAAIiR,EAAMC,IAG3BJ,EAAAzV,UAAAgW,cAAA,SAAclU,GAAd,IAAAjC,EAAApB,KACQU,EAAIV,KAAKiX,UAAU5Q,IAAIhD,GAC7B,OAAS,MAAL3C,EACKvC,QAAQC,UAEVsC,EAAE5B,KAAK,SAACmN,GAAe,OAAA7K,EAAKD,MAAMuD,IAAI,WAAQuH,EAAEuL,SAASnU,EAAQiU,YAG1EN,EAAAzV,UAAAkW,kBAAA,SAAkBN,EAAkBjV,GAClC,OAAOlC,KAAKiX,UAAU5Q,IAAI8Q,GAAMrY,KAAK,SAACmN,GAAiBA,EAAE9J,WAAWD,MAGtE8U,EAAAzV,UAAAmW,cAAA,SAAcJ,GAAd,IAAAlW,EAAApB,KACQU,EAAIV,KAAKiX,UAAU5Q,IAAIiR,GAC7B,OAAS,MAAL5W,EACKvC,QAAQC,UAEVsC,EAAE5B,KAAK,SAACmN,GACb,OAAO7K,EAAKD,MAAMuD,IAAI,WACpBuH,EAAE9I,OAAO,MACT/B,EAAK6V,UAAU1Q,OAAO+Q,QAK5BN,EAAAzV,UAAAoW,QAAA,SAAQtU,GACN,OAAOrD,KAAKiX,UAAU5Q,IAAIhD,GACvBvE,KAAK,SAACuE,GAAY,OAAAA,EAAQsU,UAAUvB,cAGzCY,EAAAzV,UAAAqW,SAAA,SAASvU,GACP,OAAOrD,KAAKiX,UAAU5Q,IAAIhD,GACvBvE,KAAK,SAACuE,GAAY,OAAAA,EAAQuU,WAAWxB,WAAWvU,IAAI,SAACtF,GAAM,OAAAA,EAAE6Z,gBAGlEY,EAAAzV,UAAA6H,sBAAA,SAAyB/E,EAAmB8S,GAA5C,IAAA/V,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrBnD,EAAK6V,UAAU5Q,IAAI8Q,GAAMrY,KAAK,SAACmN,GAC7BA,EAAEzH,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,YAKtEsY,EAAAzV,UAAAsW,0BAAN,SAAgCC,mGACd,MAAA,CAAA,EAAM9X,KAAKiX,UAAU5Q,IAAIyR,WAGzC,OAHMzU,EAAUiP,EAAA9S,OACV8X,EAAQjU,EAAQuU,WAEtB,CAAA,EADsB/B,EAAyByB,GAC1BjJ,KAAK0J,EAAAA,UAAW,CAAE5B,OAAQmB,EAAMlB,aACnD5H,EAAAA,UAAU,SAAAwJ,GAAiB,OAAAC,EAAAA,MAAKlZ,WAAA,EAAA8B,EAC9BmX,EAAc7B,OAAOtU,IAAI,SAACqW,EAAO9L,GAC/B,OAAAyJ,EAAyBqC,GACxB7J,KAAKxM,EAAAA,IAAI,SAAAsW,GAAc,MAAA,CAAGH,cAAaA,EAAEG,WAAUA,EAAEC,UAAWhM,UAClEiC,KAAK0J,EAAAA,UAAU,CAAEC,cAAaA,EAAEG,WAAY,KAAMC,UAAW,UAChEC,EAAAA,KAAK,GACLxW,EAAAA,IAAI,SAACyQ,OACCgG,EADCN,EAAA1F,EAAA0F,cAAeG,EAAA7F,EAAA6F,WAAYC,EAAA9F,EAAA8F,UAsBhC,OApBKD,GAUHG,EAAS,CACPnC,OAAQ6B,EAAc7B,OAAOtU,IAAI,SAAA0W,GAAU,OAAAA,EAAOnC,WAAWvU,IAAI,SAAAoC,GAAU,OAAAA,EAAOuU,aAClFJ,UAASA,EACT/T,UAAW8T,EAAWlC,OACtB7J,MAAO+L,EAAW/L,OAEhB+L,EAAWjC,WACboC,EAAOpC,SAAWiC,EAAWjC,YAhB/BoC,EAAS,CACPnC,OAAQ6B,EAAc7B,OAAOtU,IAAI,SAAA0W,GAAU,OAAAA,EAAOnC,WAAWvU,IAAI,SAAAoC,GAAU,OAAAA,EAAOuU,aAClFnU,UAAW2T,EAAc/B,OACzB7J,MAAO4L,EAAc5L,OAEnB4L,EAAc9B,WAChBoC,EAAOpC,SAAY8B,EAAc9B,SAASE,aAavCkC,YApGFtB,EAAcva,EAAA,CAD1BuE,EAAAA,oCAKmCC,EAAqC2E,EAAAA,UAJ5DoR,mBCMX,SAAAyB,EAAoBhI,EAA4CtP,GAA5CnB,KAAAyQ,aAAAA,EAA4CzQ,KAAAmB,MAAAA,EAHxDnB,KAAA0Y,WACJ,IAAI1W,UAoIV,SAtIayW,EAMIA,EAAAE,eAAf,SAA8B1V,GAI5B,OAHaA,EAAK2V,aAAa/W,IAAI,SAACgX,GAClC,MAAO,CAAC9Q,IAAK8Q,EAAM7Q,SAAUC,IAAK4Q,EAAM3Q,cAK7BuQ,EAAAK,aAAf,SAA4B3B,GAE1B,IAAM4B,EAAajX,OAAOC,KAAKyU,WAAWW,GAC1C,MAA0B,iBAAf4B,EACFA,EAEA5B,GAIIsB,EAAAO,cAAf,SAA6B/V,GAC3B,IAAMgW,EAAQhW,EAAKiW,YAAYrX,IAAI,SAAAsX,GAAW,MAAA,CAC5CC,cAAeD,EAAQC,cACvBC,OAAQF,EAAQE,OAChBC,OAAQH,EAAQG,OAChB1G,KAAM,CACJ2G,OAAQ,IAAIzX,OAAOC,KAAKyX,MAAML,EAAQM,QAASN,EAAQO,SACvDpR,UAAW6Q,EAAQ7Q,UACnBC,YAAa4Q,EAAQ5Q,YACrB4O,KAAMwC,EAAgBb,aAAaK,EAAQhC,MAC3CyC,SAAUT,EAAQS,SAClBC,MAAOV,EAAQU,MACfpR,YAAa0Q,EAAQ1Q,YACrBC,cAAeyQ,EAAQzQ,cACvBC,aAAcwQ,EAAQxQ,iBAe1B,OAXAsQ,EAAMhO,QAAQ,SAAA2H,GACZzW,OAAO2d,QAAQlH,GAAM3H,QAAQ,SAACqH,OAAAD,EAAA7R,EAAA8R,EAAA,GAAC1V,EAAAyV,EAAA,QACV,IADeA,EAAA,WAExBO,EAAahW,UAGS,IAAvBgW,EAAKA,KAAK2G,OAAOjU,QACI,IAAvBsN,EAAKA,KAAK2G,OAAOpa,UACfyT,EAAKA,KAAK2G,SAGhBN,GAGTR,EAAAlX,UAAAwY,YAAA,SAAY9W,GAAZ,IAAA7B,EAAApB,KACQga,EAAkBha,KAAKyQ,aAAazN,eACzClE,KAAK,WAAM,MAAA,CAAE6a,EAAgBhB,eAAe1V,GAC/B0W,EAAgBX,cAAc/V,MAC3CnE,KAAK,SAACwT,OAAAD,EAAA7R,EAAA8R,EAAA,GAAC6E,EAAA9E,EAAA,GAAM4G,EAAA5G,EAAA,GACZ,OAAAjR,EAAKqP,aAAa1N,eAAe,CAC/BoF,UAAWlF,EAAKkF,UAChBC,UAAWnF,EAAKmF,UAChBC,SAAUpF,EAAKoF,SACfgP,SAAUpU,EAAKoU,SACf5O,YAAaxF,EAAKwF,YAClBC,cAAezF,EAAKyF,cACpBC,aAAc1F,EAAK0F,aACnB9E,QAASZ,EAAKY,QACd+E,OAAQ3F,EAAK2F,OACbuO,KAAMA,EACN8B,MAAOA,MAEXjZ,KAAK0Y,WAAWxS,IAAIjD,EAAM+W,IAG5BvB,EAAAlX,UAAA0Y,qBAAA,SAAqBhX,GAArB,IAAA7B,EAAApB,KACQmX,EAAOwC,EAAgBhB,eAAe1V,GACtCvC,EAAIV,KAAK0Y,WAAWrS,IAAIpD,GAC9B,OAAS,MAALvC,EACKvC,QAAQC,UAEVsC,EAAE5B,KAAK,SAACmN,GAAkB,OAAO7K,EAAKD,MAAMuD,IAAI,WAAQuH,EAAEiO,QAAQ/C,QAGrEsB,EAAAlX,UAAA4Y,oBAAN,SAA0BlX,0GACxB,MAAA,CAAA,EAAMjD,KAAKyQ,aAAazN,uBAGxB,OAHAsP,EAAA9S,OACMyZ,EAAQU,EAAgBX,cAAc/V,GAEnC,OADHvC,EAAIV,KAAK0Y,WAAWrS,IAAIpD,IAE5B,CAAA,GAEF,CAAA,EAAOvC,EAAE5B,KAAK,SAAAmN,GAAK,OAAA7K,EAAKD,MAAMuD,IAAI,WAAM,OAAAuH,EAAE9J,WAAW,CAAC8W,MAAOA,eAG/DR,EAAAlX,UAAA6Y,mBAAA,SAAmBnX,EAAmBf,GAEpC,OAAOlC,KAAK0Y,WAAWrS,IAAIpD,GAAMnE,KAAK,SAACmN,GAAkBA,EAAE9J,WAAWD,MAGxEuW,EAAAlX,UAAA8Y,eAAA,SAAepX,GAAf,IAAA7B,EAAApB,KACQU,EAAIV,KAAK0Y,WAAWrS,IAAIpD,GAC9B,OAAS,MAALvC,EACKvC,QAAQC,UAEVsC,EAAE5B,KAAK,SAACmN,GACb,OAAO7K,EAAKD,MAAMuD,IAAI,WACpBuH,EAAE9I,OAAO,MACT/B,EAAKsX,WAAWnS,OAAOtD,QAKfwV,EAAAlX,UAAA+Y,WAAd,SAAyBC,2FACN,MAAA,CAAA,EAAMva,KAAK0Y,WAAWrS,IAAIkU,WAC3C,MAAA,CAAA,EADiBjI,EAAA9S,OACDmY,iBAGZc,EAAAlX,UAAAoW,QAAN,SAAc4C,2FACJ,MAAA,CAAA,EAAMva,KAAKsa,WAAWC,WAA9B,MAAA,CAAA,EAAQjI,EAAA9S,OAAoC4W,kBAG9CqC,EAAAlX,UAAA6H,sBAAA,SAAyB/E,EAAmBpB,GAA5C,IAAA7B,EAAApB,KACE,OAAO,IAAIsE,EAAAA,WAAW,SAACC,GACrBnD,EAAKsX,WAAWrS,IAAIpD,GAAMnE,KAAK,SAACmN,GAC9BA,EAAEzH,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,YAKtE+Z,EAAAlX,UAAAsW,0BAAN,SAAgC5U,2FACd,MAAA,CAAA,EAAMjD,KAAKsa,WAAWrX,WACtC,MAAA,CAAA,EAAO4S,EADSvD,EAAA9S,eAnIPiZ,EAAekB,EAAAld,EAAA,CAD3BuE,EAAAA,oCAKmCC,EAAqC2E,EAAAA,UAJ5D6S,mBCCX,SAAA+B,EAAoB9S,EAA2CvG,GAA3CnB,KAAA0H,YAAAA,EAA2C1H,KAAAmB,MAAAA,EAHvDnB,KAAAya,YACJ,IAAIzY,IAuFV,OAnFEwY,EAAAjZ,UAAAmZ,aAAA,SAAaC,GACX3a,KAAKya,YAAYvU,IAAIyU,EAAW3a,KAAK0H,YAAY7E,gBAAgB,CAC/DiM,OAAQ,CACN8L,MAAOD,EAAUC,MACjBC,KAAMF,EAAUE,KAChBC,MAAOH,EAAUG,MACjBC,KAAMJ,EAAUI,MAElB5S,UAAWwS,EAAUxS,UACrBC,UAAWuS,EAAUvS,UACrBC,SAAUsS,EAAUtS,SACpBC,UAAWqS,EAAUrS,UACrBC,YAAaoS,EAAUpS,YACvBE,YAAakS,EAAUlS,YACvBC,cAAeiS,EAAUjS,cACzBhG,eAAgBiY,EAAUjY,eAC1BiG,aAAcgS,EAAUhS,aACxB9E,QAAS8W,EAAU9W,QACnB+E,OAAQ+R,EAAU/R,WAOtB4R,EAAAjZ,UAAAyZ,gBAAA,SAAgBL,GAAhB,IAAAvZ,EAAApB,KACE,OAAOA,KAAKya,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GAC3CA,EAAEkG,OAAO,MACT/B,EAAKqZ,YAAYlU,OAAOoU,MAI5BH,EAAAjZ,UAAAY,WAAA,SAAWwY,EAAyBzY,GAClC,OAAOlC,KAAKya,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GAAM,OAAAA,EAAEkF,WAAWD,MAGlEsY,EAAAjZ,UAAAwD,UAAA,SAAU4V,GACR,OAAO3a,KAAKya,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GAAM,OAAAA,EAAE8H,eAGvDyV,EAAAjZ,UAAA0Z,UAAA,SAAUN,GACR,OAAO3a,KAAKya,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GAC3C,OAAOA,EAAEge,UAAU,CACjBL,MAAOD,EAAUC,MACjBC,KAAMF,EAAUE,KAChBC,MAAOH,EAAUG,MACjBC,KAAMJ,EAAUI,UAKtBP,EAAAjZ,UAAAwH,YAAA,SAAY4R,GACV,OAAO3a,KAAKya,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GAC3C,OAAOA,EAAE8L,YAAY4R,EAAUtS,aAInCmS,EAAAjZ,UAAAyH,aAAA,SAAa2R,GACX,OAAO3a,KAAKya,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GAC3C,OAAOA,EAAE+L,aAAa2R,EAAUvS,cAIpCoS,EAAAjZ,UAAA0H,WAAA,SAAW0R,GACT,OAAO3a,KAAKya,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GAC3C,OAAOA,EAAEgM,WAAW0R,EAAU9W,YAIlC2W,EAAAjZ,UAAA6H,sBAAA,SAAyB/E,EAAmBsW,GAA5C,IAAAvZ,EAAApB,KACE,OAAOsE,EAAAA,WAAW4W,OAAO,SAAC3W,GACxB,IAAI8E,EAAuC,KAK3C,OAJAjI,EAAKqZ,YAAYpU,IAAIsU,GAAW7b,KAAK,SAAC7B,GACpCoM,EAAWpM,EAAEuH,YAAYH,EAAW,SAAC3F,GAAS,OAAA0C,EAAKD,MAAMuD,IAAI,WAAM,OAAAH,EAAS9F,KAAKC,SAG5E,WACY,OAAb2K,GACFA,EAASC,aApFNkR,EAAgB/d,EAAA,CAD5BuE,EAAAA,oCAKkCC,EAAqC2E,EAAAA,UAJ3D4U,MC0EbW,EAAA,WA0SE,SAAAA,EACUC,EACA3K,EACqB4K,EACnB3L,EACFvO,GAJAnB,KAAAob,MAAAA,EACApb,KAAAyQ,aAAAA,EACqBzQ,KAAAqb,YAAAA,EACnBrb,KAAA0P,kBAAAA,EACF1P,KAAAmB,MAAAA,EA3SDnB,KAAAkI,UAAY,EAKZlI,KAAAgI,SAAW,EAKXhI,KAAAkF,KAAO,EAuBOlF,KAAAoI,WAAY,EAK1BpI,KAAAsb,wBAAyB,EAMzBtb,KAAAub,kBAAmB,EAKnBvb,KAAAwb,aAAc,EA4Bdxb,KAAAyb,mBAAoB,EAgBpBzb,KAAA0b,OAAyB,GAOzB1b,KAAA2b,YAAa,EAkBb3b,KAAAuF,WAA0D,EAU1DvF,KAAA4b,cAAe,EAUf5b,KAAA6b,gBAAiB,EAUjB7b,KAAA8b,YAAc,EAUd9b,KAAA+b,eAAgB,EAUhB/b,KAAAgc,mBAAqB,EAUrBhc,KAAAic,UAAqE,UAMrEjc,KAAAkc,gBAAiB,EAQjBlc,KAAAmc,uBAAwB,EAUxBnc,KAAAoc,gBAA8D,OAgB9Dpc,KAAAqc,KAAO,EAmBRrc,KAAAsc,yBAA2C,GAOzCtc,KAAAuc,SAAqC,IAAI9S,EAAAA,aAMzCzJ,KAAAwc,cAA0C,IAAI/S,EAAAA,aAM9CzJ,KAAAyc,YAAwC,IAAIhT,EAAAA,aAK5CzJ,KAAAwJ,aAA4C,IAAIC,EAAAA,aAKhDzJ,KAAA0c,aAA2C,IAAIjT,EAAAA,aAK/CzJ,KAAA2c,gBAA2C,IAAIlT,EAAAA,aAK/CzJ,KAAA4c,KAA2B,IAAInT,EAAAA,aAK/BzJ,KAAA6c,WAAmC,IAAIpT,EAAAA,aAMvCzJ,KAAA8c,SAA8B,IAAIrT,EAAAA,aAKlCzJ,KAAA+c,YAAkC,IAAItT,EAAAA,mBAiRlD,SAzjBa0R,EAmTXA,EAAA5Z,UAAAwF,SAAA,WACE,IAAIiW,EAAAA,iBAAiBhd,KAAKqb,aAA1B,CAKA,IAAM4B,EAAYjd,KAAKob,MAAM/G,cAAcC,cAAc,4BACzDtU,KAAKkd,iBAAiBD,KAGhB9B,EAAA5Z,UAAA2b,iBAAR,SAAyBzb,GAAzB,IAAAL,EAAApB,KACEA,KAAKyQ,aAAajP,UAAUC,EAAI,CAC9BqG,OAAQ,CAACC,IAAK/H,KAAKgI,UAAY,EAAGC,IAAKjI,KAAKkI,WAAa,GACzDhD,KAAMlF,KAAKkF,KACXiY,QAASnd,KAAKmd,QACdC,QAASpd,KAAKod,QACdC,YAAard,KAAKqd,YAClB9B,iBAAkBvb,KAAKub,iBACvBD,uBAAwBtb,KAAKsb,uBAC7BE,YAAaxb,KAAKwb,YAClB8B,gBAAiBtd,KAAKsd,gBACtBlV,UAAWpI,KAAKoI,UAChBmV,gBAAiBvd,KAAKud,gBACtBC,eAAgBxd,KAAKwd,eACrB/B,kBAAmBzb,KAAKyb,kBACxBC,OAAQ1b,KAAK0b,OACb+B,YAAazd,KAAKyd,YAClBC,mBAAoB1d,KAAK0d,mBACzBC,kBAAmB3d,KAAK2d,kBACxBC,yBAA0B5d,KAAK4d,yBAC/BhC,aAAc5b,KAAK4b,aACnBiC,oBAAqB7d,KAAK6d,oBAC1BhC,eAAgB7b,KAAK6b,eACrBiC,sBAAuB9d,KAAK8d,sBAC5BhC,WAAY9b,KAAK8b,WACjBiC,kBAAmB/d,KAAK+d,kBACxBhC,cAAe/b,KAAK+b,cACpBiC,qBAAsBhe,KAAKge,qBAC3BhC,kBAAmBhc,KAAKgc,kBACxBiC,yBAA0Bje,KAAKie,yBAC/BhC,UAAWjc,KAAKic,UAChBC,eAAgBlc,KAAKkc,eACrBE,gBAAiBpc,KAAKoc,gBACtBC,KAAMrc,KAAKqc,KACX6B,YAAale,KAAKke,cAEjBpf,KAAK,WAAM,OAAAsC,EAAKqP,aAAazN,iBAC7BlE,KAAK,SAAA+C,GAAO,OAAAT,EAAK0b,SAASzR,KAAKxJ,KAGlC7B,KAAKme,yBACLne,KAAKoe,uBACLpe,KAAKqe,wBACLre,KAAKse,sBACLte,KAAKue,yBACLve,KAAKwe,0BACLxe,KAAKye,oBAIPtD,EAAA5Z,UAAA6F,YAAA,WAEEpH,KAAKsc,yBAAyBrR,QAAQ,SAACM,GAAM,OAAAA,EAAEC,gBAG/CxL,KAAKyQ,aAAa9L,yBACd3E,KAAK0e,wBACP1e,KAAK0e,uBAAuBlT,eAKhC2P,EAAA5Z,UAAAyF,YAAA,SAAYC,GACVjH,KAAK2e,yBAAyB1X,GAC9BjH,KAAK4e,gBAAgB3X,IAGfkU,EAAA5Z,UAAAod,yBAAR,SAAiC1X,GAC/B,IAAI/E,EAAqC,GAEvC/F,OAAOwO,KAAK1D,GAAS2D,OAAO,SAAAC,GAAK,OAA6C,IAA7CgU,EAAOC,sBAAsB9T,QAAQH,KAC7DI,QAAQ,SAACJ,GAAQ3I,EAAQ2I,GAAK5D,EAAQ4D,GAAG3D,eACpDlH,KAAKyQ,aAAaxO,cAAcC,IAQlCiZ,EAAA5Z,UAAAwd,cAAA,SAAcC,GAAd,IAAA5d,EAAApB,KAIE,YAJY,IAAAgf,IAAAA,GAAA,GAIL,IAAI7gB,QAAc,SAACC,GACxB6gB,WAAW,WACT,OAAO7d,EAAKqP,aAAa/K,gBAAgB,UAAU5G,KAAK,WAClDkgB,IACgB,MAAlB5d,EAAKmE,UAAoBnE,EAAK8d,aAAe9d,EAAK+d,cAEpD/gB,WAMA+c,EAAA5Z,UAAAqd,gBAAR,SAAwB3X,IACK,MAAvBA,EAAkB,UAAqC,MAAxBA,EAAmB,WACjDA,EAAmB,aAMpB,cAAeA,EACjBjH,KAAKkf,aAIsB,iBAAlBlf,KAAKgI,UAAmD,iBAAnBhI,KAAKkI,WAGrDlI,KAAKmf,eAGChE,EAAA5Z,UAAA4d,WAAR,WACE,IAAIC,EAAY,CACdrX,IAAK/H,KAAKgI,SACVC,IAAKjI,KAAKkI,WAERlI,KAAK2b,WACP3b,KAAKyQ,aAAarL,MAAMga,GAExBpf,KAAKyQ,aAAa5L,UAAUua,IAIxBjE,EAAA5Z,UAAA2d,WAAR,WACE,OAAQlf,KAAKuF,WACX,KAAK,EACHvF,KAAKqf,+BACL,MACF,KAAK,EACCrf,KAAK0e,wBACP1e,KAAK0e,uBAAuBlT,cAE9B,MACF,QACExL,KAAK+P,cAAc/P,KAAKuF,UAAWvF,KAAKsf,oBAItCnE,EAAA5Z,UAAA8d,6BAAR,WAAA,IAAAje,EAAApB,KACEA,KAAKmB,MAAMQ,kBAAkB,WAC3BP,EAAKsd,uBAAyBtd,EAAKsO,kBAAkBH,aAAanE,UAAU,SAAAlP,GAC1EkF,EAAKD,MAAMuD,IAAI,WAAM,OAAAtD,EAAK2O,cAAc7T,EAAGkF,EAAKke,yBAK5CnE,EAAA5Z,UAAAwO,cAAV,SAAwBjB,EAA4CtJ,GAClE,GAAKsJ,EAAL,CAGA,GAAI9O,KAAKuf,uBAAuBzQ,IAA6B,oBAAXhN,QAA0BA,QAAUA,OAAOC,MAAQD,OAAOC,KAAKgN,aAAc,CAC7H,IAAMyQ,EAAY,IAAI1d,OAAOC,KAAKgN,aAClCyQ,EAAUC,MAAM3Q,GAChBA,EAAS0Q,EAEPxf,KAAK2b,WACP3b,KAAKyQ,aAAahL,YAAYqJ,EAAQtJ,GAGxCxF,KAAKyQ,aAAalL,UAAUuJ,EAAQtJ,KAG9B2V,EAAA5Z,UAAAge,uBAAR,SAA+BzQ,GAC7B,OAAiB,MAAVA,QAA6C4Q,IAA1B5Q,EAAeE,QAGnCmM,EAAA5Z,UAAA4c,uBAAR,WAAA,IAAA/c,EAAApB,KACQuL,EAAIvL,KAAKyQ,aAAarM,oBAA0B,kBAAkBgH,UAAU,WAChFhK,EAAKqP,aAAatL,YAAYrG,KAAK,SAACgJ,GAClC1G,EAAK4G,SAAWF,EAAOC,MACvB3G,EAAK8G,UAAYJ,EAAOG,MACxB7G,EAAKoI,aAAa6B,KAAK,CAACtD,IAAK3G,EAAK4G,SAAUC,IAAK7G,EAAK8G,gBAG1DlI,KAAKsc,yBAAyB/b,KAAKgL,IAG7B4P,EAAA5Z,UAAA+c,oBAAR,WAAA,IAAAld,EAAApB,KACQuL,EAAIvL,KAAKyQ,aAAarM,oBAA0B,kBAAkBgH,UAAU,WAChFhK,EAAKqP,aAAa1L,YAAYjG,KAC5B,SAACgQ,GAA2B1N,EAAKsb,aAAarR,KAAKyD,OAEvD9O,KAAKsc,yBAAyB/b,KAAKgL,IAG7B4P,EAAA5Z,UAAAgd,uBAAR,WAAA,IAAAnd,EAAApB,KACQuL,EAAIvL,KAAKyQ,aAAarM,oBAA0B,qBAAqBgH,UAAU,WACnFhK,EAAKqP,aAAazL,eAAelG,KAC/B,SAACmd,GAA2B7a,EAAKub,gBAAgBtR,KAAK4Q,OAE1Djc,KAAKsc,yBAAyB/b,KAAKgL,IAG7B4P,EAAA5Z,UAAA6c,qBAAR,WAAA,IAAAhd,EAAApB,KACQuL,EAAIvL,KAAKyQ,aAAarM,oBAA0B,gBAAgBgH,UAAU,WAC9EhK,EAAKqP,aAAa3L,UAAUhG,KAAK,SAAC6gB,GAChCve,EAAK8D,KAAOya,EACZve,EAAKyb,WAAWxR,KAAKsU,OAGzB3f,KAAKsc,yBAAyB/b,KAAKgL,IAG7B4P,EAAA5Z,UAAAkd,iBAAR,WAAA,IAAArd,EAAApB,KACQuL,EAAIvL,KAAKyQ,aAAarM,oBAA0B,QAAQgH,UAC5D,WAAQhK,EAAKwb,KAAKvR,UAAK,KACzBrL,KAAKsc,yBAAyB/b,KAAKgL,IAG7B4P,EAAA5Z,UAAAid,wBAAR,WAAA,IAAApd,EAAApB,KACQuL,EAAIvL,KAAKyQ,aAAarM,oBAA0B,eAAegH,UACnE,WAAM,OAAAhK,EAAK2b,YAAY1R,UAAK,KAE9BrL,KAAKsc,yBAAyB/b,KAAKgL,IAG7B4P,EAAA5Z,UAAA8c,sBAAR,WAAA,IAAAjd,EAAApB,KAO0B,CACtB,CAACoN,KAAM,QAASwS,QAAS5f,KAAKuc,UAC9B,CAACnP,KAAM,aAAcwS,QAAS5f,KAAKwc,eACnC,CAACpP,KAAM,WAAYwS,QAAS5f,KAAKyc,cAG5BxR,QAAQ,SAACvM,GACd,IAAM6M,EAAInK,EAAKqP,aAAarM,oBAAsC1F,EAAE0O,MAAMhC,UACxE,SAACxG,GACC,IAAIrG,EAAoB,CACtB+M,OAAQ,CACNvD,IAAKnD,EAAMX,OAAO8D,MAClBE,IAAKrD,EAAMX,OAAOgE,OAEpB4X,QAAUjb,EAA4Cib,SAGpDthB,EAAMshB,UAAYze,EAAK+a,uBACxBvX,EAAckb,OAEjBphB,EAAEkhB,QAAQvU,KAAK9M,KAEnB6C,EAAKkb,yBAAyB/b,KAAKgL,MA9UxB4P,EAAA2D,sBAAkC,CAC/C,yBAA0B,cAAe,YAAa,kBAAmB,iBACzE,oBAAqB,cAAe,qBAAsB,SAAU,oBACpE,2BAA4B,OAAQ,iBAAkB,wBAAyB,UAC/E,UAAW,aAAc,oBAAqB,gBAAiB,uBAC/D,oBAAqB,2BAA4B,eAAgB,sBACjE,YAAa,iBAAkB,kBAAmB,OAAQ,eA1OnDzX,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,4DAMQD,EAAAA,CAARC,EAAAA,+DAMQD,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,mEAMsBD,EAAAA,CAAtBC,EAAAA,MAAM,yEAKED,EAAAA,CAARC,EAAAA,8EAMQD,EAAAA,CAARC,EAAAA,wEAKQD,EAAAA,CAARC,EAAAA,mEAMQD,EAAAA,CAARC,EAAAA,uEAQQD,EAAAA,CAARC,EAAAA,uEAQQD,EAAAA,CAARC,EAAAA,sEAMQD,EAAAA,CAARC,EAAAA,yEAKQD,EAAAA,CAARC,EAAAA,oEAKQD,EAAAA,CAARC,EAAAA,0EAMQD,EAAAA,CAARC,EAAAA,6DAOQD,EAAAA,CAARC,EAAAA,kEAOQD,EAAAA,CAARC,EAAAA,0EAKQD,EAAAA,CAARC,EAAAA,gFAMQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,wEAKQD,EAAAA,CAARC,EAAAA,oEAKQD,EAAAA,CAARC,EAAAA,2EAKQD,EAAAA,CAARC,EAAAA,sEAKQD,EAAAA,CAARC,EAAAA,6EAKQD,EAAAA,CAARC,EAAAA,kEAKQD,EAAAA,CAARC,EAAAA,yEAKQD,EAAAA,CAARC,EAAAA,qEAKQD,EAAAA,CAARC,EAAAA,4EAKQD,EAAAA,CAARC,EAAAA,yEAKQD,EAAAA,CAARC,EAAAA,gFAKQD,EAAAA,CAARC,EAAAA,iEAMQD,EAAAA,CAARC,EAAAA,sEAQQD,EAAAA,CAARC,EAAAA,6EAUQD,EAAAA,CAARC,EAAAA,uEAgBQD,EAAAA,CAARC,EAAAA,4DAMQD,EAAAA,CAARC,EAAAA,mEAoBSD,EAAAA,CAAToE,EAAAA,yBAAmBhC,EAAAA,8CAMVpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAMfpC,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAKbpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAA0BhC,EAAAA,qDAKjBpC,EAAAA,CAAToE,EAAAA,yBAAehC,EAAAA,0CAKNpC,EAAAA,CAAToE,EAAAA,yBAAqBhC,EAAAA,gDAMZpC,EAAAA,CAAToE,EAAAA,yBAAmBhC,EAAAA,8CAKVpC,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAxSZ0R,EAAM0D,EAAApiB,EAAA,CApClBkY,EAAAA,UAAU,CACTnN,SAAU,UACVuY,UAAW,CACTtY,EACAiE,EACAA,EACAoC,EACA7M,EACA8R,EACA+B,EACAjP,EACA2K,EACAwG,EACAyB,EACA+B,GAEFwF,KAAM,CAEJC,oCAAqC,QAWvCrL,SAAU,wNATD,oJA6TNtE,EAAAA,EAAA4P,EAAAA,OAAOC,EAAAA,qCAFOtL,EAAAA,WACO5T,EACoB9E,OACb2R,EACdlI,EAAAA,UA/SNuV,GAAb,GC3EIiF,EAAW,EAoCfC,EAAA,WA2HE,SAAAA,EAAoBrN,GAAAhT,KAAAgT,eAAAA,EAlGMhT,KAAAoI,WAAY,EAU7BpI,KAAA6D,SAAU,EAKV7D,KAAAsgB,gBAAiB,EAKjBtgB,KAAA6R,QAAU,EAQV7R,KAAA4I,OAAS,EAMQ5I,KAAAmI,WAAY,EAa5BnI,KAAAugB,gBAAkB,IAAI9W,EAAAA,aAKtBzJ,KAAAwgB,YAAuC,IAAI/W,EAAAA,aAK3CzJ,KAAAygB,eAA0C,IAAIhX,EAAAA,aAK9CzJ,KAAA0gB,iBAAuC,IAAIjX,EAAAA,aAK3CzJ,KAAA8J,UAAsC,IAAIL,EAAAA,aAK1CzJ,KAAA4J,KAAiC,IAAIH,EAAAA,aAKrCzJ,KAAA6J,QAAoC,IAAIJ,EAAAA,aAKxCzJ,KAAAkK,UAAsC,IAAIT,EAAAA,aAK1CzJ,KAAAiK,SAAqC,IAAIR,EAAAA,aAGnBzJ,KAAAmT,WAAuC,IAAIwN,EAAAA,UAEnE3gB,KAAA4gB,sBAAuB,EAEvB5gB,KAAAsc,yBAA2C,GAEhCtc,KAAA6gB,mBAAsD,IAAIC,EAAAA,cAAgC,GAExD9gB,KAAK6G,KAAOuZ,KAAYtZ,iBAuJ/E,SAlRauZ,EA8HXA,EAAA9e,UAAAwf,mBAAA,WAAA,IAAA3f,EAAApB,KACEA,KAAKghB,yBACLhhB,KAAKmT,WAAWlM,QAAQmE,UAAU,WAAM,OAAAhK,EAAK4f,4BAGvCX,EAAA9e,UAAAyf,uBAAR,WAAA,IAAA5f,EAAApB,KACE,GAAIA,KAAKmT,WAAWnW,OAAS,EAC3B,MAAM,IAAIikB,MAAM,0CAElBjhB,KAAKmT,WAAWlI,QAAQ,SAAA8F,GACtBA,EAAOyC,WAAapS,KAKxBif,EAAA9e,UAAAyF,YAAA,SAAYC,GAOV,GAN6B,iBAAlBjH,KAAKgI,WACdhI,KAAKgI,SAAWkZ,OAAOlhB,KAAKgI,WAEA,iBAAnBhI,KAAKkI,YACdlI,KAAKkI,UAAYgZ,OAAOlhB,KAAKkI,YAEF,iBAAlBlI,KAAKgI,UAAmD,iBAAnBhI,KAAKkI,UAArD,CAGA,IAAKlI,KAAK4gB,qBAKR,OAJA5gB,KAAKgT,eAAeP,UAAUzS,MAC9BA,KAAKmhB,0BACLnhB,KAAK4gB,sBAAuB,OAC5B5gB,KAAKmN,sBAGHlG,EAAkB,UAAKA,EAAmB,aAC5CjH,KAAKgT,eAAehC,qBAAqBhR,MACzCA,KAAKmhB,2BAEHla,EAAe,OACjBjH,KAAKgT,eAAe9B,YAAYlR,MAE9BiH,EAAe,OACjBjH,KAAKgT,eAAe3B,YAAYrR,MAE9BiH,EAAmB,WACrBjH,KAAKgT,eAAezB,gBAAgBvR,MAElCiH,EAAiB,SACnBjH,KAAKgT,eAAexB,WAAWxR,MAE7BiH,EAAiB,SACnBjH,KAAKgT,eAAerB,cAAc3R,MAEhCiH,EAAiB,SACnBjH,KAAKgT,eAAelB,cAAc9R,MAEhCiH,EAAgB,QAClBjH,KAAKgT,eAAejB,aAAa/R,MAE/BiH,EAAmB,WACrBjH,KAAKgT,eAAef,gBAAgBjS,MAElCiH,EAAmB,WACrBjH,KAAKgT,eAAeb,gBAAgBnS,QAKxCqgB,EAAA9e,UAAAyO,qBAAA,WACE,OAAOhQ,KAAK6gB,mBAAmBO,gBAGvBf,EAAA9e,UAAA4f,wBAAV,WACEnhB,KAAK6gB,mBAAmBpiB,KAAK,CAAEwF,OAAQ,CAAE8D,IAAK/H,KAAKgI,SAAUC,IAAKjI,KAAKkI,cAGjEmY,EAAA9e,UAAA4L,mBAAR,WAAA,IAAA/L,EAAApB,KACQqhB,EAAKrhB,KAAKgT,eAAe5J,sBAAsB,QAASpJ,MAAMoL,UAAU,WACxEhK,EAAKkf,gBACPlf,EAAK+R,WAAWlI,QAAQ,SAAAkI,GAAc,OAAAA,EAAWG,SAEnDlS,EAAKof,YAAYnV,KAAKjK,KAExBpB,KAAKsc,yBAAyB/b,KAAK8gB,GAEnC,IAAMC,EAAMthB,KAAKgT,eAAe5J,sBAAsB,WAAYpJ,MAAMoL,UAAU,WAChFhK,EAAKqf,eAAepV,KAAK,QAE3BrL,KAAKsc,yBAAyB/b,KAAK+gB,GAEnC,IAAMC,EAAKvhB,KAAKgT,eAAe5J,sBAAsB,aAAcpJ,MAAMoL,UAAU,WACjFhK,EAAKsf,iBAAiBrV,KAAK,QAE7BrL,KAAKsc,yBAAyB/b,KAAKghB,GAEnC,IAAMC,EACJxhB,KAAKgT,eAAe5J,sBAA2C,YAAapJ,MACzEoL,UAAU,SAAC1M,GACV0C,EAAK0I,UAAUuB,KAAK,CAAEC,OAAQ,CAAEvD,IAAKrJ,EAAEuF,OAAO8D,MAAOE,IAAKvJ,EAAEuF,OAAOgE,WAEzEjI,KAAKsc,yBAAyB/b,KAAKihB,GAEnC,IAAMvlB,EACJ+D,KAAKgT,eAAe5J,sBAA2C,OAAQpJ,MACpEoL,UAAU,SAAC1M,GACV0C,EAAKwI,KAAKyB,KAAK,CAAEC,OAAQ,CAAEvD,IAAKrJ,EAAEuF,OAAO8D,MAAOE,IAAKvJ,EAAEuF,OAAOgE,WAEpEjI,KAAKsc,yBAAyB/b,KAAKtE,GAEnC,IAAMwlB,EACJzhB,KAAKgT,eAAe5J,sBAA2C,UAAWpJ,MACvEoL,UAAU,SAAC1M,GACV0C,EAAKyI,QAAQwB,KAAK,CAAEC,OAAQ,CAAEvD,IAAKrJ,EAAEuF,OAAO8D,MAAOE,IAAKvJ,EAAEuF,OAAOgE,WAEvEjI,KAAKsc,yBAAyB/b,KAAKkhB,GAEnC,IAAMC,EACJ1hB,KAAKgT,eAAe5J,sBAA2C,YAAapJ,MACzEoL,UAAU,SAAC1M,GACV0C,EAAK8I,UAAUmB,KAAK,CAAEC,OAAQ,CAAEvD,IAAKrJ,EAAEuF,OAAO8D,MAAOE,IAAKvJ,EAAEuF,OAAOgE,WAEzEjI,KAAKsc,yBAAyB/b,KAAKmhB,GAEnC,IAAMC,EACJ3hB,KAAKgT,eAAe5J,sBAA2C,WAAYpJ,MACxEoL,UAAU,SAAC1M,GACV0C,EAAK6I,SAASoB,KAAK,CAAEC,OAAQ,CAAEvD,IAAKrJ,EAAEuF,OAAO8D,MAAOE,IAAKvJ,EAAEuF,OAAOgE,WAExEjI,KAAKsc,yBAAyB/b,KAAKohB,GAEnC,IAAMC,EACJ5hB,KAAKgT,eAAe5J,sBAA4B,oBAAqBpJ,MAClEoL,UAAU,WACThK,EAAKmf,gBAAgBlV,KAAKjK,EAAKoR,aAErCxS,KAAKsc,yBAAyB/b,KAAKqhB,IAIrCvB,EAAA9e,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3BwZ,EAAA9e,UAAAuF,SAAA,WAAqB,MAAO,aAAe9G,KAAK6G,IAAIC,YAGpDuZ,EAAA9e,UAAA6F,YAAA,WACEpH,KAAKgT,eAAelC,aAAa9Q,MAEjCA,KAAKsc,yBAAyBrR,QAAQ,SAACM,GAAM,OAAAA,EAAEC,iBA5QxCnE,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,6DAKQD,EAAAA,CAARC,EAAAA,6DAMyBD,EAAAA,CAAzBC,EAAAA,MAAM,4EAKED,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,sEAKQD,EAAAA,CAARC,EAAAA,+DAQQD,EAAAA,CAARC,EAAAA,8DAMyBD,EAAAA,CAAzBC,EAAAA,MAAM,4EAMED,EAAAA,CAARC,EAAAA,iEAOSD,EAAAA,CAAToE,EAAAA,wEAKSpE,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAKbpC,EAAAA,CAAToE,EAAAA,yBAAyBhC,EAAAA,oDAKhBpC,EAAAA,CAAToE,EAAAA,yBAA2BhC,EAAAA,sDAKlBpC,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAehC,EAAAA,0CAKNpC,EAAAA,CAAToE,EAAAA,yBAAkBhC,EAAAA,6CAKTpC,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAmBhC,EAAAA,8CAGYpC,EAAAA,CAA/Bwa,EAAAA,gBAAgB9N,mBAA2B4M,EAAAA,6CAnHjCN,EAASyB,EAAArlB,EAAA,CAXrB8K,EAAAA,UAAU,CACTC,SAAU,aACVuY,UAAW,CACT,CAAEgC,QAASlU,EAAmBmU,YAAaC,EAAAA,WAAW,WAAM,OAAAH,MAE9DI,OAAQ,CACN,WAAY,YAAa,QAAS,QAAS,6BAA8B,UACzE,iBAAkB,UAAW,UAAW,SAAU,aAEpDC,QAAS,CAAC,cAAe,YAAa,OAAQ,UAAW,YAAa,qCA6HlC3R,KA3HzB6P,GAAb,GCeA+B,EAAA,WAoJE,SAAAA,EAAoBC,GAAAriB,KAAAqiB,gBAAAA,EAhJXriB,KAAAmI,WAAY,EAOGnI,KAAAoI,WAAY,EAM3BpI,KAAAqI,UAAW,EAoBXrI,KAAAqX,UAAW,EAaXrX,KAAAsX,MAA8E,GA+B7EtX,KAAAsiB,UAA0C,IAAI7Y,EAAAA,aAK9CzJ,KAAAuiB,aAA6C,IAAI9Y,EAAAA,aAKjDzJ,KAAAwiB,SAAqC,IAAI/Y,EAAAA,aAKzCzJ,KAAAyiB,YAAwC,IAAIhZ,EAAAA,aAK5CzJ,KAAA0iB,cAA0C,IAAIjZ,EAAAA,aAK9CzJ,KAAA2iB,cAA8C,IAAIlZ,EAAAA,aAKlDzJ,KAAA4iB,cAA8C,IAAInZ,EAAAA,aAKlDzJ,KAAA6iB,aAA6C,IAAIpZ,EAAAA,aAKjDzJ,KAAA8iB,cAA8C,IAAIrZ,EAAAA,aAKlDzJ,KAAA+iB,YAA4C,IAAItZ,EAAAA,aAKhDzJ,KAAAgjB,eAA+C,IAAIvZ,EAAAA,aAKnDzJ,KAAAijB,gBAAkB,IAAIxZ,EAAAA,aASxBzJ,KAAAkjB,wBAAyB,EACzBljB,KAAAiN,eAAiC,SA8E3C,SAhOamV,EAuJXA,EAAA7gB,UAAAwf,mBAAA,WACO/gB,KAAKkjB,wBACRljB,KAAKmjB,SAITf,EAAA7gB,UAAAyF,YAAA,SAAYC,GACLjH,KAAKkjB,uBAKVljB,KAAKqiB,gBAAgB5K,kBAAkBzX,KAAMA,KAAKyV,sBAAsBxO,IAJtEjH,KAAKmjB,SAODf,EAAA7gB,UAAA4hB,MAAR,WACEnjB,KAAKqiB,gBAAgBnL,WAAWlX,MAChCA,KAAKkjB,wBAAyB,EAC9BljB,KAAKmN,sBAGCiV,EAAA7gB,UAAA4L,mBAAR,WAAA,IAAA/L,EAAApB,KACmB,CACf,CAAEoN,KAAM,QAASC,QAAS,SAACC,GAAuB,OAAAlM,EAAKkhB,UAAUjX,KAAKiC,KACtE,CAAEF,KAAM,WAAYC,QAAS,SAACC,GAAuB,OAAAlM,EAAKmhB,aAAalX,KAAKiC,KAC5E,CAAEF,KAAM,OAAQC,QAAS,SAACC,GAAmB,OAAAlM,EAAKohB,SAASnX,KAAKiC,KAChE,CAAEF,KAAM,UAAWC,QAAS,SAACC,GAAmB,OAAAlM,EAAKqhB,YAAYpX,KAAKiC,KACtE,CAAEF,KAAM,YAAaC,QAAS,SAACC,GAAmB,OAAAlM,EAAKshB,cAAcrX,KAAKiC,KAC1E,CAAEF,KAAM,YAAaC,QAAS,SAACC,GAAuB,OAAAlM,EAAKuhB,cAActX,KAAKiC,KAC9E,CAAEF,KAAM,YAAaC,QAAS,SAACC,GAAuB,OAAAlM,EAAKwhB,cAAcvX,KAAKiC,KAC9E,CAAEF,KAAM,WAAYC,QAAS,SAACC,GAAuB,OAAAlM,EAAKyhB,aAAaxX,KAAKiC,KAC5E,CAAEF,KAAM,YAAaC,QAAS,SAACC,GAAuB,OAAAlM,EAAK0hB,cAAczX,KAAKiC,KAC9E,CAAEF,KAAM,UAAWC,QAAS,SAACC,GAAuB,OAAAlM,EAAK2hB,YAAY1X,KAAKiC,KAC1E,CAAEF,KAAM,aAAcC,QAAS,SAACC,GAAuB,OAAAlM,EAAK4hB,eAAe3X,KAAKiC,MAEzErC,QAAQ,SAACsC,GAChB,IAAMC,EAAKpM,EAAKihB,gBAAgBjZ,sBAAsBmE,EAAIH,KAAMhM,GAAMgK,UAAUmC,EAAIF,SACpFjM,EAAK6L,eAAe1M,KAAKiN,KAG3BxN,KAAKqiB,gBAAgBxK,0BAA0B7X,MAC9ClB,KAAK,SAAAskB,GACJ,IAAM5V,EAAK4V,EAAOhY,UAAU,SAAAiY,GAAa,OAAAjiB,EAAK6hB,gBAAgB5X,KAAKgY,KACnEjiB,EAAK6L,eAAe1M,KAAKiN,MAIrB4U,EAAA7gB,UAAAkU,sBAAR,SAA8BxO,GAC5B,OAAO9K,OAAOwO,KAAK1D,GAChB2D,OAAO,SAAAC,GAAK,OAAqD,IAArDyY,EAAWC,0BAA0BvY,QAAQH,KACzD+K,OAAO,SAACrI,EAAU1C,GAEjB,OADA0C,EAAI1C,GAAK5D,EAAQ4D,GAAG3D,aACbqG,GACN,KAIP6U,EAAA7gB,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3Bub,EAAA7gB,UAAA6F,YAAA,WACEpH,KAAKqiB,gBAAgB3K,cAAc1X,MAEnCA,KAAKiN,eAAehC,QAAQ,SAACM,GAAM,OAAAA,EAAEC,iBAGvC4W,EAAA7gB,UAAAoW,QAAA,WACE,OAAO3X,KAAKqiB,gBAAgB1K,QAAQ3X,OAGtCoiB,EAAA7gB,UAAAqW,SAAA,WACE,OAAO5X,KAAKqiB,gBAAgBzK,SAAS5X,OApFxBoiB,EAAAmB,0BAA2C,CACxD,YAAa,YAAa,WAAY,YAAa,cAAe,WAAY,OAAQ,MACtF,QAAS,cAAe,gBAAiB,eAAgB,UAAW,SAAU,YAC9E,WAAY,WAzILlc,EAAAA,CAARC,EAAAA,iEAOuBD,EAAAA,CAAvBC,EAAAA,MAAM,0EAMED,EAAAA,CAARC,EAAAA,gEAMQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,mEASQD,EAAAA,CAARC,EAAAA,gEAaQD,EAAAA,CAARC,EAAAA,wBAAehL,oCAMP+K,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,qEAKQD,EAAAA,CAARC,EAAAA,oEAKQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,8DAKSD,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAAmBhC,EAAAA,8CAKVpC,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAKbpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAKbpC,EAAAA,CAAToE,EAAAA,yBAAyBhC,EAAAA,oDAKhBpC,EAAAA,CAAToE,EAAAA,wEAxIU2W,EAAUkB,EAAA7mB,EAAA,CAHtB8K,EAAAA,UAAU,CACTC,SAAU,uCAsJ2BwP,KApJ1BoL,GAAb,GCtCAoB,EAAA,WAAA,SAAAA,KAgIA,OALEA,EAAAjiB,UAAAwF,SAAA,WACE,GAAiB,MAAb/G,KAAKmX,KACP,MAAM,IAAI8J,MAAM,mCAnHX5Z,EAAAA,CAARC,EAAAA,sEAUQD,EAAAA,CAARC,EAAAA,8DAUQD,EAAAA,CAARC,EAAAA,8DAWQD,EAAAA,CAARC,EAAAA,+DAWQD,EAAAA,CAARC,EAAAA,+DASQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,mEASQD,EAAAA,CAARC,EAAAA,4DAWQD,EAAAA,CAARC,EAAAA,gEAUQD,EAAAA,CAARC,EAAAA,6DASQD,EAAAA,CAARC,EAAAA,mEAQQD,EAAAA,CAARC,EAAAA,qEAQQD,EAAAA,CAARC,EAAAA,oEAzHUkc,EAAe/mB,EAAA,CAD3B8K,EAAAA,UAAU,CAACC,SAAU,oCACTgc,GAAb,GCLAC,EAAA,WAgBE,SAAAA,IAFUzjB,KAAA0jB,gBAA+C,IAAIja,EAAAA,mBAqB/D,SAnCaga,EAkBXA,EAAAliB,UAAAyF,YAAA,SAAYC,GACV,GAAIA,EAAkB,UAAKA,EAAmB,UAAG,CAC/C,IAAM0L,EAA0B,CAC9B5K,IAAKd,EAAkB,SAAIA,EAAkB,SAAEC,aAAelH,KAAKgI,SACnEC,IAAKhB,EAAmB,UAAIA,EAAmB,UAAEC,aAAelH,KAAKkI,WAEvElI,KAAK0jB,gBAAgBrY,KAAKsH,KAK9B8Q,EAAAliB,UAAAyO,qBAAA,WACE,OAAOhQ,KAAK0jB,gBAAgBrV,KAC1B0J,EAAAA,UAAU,CAAChQ,IAAK/H,KAAKgI,SAAUC,IAAKjI,KAAKkI,YACzCrG,EAAAA,IAAI,SAAA8Q,GAAY,MAAA,CAAE1O,OAAQ0O,OA5BrBtL,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,iEAKSD,EAAAA,CAAToE,EAAAA,yBAA0BhC,EAAAA,qDAdhBga,EAAgBE,EAAAlnB,EAAA,CAN5B8K,EAAAA,UAAU,CACTC,SAAU,qBACVuY,UAAW,CACT,CAACgC,QAASlU,EAAmBmU,YAAaC,EAAAA,WAAW,WAAM,OAAA0B,mCAGlDF,GAAb,GCRIG,EAAa,EA+BjBC,EAAA,WAgIE,SAAAA,EAAoBC,GAAA9jB,KAAA8jB,iBAAAA,EA5HX9jB,KAAAmI,WAAY,EAOOnI,KAAAoI,WAAY,EAM/BpI,KAAAqI,UAAW,EAQXrI,KAAAqX,UAAW,EAoBXrX,KAAA6D,SAAU,EAUT7D,KAAA+jB,UAA0C,IAAIta,EAAAA,aAK9CzJ,KAAAgkB,aAA6C,IAAIva,EAAAA,aAKjDzJ,KAAAikB,SAAqC,IAAIxa,EAAAA,aAKzCzJ,KAAAkkB,YAAwC,IAAIza,EAAAA,aAK5CzJ,KAAAmkB,cAA0C,IAAI1a,EAAAA,aAK9CzJ,KAAAokB,cAA8C,IAAI3a,EAAAA,aAKlDzJ,KAAAqkB,cAA8C,IAAI5a,EAAAA,aAKlDzJ,KAAAskB,aAA6C,IAAI7a,EAAAA,aAKjDzJ,KAAAukB,cAA8C,IAAI9a,EAAAA,aAKlDzJ,KAAAwkB,YAA4C,IAAI/a,EAAAA,aAKhDzJ,KAAAykB,eAA+C,IAAIhb,EAAAA,aAKnDzJ,KAAA0kB,eAAiB,IAAIjb,EAAAA,aAevBzJ,KAAA2kB,yBAA0B,EAC1B3kB,KAAAiN,eAAiC,GAEgBjN,KAAK6G,KAAO+c,KAAc9c,iBA8FrF,SA9Na+c,EAmIXA,EAAAtiB,UAAAwf,mBAAA,WAAA,IAAA3f,EAAApB,KACMA,KAAK4kB,OAAO5nB,QACdgD,KAAK4kB,OAAO3Z,QAAQ,SAAC4N,GACnB,IAAMtN,EAAIsN,EAAM6K,gBAAgBtY,UAC5B,WAAQhK,EAAK0iB,iBAAiB7J,qBAAqB7Y,KACvDA,EAAK6L,eAAe1M,KAAKgL,KAGxBvL,KAAK2kB,yBACR3kB,KAAKmjB,QAEP,IAAM0B,EAAW7kB,KAAK4kB,OAAO3d,QAAQmE,UAAU,WAAM,OAAAhK,EAAK0iB,iBAAiB7J,qBAAqB7Y,KAChGpB,KAAKiN,eAAe1M,KAAKskB,GACzB7kB,KAAK8jB,iBAAiB7J,qBAAqBja,MAE3C,IAAM8kB,EAAU9kB,KAAK+kB,cAAc9d,QAAQmE,UAAU,WAAM,OAAAhK,EAAK0iB,iBAAiB3J,oBAAoB/Y,KACrGpB,KAAKiN,eAAe1M,KAAKukB,IAG3BjB,EAAAtiB,UAAAyF,YAAA,SAAYC,GACV,GAAKjH,KAAK2kB,wBAAV,CAKA,IAAIziB,EAAqC,GACtB/F,OAAOwO,KAAK1D,GAAS2D,OACpC,SAAAC,GAAK,OAAuD,IAAvDma,EAAYC,2BAA2Bja,QAAQH,KAC7CI,QAAQ,SAAAJ,GAAK,OAAA3I,EAAQ2I,GAAK5D,EAAQ4D,GAAG3D,eAChDlH,KAAK8jB,iBAAiB1J,mBAAmBpa,KAAMkC,QAR7ClC,KAAKmjB,SAWTU,EAAAtiB,UAAAoW,QAAA,WACE,OAAO3X,KAAK8jB,iBAAiBnM,QAAQ3X,OAG/B6jB,EAAAtiB,UAAA4hB,MAAR,WACEnjB,KAAK8jB,iBAAiB/J,YAAY/Z,MAClCA,KAAK2kB,yBAA0B,EAC/B3kB,KAAKmN,sBAGC0W,EAAAtiB,UAAA4L,mBAAR,WAAA,IAAA/L,EAAApB,KACmB,CACf,CAACoN,KAAM,QAASC,QAAS,SAACC,GAAuB,OAAAlM,EAAK2iB,UAAU1Y,KAAKiC,KACrE,CAACF,KAAM,WAAYC,QAAS,SAACC,GAAuB,OAAAlM,EAAK4iB,aAAa3Y,KAAKiC,KAC3E,CAACF,KAAM,OAAQC,QAAS,SAACC,GAAmB,OAAAlM,EAAK6iB,SAAS5Y,KAAKiC,KAC/D,CAACF,KAAM,UAAWC,QAAS,SAACC,GAAmB,OAAAlM,EAAK8iB,YAAY7Y,KAAKiC,KACrE,CAACF,KAAM,YAAaC,QAAS,SAACC,GAAmB,OAAAlM,EAAK+iB,cAAc9Y,KAAKiC,KACzE,CAACF,KAAM,YAAaC,QAAS,SAACC,GAAuB,OAAAlM,EAAKgjB,cAAc/Y,KAAKiC,KAC7E,CAACF,KAAM,YAAaC,QAAS,SAACC,GAAuB,OAAAlM,EAAKijB,cAAchZ,KAAKiC,KAC7E,CAACF,KAAM,WAAYC,QAAS,SAACC,GAAuB,OAAAlM,EAAKkjB,aAAajZ,KAAKiC,KAC3E,CAACF,KAAM,YAAaC,QAAS,SAACC,GAAuB,OAAAlM,EAAKmjB,cAAclZ,KAAKiC,KAC7E,CAACF,KAAM,UAAWC,QAAS,SAACC,GAAuB,OAAAlM,EAAKojB,YAAYnZ,KAAKiC,KACzE,CAACF,KAAM,aAAcC,QAAS,SAACC,GAAuB,OAAAlM,EAAKqjB,eAAepZ,KAAKiC,MAExErC,QAAQ,SAACsC,GAChB,IAAMC,EAAKpM,EAAK0iB,iBAAiB1a,sBAAsBmE,EAAIH,KAAMhM,GAAMgK,UAAUmC,EAAIF,SACrFjM,EAAK6L,eAAe1M,KAAKiN,KAG3BxN,KAAK8jB,iBAAiBjM,0BAA0B7X,MAAMlB,KAAK,SAAComB,GAC1D,IAAM1X,EAAK0X,EAAI9Z,UAAU,SAAAiY,GAAa,OAAAjiB,EAAKsjB,eAAerZ,KAAKgY,KAC/DjiB,EAAK6L,eAAe1M,KAAKiN,MAK7BqW,EAAAtiB,UAAAqX,WAAA,WACE,OAAI5Y,KAAK4kB,OACA5kB,KAAK4kB,OAAOO,UAEd,IAGTtB,EAAAtiB,UAAA2X,UAAA,WACE,OAAIlZ,KAAK+kB,cACA/kB,KAAK+kB,cAAcI,UAErB,IAITtB,EAAAtiB,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3Bgd,EAAAtiB,UAAA6F,YAAA,WACEpH,KAAK8jB,iBAAiBzJ,eAAera,MAErCA,KAAKiN,eAAehC,QAAQ,SAACM,GAAM,OAAAA,EAAEC,iBArGxBqY,EAAAoB,2BAA4C,CACzD,YAAa,WAAY,UAAW,WAAY,cAAe,gBAAiB,eAChF,UArHO5d,EAAAA,CAARC,EAAAA,iEAO2BD,EAAAA,CAA3BC,EAAAA,MAAM,8EAMED,EAAAA,CAARC,EAAAA,gEAQQD,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,qEAKQD,EAAAA,CAARC,EAAAA,oEAKQD,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,8DAKSD,EAAAA,CAAToE,EAAAA,yBAAoBhC,EAAAA,+CAKXpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAAmBhC,EAAAA,8CAKVpC,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAKbpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAuBhC,EAAAA,kDAKdpC,EAAAA,CAAToE,EAAAA,yBAAwBhC,EAAAA,mDAKfpC,EAAAA,CAAToE,EAAAA,yBAAsBhC,EAAAA,iDAKbpC,EAAAA,CAAToE,EAAAA,yBAAyBhC,EAAAA,oDAKhBpC,EAAAA,CAAToE,EAAAA,uEAKkCpE,EAAAA,CAAlCwa,EAAAA,gBAAgB4B,mBAA0B9C,EAAAA,yCAETtZ,EAAAA,CAAjCwa,EAAAA,gBAAgB2B,mBAAgC7C,EAAAA,gDArHtCkD,EAAWmB,EAAAvoB,EAAA,CAHvB8K,EAAAA,UAAU,CACTC,SAAU,wCAkI4BiR,KAhI3BoL,GAAb,gBCoJE,SAAAuB,EAAoBze,GAAA3G,KAAA2G,SAAAA,EA7IX3G,KAAAmI,WAAY,EAMQnI,KAAAoI,WAAY,EAMhCpI,KAAAqI,UAAW,EA0BXrI,KAAA0C,eAAkD,SAKlD1C,KAAA2I,aAAe,EAKf3I,KAAA6D,SAAU,EAWnB7D,KAAA0c,aAAkD,IAAIjT,EAAAA,aAQtDzJ,KAAAqlB,eAA2C,IAAI5b,EAAAA,aAM/CzJ,KAAAslB,kBAA8C,IAAI7b,EAAAA,aAKxCzJ,KAAA4J,KAAiC,IAAIH,EAAAA,aAKrCzJ,KAAA6J,QAAoC,IAAIJ,EAAAA,aAMlDzJ,KAAA8J,UAAsC,IAAIL,EAAAA,aAM1CzJ,KAAA+J,UAAsC,IAAIN,EAAAA,aAM1CzJ,KAAAgK,UAAsC,IAAIP,EAAAA,aAKhCzJ,KAAAiK,SAAqC,IAAIR,EAAAA,aAMnDzJ,KAAAkK,UAAsC,IAAIT,EAAAA,aAKhCzJ,KAAAmK,QAAoC,IAAIV,EAAAA,aAMlDzJ,KAAAqK,WAAuC,IAAIZ,EAAAA,aAEnCzJ,KAAAulB,0BAA2B,EAc3BvlB,KAAAuK,oBAAsC,SA8GhD,SAjRa6a,EAwKXA,EAAA7jB,UAAAwF,SAAA,WACE/G,KAAK2G,SAAS+T,aAAa1a,MAC3BA,KAAKulB,0BAA2B,EAChCvlB,KAAKwK,2BAIP4a,EAAA7jB,UAAAyF,YAAA,SAAYC,GACLjH,KAAKulB,4BAIRte,EAAe,OACfA,EAAc,MACdA,EAAe,OACfA,EAAc,OAEdjH,KAAK2G,SAASsU,UAAUjb,MAEtBiH,EAAkB,UACpBjH,KAAK2G,SAASoC,YAAY/I,MAExBiH,EAAmB,WACrBjH,KAAK2G,SAASqC,aAAahJ,MAEzBiH,EAAiB,SACnBjH,KAAK2G,SAASsC,WAAWjJ,MAE3BA,KAAKwlB,+BAA+Bve,KAG9Bme,EAAA7jB,UAAAikB,+BAAR,SAAuCve,GAGrC,IAAI/E,EAAuC,GACvCwI,EAAavO,OAAOwO,KAAK1D,GAAS2D,OACpC,SAAAC,GAAK,OAAyC,IAAzC4a,EAAa1a,YAAYC,QAAQH,KAExCH,EAAWO,QAAQ,SAAAJ,GACjB3I,EAAQ2I,GAAK5D,EAAQ4D,GAAG3D,eAEtBwD,EAAW1N,OAAS,GACtBgD,KAAK2G,SAASxE,WAAWnC,KAAMkC,IAI3BkjB,EAAA7jB,UAAAiJ,wBAAR,WAAA,IAAApJ,EAAApB,KACMkL,EAAyC,IAAIlJ,IAIjDkJ,EAAOhF,IAAI,iBAAkBlG,KAAK0c,cAClCxR,EAAOhF,IAAI,QAASlG,KAAKqlB,gBACzBna,EAAOhF,IAAI,WAAYlG,KAAKslB,mBAC5Bpa,EAAOhF,IAAI,OAAQlG,KAAK4J,MACxBsB,EAAOhF,IAAI,UAAWlG,KAAK6J,SAC3BqB,EAAOhF,IAAI,YAAalG,KAAK8J,WAC7BoB,EAAOhF,IAAI,YAAalG,KAAK+J,WAC7BmB,EAAOhF,IAAI,YAAalG,KAAKgK,WAC7BkB,EAAOhF,IAAI,WAAYlG,KAAKiK,UAC5BiB,EAAOhF,IAAI,YAAalG,KAAKkK,WAC7BgB,EAAOhF,IAAI,UAAWlG,KAAKmK,SAC3Be,EAAOhF,IAAI,aAAclG,KAAKqK,YAE9Ba,EAAOD,QAAQ,SAACE,EAAc9G,GAC5BjD,EAAKmJ,oBAAoBhK,KACvBa,EAAKuF,SACFyC,sBAAqC/E,EAAWjD,GAChDgK,UAAU,SAAA7M,GACT,OAAQ8F,GACN,IAAK,iBACHjD,EAAKuF,SAAS5B,UAAU3D,GAAMtC,KAAK,SAAAgQ,GACjC,OAAA3D,EAAaE,KAAK,CAChBuP,MAAO9L,EAAO4W,eAAe3d,MAC7B8S,KAAM/L,EAAO4W,eAAezd,MAC5B6S,MAAOhM,EAAO6W,eAAe5d,MAC7BgT,KAAMjM,EAAO6W,eAAe1d,UAGhC,MACF,QACEkD,EAAaE,KAAK,CAChBC,OAAQ,CAAEvD,IAAKxJ,EAAM0F,OAAO8D,MAAOE,IAAK1J,EAAM0F,OAAOgE,gBASrEmd,EAAA7jB,UAAA6F,YAAA,WACEpH,KAAKuK,oBAAoBU,QAAQ,SAASM,GACxCA,EAAEC,gBAEJxL,KAAKuK,oBAAsB,KAC3BvK,KAAK2G,SAASqU,gBAAgBhb,OAMhColB,EAAA7jB,UAAAwD,UAAA,WACE,OAAO/E,KAAK2G,SAAS5B,UAAU/E,OAxHlBolB,EAAAra,YAAwB,CACrC,YACA,cACA,cACA,gBACA,iBACA,eACA,UACA,SACA,aA5JO1D,EAAAA,CAARC,EAAAA,6DAKQD,EAAAA,CAARC,EAAAA,4DAKQD,EAAAA,CAARC,EAAAA,6DAKQD,EAAAA,CAARC,EAAAA,4DAKQD,EAAAA,CAARC,EAAAA,iEAM4BD,EAAAA,CAA5BC,EAAAA,MAAM,+EAMED,EAAAA,CAARC,EAAAA,gEAKQD,EAAAA,CAARC,EAAAA,iEAKQD,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,mEAKQD,EAAAA,CAARC,EAAAA,qEAMQD,EAAAA,CAARC,EAAAA,sEAKQD,EAAAA,CAARC,EAAAA,oEAKQD,EAAAA,CAARC,EAAAA,+DAKQD,EAAAA,CAARC,EAAAA,8DAMDD,EAAAA,CADCoE,EAAAA,yBACahC,EAAAA,kDAQdpC,EAAAA,CADCoE,EAAAA,yBACehC,EAAAA,oDAMhBpC,EAAAA,CADCoE,EAAAA,yBACkBhC,EAAAA,uDAKTpC,EAAAA,CAAToE,EAAAA,yBAAehC,EAAAA,0CAKNpC,EAAAA,CAAToE,EAAAA,yBAAkBhC,EAAAA,6CAMnBpC,EAAAA,CADCoE,EAAAA,yBACUhC,EAAAA,+CAMXpC,EAAAA,CADCoE,EAAAA,yBACUhC,EAAAA,+CAMXpC,EAAAA,CADCoE,EAAAA,yBACUhC,EAAAA,+CAKDpC,EAAAA,CAAToE,EAAAA,yBAAmBhC,EAAAA,8CAMpBpC,EAAAA,CADCoE,EAAAA,yBACUhC,EAAAA,+CAKDpC,EAAAA,CAAToE,EAAAA,yBAAkBhC,EAAAA,6CAMnBpC,EAAAA,CADCoE,EAAAA,yBACWhC,EAAAA,gDAnJD2b,EAAYK,EAAAhpB,EAAA,CAHxB8K,EAAAA,UAAU,CACTC,SAAU,yCAuKoBgT,KArKnB4K,MCnBT3e,GAAU,EAUdmf,GAAA,WASI,SAAAA,EAAqBjf,GAAA3G,KAAA2G,SAAAA,EARb3G,KAAA4G,iBAAkB,EAClB5G,KAAA6G,KAAeJ,MAAWK,WAKzB9G,KAAA6D,SAAU,EAgCvB,OA5BI+hB,EAAArkB,UAAAwF,SAAA,WACQ/G,KAAK4G,kBAGT5G,KAAK2G,SAASX,gBAAgBhG,KAAM,CAAC6D,QAAS7D,KAAK6D,UACnD7D,KAAK4G,iBAAkB,IAG3Bgf,EAAArkB,UAAAyF,YAAA,SAAYC,GACHjH,KAAK4G,iBAGgB,MAAtBK,EAAiB,SACjBjH,KAAK2G,SAASH,sBAAsBxG,KAAM,CAAC6D,QAASoD,EAAiB,QAAEC,gBAK/E0e,EAAArkB,UAAA4F,GAAA,WAAe,OAAOnH,KAAK6G,KAG3B+e,EAAArkB,UAAAuF,SAAA,WAAqB,MAAO,mBAAmB9G,KAAK6G,IAAIC,YAGxD8e,EAAArkB,UAAA6F,YAAA,WACIpH,KAAK2G,SAASP,YAAYpG,OA7BrBqH,EAAAA,CAARC,EAAAA,+DAPQse,EAAenpB,EAAA,CAJ3B8K,EAAAA,UAAU,CACPC,SAAU,6CAYqB3B,KATtB+f,GAAb,IXqSA,SAAYpP,GACVA,EAAAA,EAAA,sBAAA,GAAA,wBACAA,EAAAA,EAAA,oBAAA,GAAA,sBACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,qBAAA,GAAA,uBACAA,EAAAA,EAAA,mBAAA,GAAA,qBALF,CAAYA,IAAAA,EAAU,MAiNVC,EAAAA,EAAAA,kBAAAA,EAAAA,gBAAe,KACzBA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,WAAA,GAAA,aACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,SAAA,GAAA,WACAA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,UAAA,GAAA,YACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,YAAA,IAAA,cACAA,EAAAA,EAAA,cAAA,IAAA,iBAGUC,EAAAA,EAAAA,YAAAA,EAAAA,UAAS,KAEnBA,EAAA,OAAA,GAAA,SAEAA,EAAAA,EAAA,QAAA,GAAA,UAEAA,EAAAA,EAAA,UAAA,GAAA,YAEAA,EAAAA,EAAA,QAAA,GAAA,UAiBF,SAAYC,GACVA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,eAAA,GAAA,iBAHF,CAAYA,IAAAA,EAAmB,MAkCnBC,EAAAA,EAAAA,oBAAAA,EAAAA,kBAAiB,KAC3BA,EAAA,QAAA,GAAA,WA0BUC,EAAAA,EAAAA,mBAAAA,EAAAA,iBAAgB,KAC1BA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,SA4CUC,EAAAA,EAAAA,uBAAAA,EAAAA,qBAAoB,KAC9B,YAAA,cACAA,EAAA,iBAAA,mBACAA,EAAA,mBAAA,qBACAA,EAAA,QAAA,WAsBUC,EAAAA,EAAAA,iBAAAA,EAAAA,eAAc,KACxB,MAAA,QACAA,EAAA,gBAAA,kBACAA,EAAA,GAAA,KACAA,EAAA,iBAAA,mBACAA,EAAA,eAAA,iBACAA,EAAA,cAAA,gBACAA,EAAA,aAAA,mBYlrBU8O,iBCMV,SAAAC,EAAY/X,GAAZ,IAAA3M,EAAApB,KACQ+lB,EAAuB,IAAIzhB,EAAAA,WAAW,SAAA0hB,GAC1CjY,EAAOnM,OAAO9C,KAAK,WAAM,OAAAknB,EAAWvnB,WAEnC4P,KACCxM,EAAAA,IAAI,WAAM,OAAAT,EAAK6kB,oBACfC,EAAAA,UAAU,IAAIpF,EAAAA,cAAc,KAGhCiF,EAAqBI,UAGrBnmB,KAAKomB,UAAYL,SAGnBD,EAAAvkB,UAAA8kB,QAAA,SAAQC,GAAR,IAAAllB,EAAApB,KACE,OAAOA,KAAKomB,UAAU/X,KACpBG,EAAAA,UAAU,SAAC+X,GAAa,OAAAnlB,EAAKolB,kBAAkBD,EAAUD,OAIrDR,EAAAvkB,UAAAilB,kBAAR,SAA0BD,EAAoBD,GAE5C,OAD0BG,EAAAA,aAAaF,EAASF,QACzCK,CAAkBJ,GAASjY,KAChCG,EAAAA,UAAU,SAAC8D,OAAAD,EAAA7R,EAAA8R,EAAA,GAACqU,EAAAtU,EAAA,GAASuU,EAAAvU,EAAA,GACnB,OAAIuU,IAAW7P,EAAAA,eAAe8P,GACrBC,EAAAA,GAAGH,GAGLI,EAAAA,WAAWH,OAKhBd,EAAAvkB,UAAA0kB,gBAAR,WACE,OAAO,IAAInkB,OAAOC,KAAKilB,8HAtCdlB,EAAWrpB,EAAA,CADvBuE,EAAAA,WAAW,CAAEimB,WAAY,gCAIJlmB,KAHT+kB,oBCPb,SAAAoB,KAEA,OADEA,EAAA3lB,UAAA4lB,gBAAA,WAAyB,OAAOC,QAClCF,mBAEA,SAAAG,KAEA,OADEA,EAAA9lB,UAAA+lB,kBAAA,WAA2B,OAAOC,UACpCF,KAEaG,GAAwC,CAACN,GAAWG,KFJrDxB,GAAAA,EAAAA,2BAAAA,EAAAA,yBAAwB,KAClCA,GAAA,KAAA,GAAA,OACAA,GAAAA,GAAA,MAAA,GAAA,QACAA,GAAAA,GAAA,KAAA,GAAA,OAOF,IAAa4B,GAAuB,IAAIC,EAAAA,eAA+C,4CAiEvFC,GAAA,SAAAC,GAQE,SAAAD,EAAsDE,EAAoBtU,EAActX,EAC5D6rB,QAD0B,IAAAD,IAAAA,EAAA,MAAtD,IAAAzmB,EAEEwmB,EAAAvnB,KAAAL,OAAOA,YADmBoB,EAAA0mB,SAAAA,EAJT1mB,EAAA2mB,WAAqB,yBACrB3mB,EAAA4mB,aAAuB,uBAKxC5mB,EAAK6mB,QAAUJ,GAAU,GACzBzmB,EAAK8mB,WAAa3U,EAClBnS,EAAK+mB,aAAelsB,IA6FxB,O7BpKO,SAAmBA,EAAGC,GAEzB,SAASksB,IAAOpoB,KAAKqoB,YAAcpsB,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEsF,UAAkB,OAANrF,EAAaC,OAAO+e,OAAOhf,IAAMksB,EAAG7mB,UAAYrF,EAAEqF,UAAW,IAAI6mB,G6BuD5CE,CAAAA,EAAAA,GAgBrCX,EAAApmB,UAAAK,KAAA,WACE,IAAMwlB,EAASpnB,KAAKkoB,WAAWf,kBAC/B,GAAIC,EAAOtlB,QAAUslB,EAAOtlB,OAAOC,KAEjC,OAAO5D,QAAQC,UAGjB,GAAI4B,KAAKuoB,sBACP,OAAOvoB,KAAKuoB,sBAId,IAAMC,EAAexoB,KAAKmoB,aAAab,oBAAoBmB,eAAezoB,KAAK+nB,YAC/E,GAAIS,EAEF,OADAxoB,KAAK0oB,4BAA4BF,GAC1BxoB,KAAKuoB,sBAGd,IAAMI,EAAS3oB,KAAKmoB,aAAab,oBAAoBsB,cAAc,UAQnE,OAPAD,EAAOE,KAAO,kBACdF,EAAOG,OAAQ,EACfH,EAAOI,OAAQ,EACfJ,EAAOxhB,GAAKnH,KAAK+nB,WACjBY,EAAOK,IAAMhpB,KAAKipB,cAAcjpB,KAAKgoB,cACrChoB,KAAK0oB,4BAA4BC,GACjC3oB,KAAKmoB,aAAab,oBAAoBroB,KAAKiqB,YAAYP,GAChD3oB,KAAKuoB,uBAGNZ,EAAApmB,UAAAmnB,4BAAR,SAAoCS,GAApC,IAAA/nB,EAAApB,KACEA,KAAKuoB,sBAAwB,IAAIpqB,QAAc,SAACC,EAAmBC,GAChE+C,EAAK8mB,WAAWf,kBAA0B/lB,EAAK4mB,cAAgB,WAC9D5pB,KAGF+qB,EAAWC,QAAU,SAACxoB,GACpBvC,EAAOuC,OAKH+mB,EAAApmB,UAAA0nB,cAAV,SAAwBjB,GACtB,IAEIqB,EAEJ,OAHKrpB,KAAKioB,SAAWjoB,KAAKioB,QAAQoB,UAAaxD,EAAAA,yBAAyByD,OAItE,KAAKzD,EAAAA,yBAAyB0D,KAC5BF,EAAW,GACX,MACF,KAAKxD,EAAAA,yBAAyB2D,KAC5BH,EAAW,QACX,MACF,KAAKxD,EAAAA,yBAAyByD,MAC5BD,EAAW,SAIf,IAAMI,EAAsBzpB,KAAKioB,QAAQwB,aAAe,kCAClDC,EAAuD,CAC3DxpB,EAAGF,KAAKioB,QAAQ0B,YAAc,YAC9BC,SAAU5B,EACVprB,IAAKoD,KAAKioB,QAAQ4B,OAClBC,OAAQ9pB,KAAKioB,QAAQ8B,SACrBC,QAAShqB,KAAKioB,QAAQ+B,QACtBC,UAAWjqB,KAAKioB,QAAQgC,UACxBC,OAAQlqB,KAAKioB,QAAQiC,OACrBC,SAAUnqB,KAAKioB,QAAQkC,WAA+B,UAAlBnqB,KAAK8nB,SAAuB9nB,KAAK8nB,SAAW,OAqBlF,OAAUuB,EAAQ,KAAKI,EAAW,IAnBXttB,OAAOwO,KAAK+e,GACP9e,OAAO,SAACC,GAAc,OAAkB,MAAlB6e,EAAY7e,KAClCD,OAAO,SAACC,GAEP,OAAQvO,MAAM8tB,QAAQV,EAAY7e,KAC7BvO,MAAM8tB,QAAQV,EAAY7e,KAAO6e,EAAY7e,GAAG7N,OAAS,IAE/D6E,IAAI,SAACgJ,GAEJ,IAAIxN,EAAIqsB,EAAY7e,GACpB,OAAIvO,MAAM8tB,QAAQ/sB,GACT,CAACT,IAAKiO,EAAGtM,MAAOlB,EAAEgtB,KAAK,MAEzB,CAACztB,IAAKiO,EAAGtM,MAAOmrB,EAAY7e,MAEpChJ,IAAI,SAACyoB,GACJ,OAAUA,EAAM1tB,IAAG,IAAI0tB,EAAM/rB,QAE9B8rB,KAAK,MAvGxB1C,EAAiBlrB,EAAA,CAD7BuE,EAAAA,aAScsP,EAAAA,EAAAia,EAAAA,YAAYja,EAAAA,EAAA4P,EAAAA,OAAOuH,KAC9BnX,EAAAA,EAAA4P,EAAAA,OAAOsK,EAAAA,0CADoEtD,GAAcG,GAAWoD,UAR3F9C,GAAb,CAAuC5mB,GG1EvC2pB,GAAA,WAAA,SAAAA,KAQA,OAPEA,EAAAnpB,UAAAK,KAAA,WACE,IAAMwlB,OAAetlB,SAAYslB,OAAetlB,OAAOC,KACrD,MAAM,IAAIkf,MACN,kFAEN,OAAO9iB,QAAQC,WAEnBssB,EARA,GCkBA,SAAgBC,KACd,MAAO,CACLjkB,EACA6C,EACAyD,EACAwC,EACAuE,EACAuB,EACA6F,EACAkF,EACA+B,EACAyB,EACAL,EACAC,EACA2B,EACAQ,IASJ,IAAAgF,GAAA,WAAA,SAAAA,WAaA,SAbaA,EAIJA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUC,EACVjL,UAASlf,EACJ2mB,GAAyB,CAAE,CAACzF,QAAShhB,EAAekqB,SAAUtD,IACjE,CAAC5F,QAAS0F,GAAsByD,SAAUJ,OATrCF,EAAaI,EAAAvuB,EAAA,CADzB0uB,EAAAA,SAAS,CAACC,aAAcT,KAAkBU,QAASV,QACvCC,GAAb","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport abstract class MapsAPILoader {\n  abstract load(): Promise<void>;\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport * as mapTypes from './google-maps-types';\nimport { Polyline, PolylineOptions } from './google-maps-types';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\n// todo: add types for this\ndeclare var google: any;\n\n/**\n * Wrapper class that handles the communication with the Google Maps Javascript\n * API v3\n */\n@Injectable()\nexport class GoogleMapsAPIWrapper {\n  private _map: Promise<mapTypes.GoogleMap>;\n  private _mapResolver: (value?: mapTypes.GoogleMap) => void;\n\n  constructor(private _loader: MapsAPILoader, private _zone: NgZone) {\n    this._map =\n        new Promise<mapTypes.GoogleMap>((resolve: () => void) => { this._mapResolver = resolve; });\n  }\n\n  createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._loader.load().then(() => {\n        const map = new google.maps.Map(el, mapOptions);\n        this._mapResolver(map as mapTypes.GoogleMap);\n        return;\n      });\n    });\n  }\n\n  setMapOptions(options: mapTypes.MapOptions) {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((m: mapTypes.GoogleMap) => { m.setOptions(options); });\n    });\n  }\n\n  /**\n   * Creates a google map marker with the map context\n   */\n  createMarker(options: mapTypes.MarkerOptions = {} as mapTypes.MarkerOptions, addToMap: boolean = true):\n      Promise<mapTypes.Marker> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        if (addToMap) {\n          options.map = map;\n        }\n        return new google.maps.Marker(options);\n      });\n    });\n  }\n\n  createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(() => { return new google.maps.InfoWindow(options); });\n    });\n  }\n\n  /**\n   * Creates a google.map.Circle for the current map.\n   */\n  createCircle(options: mapTypes.CircleOptions): Promise<mapTypes.Circle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        if (typeof options.strokePosition === 'string') {\n          options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n        }\n        options.map = map;\n        return new google.maps.Circle(options);\n      });\n    });\n  }\n\n  /**\n   * Creates a google.map.Rectangle for the current map.\n   */\n  createRectangle(options: mapTypes.RectangleOptions): Promise<mapTypes.Rectangle> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        options.map = map;\n        return new google.maps.Rectangle(options);\n      });\n    });\n  }\n\n  createPolyline(options: PolylineOptions): Promise<Polyline> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\n        let line = new google.maps.Polyline(options);\n        line.setMap(map);\n        return line;\n      });\n    });\n  }\n\n  createPolygon(options: mapTypes.PolygonOptions): Promise<mapTypes.Polygon> {\n    return this._zone.runOutsideAngular(() => {\n      return this.getNativeMap().then((map: mapTypes.GoogleMap) => {\n        let polygon = new google.maps.Polygon(options);\n        polygon.setMap(map);\n        return polygon;\n      });\n    });\n  }\n\n  /**\n   * Creates a new google.map.Data layer for the current map\n   */\n  createDataLayer(options?: mapTypes.DataOptions): Promise<mapTypes.Data> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then(m => {\n        let data = new google.maps.Data(options);\n        data.setMap(m);\n        return data;\n      });\n    });\n  }\n\n  /**\n   * Creates a TransitLayer instance for a map\n   * @param {TransitLayerOptions} options - used for setting layer options\n   * @returns {Promise<TransitLayer>} a new transit layer object\n   */\n  createTransitLayer(options: mapTypes.TransitLayerOptions): Promise<mapTypes.TransitLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        let newLayer: mapTypes.TransitLayer = new google.maps.TransitLayer();\n        newLayer.setMap(options.visible ? map : null);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Creates a BicyclingLayer instance for a map\n   * @param {BicyclingLayerOptions} options - used for setting layer options\n   * @returns {Promise<BicyclingLayer>} a new bicycling layer object\n   */\n  createBicyclingLayer(options: mapTypes.BicyclingLayerOptions): Promise<mapTypes.BicyclingLayer>{\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => {\n        let newLayer: mapTypes.BicyclingLayer = new google.maps.BicyclingLayer();\n        newLayer.setMap(options.visible ? map : null);\n        return newLayer;\n      });\n    });\n  }\n\n  /**\n   * Determines if given coordinates are insite a Polygon path.\n   */\n  containsLocation(latLng: mapTypes.LatLngLiteral, polygon: mapTypes.Polygon): Promise<boolean> {\n    return google.maps.geometry.poly.containsLocation(latLng, polygon);\n  }\n\n  subscribeToMapEvent<E>(eventName: string): Observable<E> {\n    return new Observable((observer: Observer<E>) => {\n      this._map.then((m: mapTypes.GoogleMap) => {\n        m.addListener(eventName, (arg: E) => { this._zone.run(() => observer.next(arg)); });\n      });\n    });\n  }\n\n  clearInstanceListeners() {\n    return this._zone.runOutsideAngular(() => {\n      this._map.then((map: mapTypes.GoogleMap) => {\n        google.maps.event.clearInstanceListeners(map);\n      });\n    });\n  }\n\n  setCenter(latLng: mapTypes.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.setCenter(latLng));\n    });\n  }\n\n  getZoom(): Promise<number> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getZoom());\n    });\n  }\n\n  getBounds(): Promise<mapTypes.LatLngBounds> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getBounds());\n    });\n  }\n\n  getMapTypeId(): Promise<mapTypes.MapTypeId> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getMapTypeId());\n    });\n  }\n\n  setZoom(zoom: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.setZoom(zoom));\n    });\n  }\n\n  getCenter(): Promise<mapTypes.LatLng> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map: mapTypes.GoogleMap) => map.getCenter());\n    });\n  }\n\n  panTo(latLng: mapTypes.LatLng | mapTypes.LatLngLiteral): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panTo(latLng));\n    });\n  }\n\n  panBy(x: number, y: number): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panBy(x, y));\n    });\n  }\n\n  fitBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.fitBounds(latLng, padding));\n    });\n  }\n\n  panToBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void> {\n    return this._zone.runOutsideAngular(() => {\n      return this._map.then((map) => map.panToBounds(latLng, padding));\n    });\n  }\n\n  /**\n   * Returns the native Google Maps Map instance. Be careful when using this instance directly.\n   */\n  getNativeMap(): Promise<mapTypes.GoogleMap> { return this._map; }\n\n  /**\n   * Triggers the given event name on the map instance.\n   */\n  triggerMapEvent(eventName: string): Promise<void> {\n    return this._map.then((m) => google.maps.event.trigger(m, eventName));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { AgmBicyclingLayer } from '../../directives/bicycling-layer';\nimport { AgmTransitLayer } from '../../directives/transit-layer';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { BicyclingLayer, BicyclingLayerOptions, GoogleMap, TransitLayer, TransitLayerOptions } from '../google-maps-types';\n\n/**\n * This class manages Transit and Bicycling Layers for a Google Map instance.\n */\n\n@Injectable()\nexport class LayerManager {\n    private _layers: Map<AgmTransitLayer | AgmBicyclingLayer, Promise<TransitLayer | BicyclingLayer>> =\n        new Map<AgmTransitLayer | AgmBicyclingLayer, Promise<TransitLayer | BicyclingLayer>>();\n\n    constructor(private _wrapper: GoogleMapsAPIWrapper) {}\n\n    /**\n     * Adds a transit layer to a map instance.\n     * @param {AgmTransitLayer} layer - a TransitLayer object\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\n     * @returns void\n     */\n    addTransitLayer(layer: AgmTransitLayer, options: TransitLayerOptions): void {\n        const newLayer = this._wrapper.createTransitLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n\n    /**\n     * Adds a bicycling layer to a map instance.\n     * @param {AgmBicyclingLayer} layer - a bicycling layer object\n     * @param {BicyclingLayerOptions} options - BicyclingLayer options\n     * @returns void\n     */\n    addBicyclingLayer(layer: AgmBicyclingLayer, options: BicyclingLayerOptions): void {\n        const newLayer = this._wrapper.createBicyclingLayer(options);\n        this._layers.set(layer, newLayer);\n    }\n\n    /**\n     * Deletes a map layer\n     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\n     * @returns  Promise<void>\n     */\n    deleteLayer(layer: AgmTransitLayer | AgmBicyclingLayer): Promise<void> {\n        return this._layers.get(layer).then(currentLayer => {\n            currentLayer.setMap(null);\n            this._layers.delete(layer);\n        });\n    }\n\n    /**\n     * Hide/Show a google map layer\n     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\n     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\n     * @returns Promise<void>\n     */\n    toggleLayerVisibility(layer: AgmTransitLayer | AgmBicyclingLayer, options: TransitLayerOptions | BicyclingLayerOptions): Promise<void> {\n        return this._layers.get(layer).then(currentLayer => {\n            if (!options.visible) {\n                currentLayer.setMap(null);\n                return;\n            } else {\n               return this._wrapper.getNativeMap().then( (map: GoogleMap) => {\n                   currentLayer.setMap(map);\n                });\n            }\n        });\n    }\n}\n","import { Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { LayerManager } from '../services/managers/layer-manager';\n\nlet layerId = 0;\n\n/*\n * This directive adds a bicycling layer to a google map instance\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\n * */\n@Directive({\n    selector: 'agm-bicycling-layer',\n})\n\nexport class AgmBicyclingLayer implements OnInit, OnChanges, OnDestroy{\n    private _addedToManager = false;\n    private _id: string = (layerId++).toString();\n\n    /**\n     * Hide/show bicycling layer\n     */\n    @Input() visible = true;\n\n    constructor( private _manager: LayerManager ) {}\n\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addBicyclingLayer(this, {visible: this.visible});\n        this._addedToManager = true;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, {visible: changes['visible'].currentValue});\n        }\n    }\n\n    /** @internal */\n    id(): string { return this._id; }\n\n    /** @internal */\n    toString(): string { return `AgmBicyclingLayer-${this._id.toString()}`; }\n\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmCircle } from '../../directives/circle';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport * as mapTypes from '../google-maps-types';\n\ndeclare var google: any;\n\n@Injectable()\nexport class CircleManager {\n  private _circles: Map<AgmCircle, Promise<mapTypes.Circle>> =\n      new Map<AgmCircle, Promise<mapTypes.Circle>>();\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addCircle(circle: AgmCircle) {\n    this._circles.set(circle, this._apiWrapper.createCircle({\n      center: {lat: circle.latitude, lng: circle.longitude},\n      clickable: circle.clickable,\n      draggable: circle.draggable,\n      editable: circle.editable,\n      fillColor: circle.fillColor,\n      fillOpacity: circle.fillOpacity,\n      radius: circle.radius,\n      strokeColor: circle.strokeColor,\n      strokeOpacity: circle.strokeOpacity,\n      strokePosition: circle.strokePosition,\n      strokeWeight: circle.strokeWeight,\n      visible: circle.visible,\n      zIndex: circle.zIndex,\n    }));\n  }\n\n  /**\n   * Removes the given circle from the map.\n   */\n  removeCircle(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => {\n      c.setMap(null);\n      this._circles.delete(circle);\n    });\n  }\n\n  setOptions(circle: AgmCircle, options: mapTypes.CircleOptions): Promise<void> {\n    return this._circles.get(circle).then((c) => {\n      if (typeof options.strokePosition === 'string') {\n        options.strokePosition = google.maps.StrokePosition[options.strokePosition];\n      }\n      c.setOptions(options);\n    });\n  }\n\n  getBounds(circle: AgmCircle): Promise<mapTypes.LatLngBounds> {\n    return this._circles.get(circle).then((c) => c.getBounds());\n  }\n\n  getCenter(circle: AgmCircle): Promise<mapTypes.LatLng> {\n    return this._circles.get(circle).then((c) => c.getCenter());\n  }\n\n  getRadius(circle: AgmCircle): Promise<number> {\n    return this._circles.get(circle).then((c) => c.getRadius());\n  }\n\n  setCenter(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then(\n        (c) => { return c.setCenter({lat: circle.latitude, lng: circle.longitude}); });\n  }\n\n  setEditable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setEditable(circle.editable); });\n  }\n\n  setDraggable(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setDraggable(circle.draggable); });\n  }\n\n  setVisible(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setVisible(circle.visible); });\n  }\n\n  setRadius(circle: AgmCircle): Promise<void> {\n    return this._circles.get(circle).then((c) => { return c.setRadius(circle.radius); });\n  }\n\n  getNativeCircle(circle: AgmCircle): Promise<mapTypes.Circle> {\n    return this._circles.get(circle);\n  }\n\n  createEventObservable<T>(eventName: string, circle: AgmCircle): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      let listener: mapTypes.MapsEventListener = null;\n      this._circles.get(circle).then((c) => {\n        listener = c.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { MouseEvent } from '../map-types';\nimport { LatLng, LatLngBounds, LatLngLiteral, MouseEvent as MapMouseEvent } from '../services/google-maps-types';\nimport { CircleManager } from '../services/managers/circle-manager';\n\n@Directive({\n  selector: 'agm-circle',\n})\nexport class AgmCircle implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The latitude position of the circle (required).\n   */\n  @Input() latitude: number;\n\n  /**\n   * The clickable position of the circle (required).\n   */\n  @Input() longitude: number;\n\n  /**\n   * Indicates whether this Circle handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this circle over the map. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('circleDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this circle by dragging the control points shown at\n   * the center and around the circumference of the circle. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The radius in meters on the Earth's surface.\n   */\n  @Input() radius = 0;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  @Input() strokePosition: 'CENTER' | 'INSIDE' | 'OUTSIDE' = 'CENTER';\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight = 0;\n\n  /**\n   * Whether this circle is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the circle's center is changed.\n   */\n  @Output() centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the circle.\n   */\n  @Output() circleDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the circle.\n   */\n  @Output() drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the circle.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the circle.\n   */\n  @Output() dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the circle.\n   */\n  @Output() mouseDown: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the circle.\n   */\n  @Output() mouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseout.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on circle mouseover.\n   */\n  @Output() mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mouseup event is fired on the circle.\n   */\n  @Output() mouseUp: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the circle's radius is changed.\n   */\n  @Output() radiusChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * This event is fired when the circle is right-clicked on.\n   */\n  @Output() rightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  private _circleAddedToManager = false;\n\n  private static _mapOptions: string[] = [\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\n    'visible', 'zIndex', 'clickable',\n  ];\n\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: CircleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addCircle(this);\n    this._circleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._circleAddedToManager) {\n      return;\n    }\n    if (changes['latitude'] || changes['longitude']) {\n      this._manager.setCenter(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    if (changes['radius']) {\n      this._manager.setRadius(this);\n    }\n    this._updateCircleOptionsChanges(changes);\n  }\n\n  private _updateCircleOptionsChanges(changes: {[propName: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n        Object.keys(changes).filter(k => AgmCircle._mapOptions.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    let events: Map<string, EventEmitter<any>> = new Map<string, EventEmitter<any>>();\n    events.set('center_changed', this.centerChange);\n    events.set('click', this.circleClick);\n    events.set('dblclick', this.circleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragstart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('radius_changed', this.radiusChange);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n          this._manager.createEventObservable<MapMouseEvent>(eventName, this).subscribe((value) => {\n            switch (eventName) {\n              case 'radius_changed':\n                this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\n                break;\n              case 'center_changed':\n                this._manager.getCenter(this).then(\n                    (center) =>\n                        eventEmitter.emit({lat: center.lat(), lng: center.lng()} as LatLngLiteral));\n                break;\n              default:\n                eventEmitter.emit(\n                    {coords: {lat: value.latLng.lat(), lng: value.latLng.lng()}} as MouseEvent);\n            }\n          }));\n    });\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(function(s: Subscription) { s.unsubscribe(); });\n    this._eventSubscriptions = null;\n    this._manager.removeCircle(this);\n  }\n\n  /**\n   * Gets the LatLngBounds of this Circle.\n   */\n  getBounds(): Promise<LatLngBounds> { return this._manager.getBounds(this); }\n\n  getCenter(): Promise<LatLng> { return this._manager.getCenter(this); }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmDataLayer } from './../../directives/data-layer';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\nimport { Data, DataOptions, Feature } from './../google-maps-types';\n\n/**\n * Manages all Data Layers for a Google Map instance.\n */\n@Injectable()\nexport class DataLayerManager {\n  private _layers: Map<AgmDataLayer, Promise<Data>> =\n  new Map<AgmDataLayer, Promise<Data>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) { }\n\n  /**\n   * Adds a new Data Layer to the map.\n   */\n  addDataLayer(layer: AgmDataLayer) {\n    const newLayer = this._wrapper.createDataLayer({\n      style: layer.style,\n    } as DataOptions)\n    .then(d => {\n      if (layer.geoJson) {\n        this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\n      }\n      return d;\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  deleteDataLayer(layer: AgmDataLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  updateGeoJson(layer: AgmDataLayer, geoJson: Object | string) {\n    this._layers.get(layer).then(l => {\n      l.forEach(function (feature: Feature) {\n        l.remove(feature);\n\n        var index = l.features.indexOf(feature, 0);\n        if (index > -1) {\n          l.features.splice(index, 1);\n        }\n      });\n      this.getDataFeatures(l, geoJson).then(features => l.features = features);\n    });\n  }\n\n  setDataOptions(layer: AgmDataLayer, options: DataOptions)\n  {\n    this._layers.get(layer).then(l => {\n      l.setControlPosition(options.controlPosition);\n      l.setControls(options.controls);\n      l.setDrawingMode(options.drawingMode);\n      l.setStyle(options.style);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given DataLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmDataLayer): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._layers.get(layer).then((d: Data) => {\n        d.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  /**\n   * Extract features from a geoJson using google.maps Data Class\n   * @param d : google.maps.Data class instance\n   * @param geoJson : url or geojson object\n   */\n  getDataFeatures(d: Data, geoJson: Object | string): Promise<Feature[]> {\n    return new Promise<Feature[]>((resolve, reject) => {\n        if (typeof geoJson === 'object') {\n          try {\n            const features = d.addGeoJson(geoJson);\n            resolve(features);\n          } catch (e) {\n            reject(e);\n          }\n        } else if (typeof geoJson === 'string') {\n          d.loadGeoJson(geoJson, null, resolve);\n        } else {\n          reject(`Impossible to extract features from geoJson: wrong argument type`);\n        }\n      });\n  }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataMouseEvent, DataOptions } from './../services/google-maps-types';\nimport { DataLayerManager } from './../services/managers/data-layer-manager';\n\nlet layerId = 0;\n\n/**\n * AgmDataLayer enables the user to add data layers to the map.\n *\n * ### Example\n * ```typescript\n * import { Component } from 'angular2/core';\n * import { AgmMap, AgmDataLayer } from\n * 'angular-google-maps/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  directives: [AgmMap, AgmDataLayer],\n *  styles: [`\n *    .agm-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\n * \t  </agm-data-layer>\n * </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = -25.274449;\n *   lng: number = 133.775060;\n *   zoom: number = 5;\n *\n * clicked(clickEvent) {\n *    console.log(clickEvent);\n *  }\n *\n *  styleFunc(feature) {\n *    return ({\n *      clickable: false,\n *      fillColor: feature.getProperty('color'),\n *      strokeWeight: 1\n *    });\n *  }\n *\n *  geoJsonObject: Object = {\n *    \"type\": \"FeatureCollection\",\n *    \"features\": [\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"G\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"71\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"red\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\n *            ],\n *            [\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"o\",\n *          \"color\": \"yellow\",\n *          \"rank\": \"15\",\n *          \"ascii\": \"111\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\n *              [132.71, -25.64], [131.87, -25.76]\n *            ],\n *            [\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"g\",\n *          \"color\": \"blue\",\n *          \"rank\": \"7\",\n *          \"ascii\": \"103\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\n *            ],\n *            [\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"l\",\n *          \"color\": \"green\",\n *          \"rank\": \"12\",\n *          \"ascii\": \"108\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\n *            ]\n *          ]\n *        }\n *      },\n *      {\n *        \"type\": \"Feature\",\n *        \"properties\": {\n *          \"letter\": \"e\",\n *          \"color\": \"red\",\n *          \"rank\": \"5\",\n *          \"ascii\": \"101\"\n *        },\n *        \"geometry\": {\n *          \"type\": \"Polygon\",\n *          \"coordinates\": [\n *            [\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\n *              [144.31, -28.26], [144.14, -27.41]\n *            ],\n *            [\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\n *            ]\n *          ]\n *        }\n *      }\n *    ]\n *  };\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-data-layer',\n})\nexport class AgmDataLayer implements OnInit, OnDestroy, OnChanges {\n  private static _dataOptionsAttributes: Array<string> = ['style'];\n\n  private _addedToManager = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<DataMouseEvent> = new EventEmitter<DataMouseEvent>();\n\n  /**\n   * The geoJson to be displayed\n   */\n  @Input() geoJson: Object | string | null = null;\n\n  /**\n   * The layer's style function.\n   */\n  @Input() style: () => void;\n\n  constructor(private _manager: DataLayerManager) { }\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addDataLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      { name: 'click', handler: (ev: DataMouseEvent) => this.layerClick.emit(ev) },\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmDataLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteDataLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n\n  /** @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n\n    var geoJsonChange = changes['geoJson'];\n    if (geoJsonChange) {\n      this._manager.updateGeoJson(this, geoJsonChange.currentValue);\n    }\n\n    let dataOptions: DataOptions = {};\n\n    AgmDataLayer._dataOptionsAttributes.forEach(k => (dataOptions as any)[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : (this as any)[k]);\n\n    this._manager.setDataOptions(this, dataOptions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, from, Observable, timer } from 'rxjs';\nimport {\n  flatMap,\n  map,\n  sample,\n  shareReplay,\n  switchMap,\n} from 'rxjs/operators';\nimport { LatLng, LatLngBounds, LatLngLiteral } from './google-maps-types';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\ndeclare var google: any;\n\nexport interface FitBoundsDetails {\n  latLng: LatLng | LatLngLiteral;\n}\n\n/**\n * @internal\n */\nexport type BoundsMap = Map<string, LatLng | LatLngLiteral>;\n\n/**\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\n * of AGM.\n */\nexport abstract class FitBoundsAccessor {\n  abstract getFitBoundsDetails$(): Observable<FitBoundsDetails>;\n}\n\n/**\n * The FitBoundsService is responsible for computing the bounds of the a single map.\n */\n@Injectable()\nexport class FitBoundsService {\n  protected readonly bounds$: Observable<LatLngBounds>;\n  protected readonly _boundsChangeSampleTime$ = new BehaviorSubject<number>(200);\n  protected readonly _includeInBounds$ = new BehaviorSubject<BoundsMap>(new Map<string, LatLng | LatLngLiteral>());\n\n  constructor(loader: MapsAPILoader) {\n    this.bounds$ = from(loader.load()).pipe(\n      flatMap(() => this._includeInBounds$),\n      sample(\n        this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time))),\n      ),\n      map(includeInBounds => this._generateBounds(includeInBounds)),\n      shareReplay(1),\n    );\n  }\n\n  private _generateBounds(\n    includeInBounds: Map<string, LatLng | LatLngLiteral>,\n  ) {\n    const bounds = new google.maps.LatLngBounds() as LatLngBounds;\n    includeInBounds.forEach(b => bounds.extend(b));\n    return bounds;\n  }\n\n  addToBounds(latLng: LatLng | LatLngLiteral) {\n    const id = this._createIdentifier(latLng);\n    if (this._includeInBounds$.value.has(id)) {\n      return;\n    }\n    const map = this._includeInBounds$.value;\n    map.set(id, latLng);\n    this._includeInBounds$.next(map);\n  }\n\n  removeFromBounds(latLng: LatLng | LatLngLiteral) {\n    const map = this._includeInBounds$.value;\n    map.delete(this._createIdentifier(latLng));\n    this._includeInBounds$.next(map);\n  }\n\n  changeFitBoundsChangeSampleTime(timeMs: number) {\n    this._boundsChangeSampleTime$.next(timeMs);\n  }\n\n  getBounds$(): Observable<LatLngBounds> {\n    return this.bounds$;\n  }\n\n  protected _createIdentifier(latLng: LatLng | LatLngLiteral): string {\n    return `${latLng.lat}+${latLng.lng}`;\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, OnInit, Self } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { FitBoundsAccessor, FitBoundsDetails, FitBoundsService } from '../services/fit-bounds';\n\n/**\n * Adds the given directive to the auto fit bounds feature when the value is true.\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\n * @example\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\n */\n@Directive({\n  selector: '[agmFitBounds]',\n})\nexport class AgmFitBounds implements OnInit, OnDestroy, OnChanges {\n  /**\n   * If the value is true, the element gets added to the bounds of the map.\n   * Default: true.\n   */\n  @Input() agmFitBounds = true;\n\n  private _destroyed$: Subject<void> = new Subject<void>();\n  private _latestFitBoundsDetails: FitBoundsDetails | null = null;\n\n  constructor(\n    @Self() private readonly _fitBoundsAccessor: FitBoundsAccessor,\n    private readonly _fitBoundsService: FitBoundsService,\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnChanges() {\n    this._updateBounds();\n  }\n\n  /**\n   * @internal\n   */\n  ngOnInit() {\n    this._fitBoundsAccessor\n      .getFitBoundsDetails$()\n      .pipe(\n        distinctUntilChanged(\n          (x: FitBoundsDetails, y: FitBoundsDetails) =>\n            x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng,\n        ),\n        takeUntil(this._destroyed$),\n      )\n      .subscribe(details => this._updateBounds(details));\n  }\n\n  /*\n   Either the location changed, or visible status changed.\n   Possible state changes are\n   invisible -> visible\n   visible -> invisible\n   visible -> visible (new location)\n  */\n  private _updateBounds(newFitBoundsDetails?: FitBoundsDetails) {\n    // either visibility will change, or location, so remove the old one anyway\n    if (this._latestFitBoundsDetails) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n      // don't set latestFitBoundsDetails to null, because we can toggle visibility from\n      // true -> false -> true, in which case we still need old value cached here\n    }\n\n    if (newFitBoundsDetails) {\n      this._latestFitBoundsDetails = newFitBoundsDetails;\n    }\n    if (!this._latestFitBoundsDetails) {\n      return;\n    }\n    if (this.agmFitBounds === true) {\n      this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this._destroyed$.next();\n    this._destroyed$.complete();\n    if (this._latestFitBoundsDetails !== null) {\n      this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\n    }\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmMarker } from './../../directives/marker';\n\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\nimport { Marker } from './../google-maps-types';\n\ndeclare var google: any;\n\n@Injectable()\nexport class MarkerManager {\n  protected _markers: Map<AgmMarker, Promise<Marker>> =\n      new Map<AgmMarker, Promise<Marker>>();\n\n  constructor(protected _mapsWrapper: GoogleMapsAPIWrapper, protected _zone: NgZone) {}\n\n  async convertAnimation(uiAnim: 'BOUNCE' | 'DROP' | null): Promise<any>{\n    if (uiAnim === null) {\n      return null;\n    } else {\n      return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\n    }\n  }\n\n  deleteMarker(marker: AgmMarker): Promise<void> {\n    const m = this._markers.get(marker);\n    if (m == null) {\n      // marker already deleted\n      return Promise.resolve();\n    }\n    return m.then((m: Marker) => {\n      return this._zone.run(() => {\n        m.setMap(null);\n        this._markers.delete(marker);\n      });\n    });\n  }\n\n  updateMarkerPosition(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then(\n        (m: Marker) => m.setPosition({lat: marker.latitude, lng: marker.longitude}));\n  }\n\n  updateTitle(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setTitle(marker.title));\n  }\n\n  updateLabel(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => { m.setLabel(marker.label); });\n  }\n\n  updateDraggable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setDraggable(marker.draggable));\n  }\n\n  updateIcon(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setIcon(marker.iconUrl));\n  }\n\n  updateOpacity(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setOpacity(marker.opacity));\n  }\n\n  updateVisible(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setVisible(marker.visible));\n  }\n\n  updateZIndex(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setZIndex(marker.zIndex));\n  }\n\n  updateClickable(marker: AgmMarker): Promise<void> {\n    return this._markers.get(marker).then((m: Marker) => m.setClickable(marker.clickable));\n  }\n\n  async updateAnimation(marker: AgmMarker) {\n    const m = await this._markers.get(marker);\n    m.setAnimation(await this.convertAnimation(marker.animation));\n  }\n\n  addMarker(marker: AgmMarker) {\n    const markerPromise = new Promise<Marker>(async (resolve) =>\n     this._mapsWrapper.createMarker({\n        position: {lat: marker.latitude, lng: marker.longitude},\n        label: marker.label,\n        draggable: marker.draggable,\n        icon: marker.iconUrl,\n        opacity: marker.opacity,\n        visible: marker.visible,\n        zIndex: marker.zIndex,\n        title: marker.title,\n        clickable: marker.clickable,\n        animation: await this.convertAnimation(marker.animation),\n      }).then(resolve));\n    this._markers.set(marker, markerPromise);\n  }\n\n  getNativeMarker(marker: AgmMarker): Promise<Marker> {\n    return this._markers.get(marker);\n  }\n\n  createEventObservable<T>(eventName: string, marker: AgmMarker): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._markers.get(marker).then((m: Marker) => {\n        m.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmInfoWindow } from '../../directives/info-window';\n\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { InfoWindow, InfoWindowOptions } from '../google-maps-types';\nimport { MarkerManager } from './marker-manager';\n\n@Injectable()\nexport class InfoWindowManager {\n  private _infoWindows: Map<AgmInfoWindow, Promise<InfoWindow>> =\n      new Map<AgmInfoWindow, Promise<InfoWindow>>();\n\n  constructor(\n      private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone,\n      private _markerManager: MarkerManager) {}\n\n  deleteInfoWindow(infoWindow: AgmInfoWindow): Promise<void> {\n    const iWindow = this._infoWindows.get(infoWindow);\n    if (iWindow == null) {\n      // info window already deleted\n      return Promise.resolve();\n    }\n    return iWindow.then((i: InfoWindow) => {\n      return this._zone.run(() => {\n        i.close();\n        this._infoWindows.delete(infoWindow);\n      });\n    });\n  }\n\n  setPosition(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setPosition({\n      lat: infoWindow.latitude,\n      lng: infoWindow.longitude,\n    }));\n  }\n\n  setZIndex(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow)\n        .then((i: InfoWindow) => i.setZIndex(infoWindow.zIndex));\n  }\n\n  open(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => {\n      if (infoWindow.hostMarker != null) {\n        return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\n          return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\n        });\n      }\n      return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\n    });\n  }\n\n  close(infoWindow: AgmInfoWindow): Promise<void> {\n    return this._infoWindows.get(infoWindow).then((w) => w.close());\n  }\n\n  setOptions(infoWindow: AgmInfoWindow, options: InfoWindowOptions) {\n    return this._infoWindows.get(infoWindow).then((i: InfoWindow) => i.setOptions(options));\n  }\n\n  addInfoWindow(infoWindow: AgmInfoWindow) {\n    const options: InfoWindowOptions = {\n      content: infoWindow.content,\n      maxWidth: infoWindow.maxWidth,\n      zIndex: infoWindow.zIndex,\n      disableAutoPan: infoWindow.disableAutoPan,\n    };\n    if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\n      options.position = {lat: infoWindow.latitude, lng: infoWindow.longitude};\n    }\n    const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\n    this._infoWindows.set(infoWindow, infoWindowPromise);\n  }\n\n   /**\n    * Creates a Google Maps event listener for the given InfoWindow as an Observable\n    */\n  createEventObservable<T>(eventName: string, infoWindow: AgmInfoWindow): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._infoWindows.get(infoWindow).then((i: InfoWindow) => {\n        i.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChange } from '@angular/core';\n\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\n\nimport { AgmMarker } from './marker';\n\nlet infoWindowId = 0;\n\n/**\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *        <agm-info-window [disableAutoPan]=\"true\">\n *          Hi, this is the content of the <strong>info window</strong>\n *        </agm-info-window>\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-info-window',\n  template: `<div class='agm-info-window-content'>\n      <ng-content></ng-content>\n    </div>\n  `,\n})\nexport class AgmInfoWindow implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The latitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude position of the info window (only usefull if you use it ouside of a {@link\n   * AgmMarker}).\n   */\n  @Input() longitude: number;\n\n  /**\n   * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\n   * visible when it opens.\n   */\n  @Input() disableAutoPan: boolean;\n\n  /**\n   * All InfoWindows are displayed on the map in order of their zIndex, with higher values\n   * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\n   * according to their latitude, with InfoWindows of lower latitudes appearing in front of\n   * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * Maximum width of the infowindow, regardless of content's width. This value is only considered\n   * if it is set before a call to open. To change the maximum width when changing content, call\n   * close, update maxWidth, and then open.\n   */\n  @Input() maxWidth: number;\n\n  /**\n   * Holds the marker that is the host of the info window (if available)\n   */\n  hostMarker: AgmMarker;\n\n  /**\n   * Holds the native element that is used for the info window content.\n   */\n  content: Node;\n\n  /**\n   * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\n   */\n  @Input() isOpen = false;\n\n  /**\n   * Emits an event when the info window is closed.\n   */\n  @Output() infoWindowClose: EventEmitter<void> = new EventEmitter<void>();\n\n  private static _infoWindowOptionsInputs: string[] = ['disableAutoPan', 'maxWidth'];\n  private _infoWindowAddedToManager = false;\n  private _id: string = (infoWindowId++).toString();\n\n  constructor(private _infoWindowManager: InfoWindowManager, private _el: ElementRef) {}\n\n  ngOnInit() {\n    this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\n    this._infoWindowManager.addInfoWindow(this);\n    this._infoWindowAddedToManager = true;\n    this._updateOpenState();\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: {[key: string]: SimpleChange}) {\n    if (!this._infoWindowAddedToManager) {\n      return;\n    }\n    if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\n        typeof this.longitude === 'number') {\n      this._infoWindowManager.setPosition(this);\n    }\n    if (changes['zIndex']) {\n      this._infoWindowManager.setZIndex(this);\n    }\n    if (changes['isOpen']) {\n      this._updateOpenState();\n    }\n    this._setInfoWindowOptions(changes);\n  }\n\n  private _registerEventListeners() {\n    this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\n      this.isOpen = false;\n      this.infoWindowClose.emit();\n    });\n  }\n\n  private _updateOpenState() {\n    this.isOpen ? this.open() : this.close();\n  }\n\n  private _setInfoWindowOptions(changes: {[key: string]: SimpleChange}) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys = Object.keys(changes).filter(\n        k => AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._infoWindowManager.setOptions(this, options);\n  }\n\n  /**\n   * Opens the info window.\n   */\n  open(): Promise<void> { return this._infoWindowManager.open(this); }\n\n  /**\n   * Closes the info window.\n   */\n  close(): Promise<void> {\n    return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmInfoWindow-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmKmlLayer } from './../../directives/kml-layer';\nimport { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';\nimport { KmlLayer, KmlLayerOptions } from './../google-maps-types';\n\ndeclare var google: any;\n\n/**\n * Manages all KML Layers for a Google Map instance.\n */\n@Injectable()\nexport class KmlLayerManager {\n  private _layers: Map<AgmKmlLayer, Promise<KmlLayer>> =\n      new Map<AgmKmlLayer, Promise<KmlLayer>>();\n\n  constructor(private _wrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  /**\n   * Adds a new KML Layer to the map.\n   */\n  addKmlLayer(layer: AgmKmlLayer) {\n    const newLayer = this._wrapper.getNativeMap().then(m => {\n      return new google.maps.KmlLayer({\n        clickable: layer.clickable,\n        map: m,\n        preserveViewport: layer.preserveViewport,\n        screenOverlays: layer.screenOverlays,\n        suppressInfoWindows: layer.suppressInfoWindows,\n        url: layer.url,\n        zIndex: layer.zIndex,\n      } as KmlLayerOptions);\n    });\n    this._layers.set(layer, newLayer);\n  }\n\n  setOptions(layer: AgmKmlLayer, options: KmlLayerOptions) {\n    this._layers.get(layer).then(l => l.setOptions(options));\n  }\n\n  deleteKmlLayer(layer: AgmKmlLayer) {\n    this._layers.get(layer).then(l => {\n      l.setMap(null);\n      this._layers.delete(layer);\n    });\n  }\n\n  /**\n   * Creates a Google Maps event listener for the given KmlLayer as an Observable\n   */\n  createEventObservable<T>(eventName: string, layer: AgmKmlLayer): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._layers.get(layer).then((m: KmlLayer) => {\n        m.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n}\n","import { Directive, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { KmlMouseEvent } from './../services/google-maps-types';\nimport { KmlLayerManager } from './../services/managers/kml-layer-manager';\n\nlet layerId = 0;\n\n@Directive({\n  selector: 'agm-kml-layer',\n})\nexport class AgmKmlLayer implements OnInit, OnDestroy, OnChanges {\n  private _addedToManager = false;\n  private _id: string = (layerId++).toString();\n  private _subscriptions: Subscription[] = [];\n  private static _kmlLayerOptions: string[] =\n      ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\n\n  /**\n   * If true, the layer receives mouse events. Default value is true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * By default, the input map is centered and zoomed to the bounding box of the contents of the\n   * layer.\n   * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\n   * were never set.\n   */\n  @Input() preserveViewport = false;\n\n  /**\n   * Whether to render the screen overlays. Default true.\n   */\n  @Input() screenOverlays = true;\n\n  /**\n   * Suppress the rendering of info windows when layer features are clicked.\n   */\n  @Input() suppressInfoWindows = false;\n\n  /**\n   * The URL of the KML document to display.\n   */\n  @Input() url: string = null;\n\n  /**\n   * The z-index of the layer.\n   */\n  @Input() zIndex: number | null = null;\n\n  /**\n   * This event is fired when a feature in the layer is clicked.\n   */\n  @Output() layerClick: EventEmitter<KmlMouseEvent> = new EventEmitter<KmlMouseEvent>();\n\n  /**\n   * This event is fired when the KML layers default viewport has changed.\n   */\n  @Output() defaultViewportChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the KML layer has finished loading.\n   * At this point it is safe to read the status property to determine if the layer loaded\n   * successfully.\n   */\n  @Output() statusChange: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(private _manager: KmlLayerManager) {}\n\n  ngOnInit() {\n    if (this._addedToManager) {\n      return;\n    }\n    this._manager.addKmlLayer(this);\n    this._addedToManager = true;\n    this._addEventListeners();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this._addedToManager) {\n      return;\n    }\n    this._updatePolygonOptions(changes);\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges) {\n    const options = Object.keys(changes)\n                        .filter(k => AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1)\n                        .reduce((obj: any, k: string) => {\n                          obj[k] = changes[k].currentValue;\n                          return obj;\n                        }, {});\n    if (Object.keys(options).length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _addEventListeners() {\n    const listeners = [\n      {name: 'click', handler: (ev: KmlMouseEvent) => this.layerClick.emit(ev)},\n      {name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit()},\n      {name: 'status_changed', handler: () => this.statusChange.emit()},\n    ];\n    listeners.forEach((obj) => {\n      const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return `AgmKmlLayer-${this._id.toString()}`; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._manager.deleteKmlLayer(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach(s => s.unsubscribe());\n  }\n}\n","import { fromEventPattern, Observable } from 'rxjs';\nimport { MapsEventListener, MVCArray } from '../services/google-maps-types';\n\nexport function createMVCEventObservable<T>(array: MVCArray<T>): Observable<MVCEvent<T>>{\n  const eventNames = ['insert_at', 'remove_at', 'set_at'];\n  return fromEventPattern(\n    (handler: Function) => eventNames.map(evName => array.addListener(evName,\n      (index: number, previous?: T) => handler.apply(array, [ {'newArr': array.getArray(), evName, index, previous} as MVCEvent<T>]))),\n    (_handler: Function, evListeners: MapsEventListener[]) => evListeners.forEach(evListener => evListener.remove()));\n}\n\nexport interface MVCEvent<T> {\n  newArr: T[];\n  evName: MvcEventType;\n  index: number;\n  previous?: T;\n}\n\nexport type MvcEventType = 'insert_at' | 'remove_at' | 'set_at';\n\nexport class MvcArrayMock<T> implements MVCArray<T> {\n  private vals: T[] = [];\n  private listeners: {\n    'remove_at': Function[];\n    'insert_at': Function[];\n    'set_at': Function[];\n    [key: string]: Function[];\n  } = {\n    'remove_at': [] as Function[],\n    'insert_at': [] as Function[],\n    'set_at': [] as Function[],\n  };\n  clear(): void {\n    for (let i = this.vals.length - 1; i >= 0; i--) {\n        this.removeAt(i);\n    }\n  }\n  getArray(): T[] {\n    return [...this.vals];\n  }\n  getAt(i: number): T {\n    return this.vals[i];\n  }\n  getLength(): number {\n    return this.vals.length;\n  }\n  insertAt(i: number, elem: T): void {\n    this.vals.splice(i, 0, elem);\n    this.listeners.insert_at.map(listener => listener(i));\n  }\n  pop(): T {\n    const deleted = this.vals.pop();\n    this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));\n    return deleted;\n  }\n  push(elem: T): number {\n    this.vals.push(elem);\n    this.listeners.insert_at.map(listener => listener(this.vals.length - 1));\n    return this.vals.length;\n  }\n  removeAt(i: number): T {\n    const deleted = this.vals.splice(i, 1)[0];\n    this.listeners.remove_at.map(listener => listener(i, deleted));\n    return deleted;\n  }\n  setAt(i: number, elem: T): void {\n    const deleted = this.vals[i];\n    this.vals[i] = elem;\n    this.listeners.set_at.map(listener => listener(i, deleted));\n  }\n  forEach(callback: (elem: T, i: number) => void): void {\n    this.vals.forEach(callback);\n  }\n  addListener(eventName: string, handler: Function): MapsEventListener {\n    const listenerArr = this.listeners[eventName];\n    listenerArr.push(handler);\n    return {\n        remove: () => {\n            listenerArr.splice(listenerArr.indexOf(handler), 1);\n        },\n    };\n  }\n}\n","export var google: any;\n\nexport interface MVCObject {\n  addListener(eventName: string, handler: Function): MapsEventListener;\n}\n\nexport interface MVCArray<T> extends MVCObject {\n  clear(): void;\n  getArray(): Array<T>;\n  getAt(i: number): T;\n  getLength(): number;\n  insertAt(i: number, elem: T): void;\n  pop(): T;\n  push(elem: T): number;\n  removeAt(i: number): T;\n  setAt(i: number, elem: T): void;\n  /* tslint:disable */\n  /*\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\n  */\n  forEach(callback: (elem: T, i: number) => void): void;\n  /* tslint:enable */\n}\n\nexport interface GoogleMap extends MVCObject {\n  data?: Data;\n  panTo(latLng: LatLng | LatLngLiteral): void;\n  panBy(x: number, y: number): void;\n  setZoom(zoom: number): void;\n  getCenter(): LatLng;\n  setCenter(latLng: LatLng | LatLngLiteral): void;\n  getBounds(): LatLngBounds;\n  getMapTypeId(): MapTypeId;\n  getZoom(): number;\n  setOptions(options: MapOptions): void;\n  panToBounds(latLngBounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding): void;\n  fitBounds(bounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding): void;\n}\n\nexport interface LatLng {\n  lat(): number;\n  lng(): number;\n  toJSON(): any;\n  toString(): string;\n}\n\nexport interface Marker extends MVCObject {\n  setMap(map: GoogleMap): void;\n  setPosition(latLng: LatLng | LatLngLiteral): void;\n  setTitle(title: string): void;\n  setLabel(label: string | MarkerLabel): void;\n  setDraggable(draggable: boolean): void;\n  setIcon(icon: string): void;\n  setOpacity(opacity: number): void;\n  setVisible(visible: boolean): void;\n  setZIndex(zIndex: number): void;\n  setAnimation(animation: any): void;\n  getLabel(): MarkerLabel;\n  setClickable(clickable: boolean): void;\n}\n\nexport interface MarkerOptions {\n  position: LatLng | LatLngLiteral;\n  title?: string;\n  map?: GoogleMap;\n  label?: string | MarkerLabel;\n  draggable?: boolean;\n  icon?: string;\n  opacity?: number;\n  visible?: boolean;\n  zIndex?: number;\n  clickable: boolean;\n  animation?: any;\n}\n\nexport interface MarkerLabel {\n  color: string;\n  fontFamily: string;\n  fontSize: string;\n  fontWeight: string;\n  text: string;\n}\n\nexport interface Circle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getCenter(): LatLng;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getRadius(): number;\n  getVisible(): boolean;\n  setCenter(center: LatLng | LatLngLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: CircleOptions): void;\n  setRadius(radius: number): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface CircleOptions {\n  center?: LatLng | LatLngLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  radius?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER' | 'INSIDE' | 'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Rectangle extends MVCObject {\n  getBounds(): LatLngBounds;\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getVisible(): boolean;\n  setBounds(bounds: LatLngBounds | LatLngBoundsLiteral): void;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: RectangleOptions): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface RectangleOptions {\n  bounds?: LatLngBounds | LatLngBoundsLiteral;\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  map?: GoogleMap;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokePosition?: 'CENTER' | 'INSIDE' | 'OUTSIDE';\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface LatLngBounds {\n  contains(latLng: LatLng): boolean;\n  equals(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n  extend(point: LatLng | LatLngLiteral): void;\n  getCenter(): LatLng;\n  getNorthEast(): LatLng;\n  getSouthWest(): LatLng;\n  intersects(other: LatLngBounds | LatLngBoundsLiteral): boolean;\n  isEmpty(): boolean;\n  toJSON(): LatLngBoundsLiteral;\n  toSpan(): LatLng;\n  toString(): string;\n  toUrlValue(precision?: number): string;\n  union(other: LatLngBounds | LatLngBoundsLiteral): LatLngBounds;\n}\n\nexport interface Padding {\n  top: number;\n  left: number;\n  right: number;\n  bottom: number;\n}\n\nexport interface LatLngBoundsLiteral {\n  east: number;\n  north: number;\n  south: number;\n  west: number;\n}\n\nexport interface LatLngLiteral {\n  lat: number;\n  lng: number;\n}\n\nexport interface MouseEvent { latLng: LatLng; }\n\nexport interface MapOptions {\n  center?: LatLng | LatLngLiteral;\n  zoom?: number;\n  minZoom?: number;\n  maxZoom?: number;\n  controlSize?: number;\n  disableDoubleClickZoom?: boolean;\n  disableDefaultUI?: boolean;\n  scrollwheel?: boolean;\n  backgroundColor?: string;\n  draggable?: boolean;\n  draggableCursor?: string;\n  draggingCursor?: string;\n  keyboardShortcuts?: boolean;\n  styles?: MapTypeStyle[];\n  zoomControl?: boolean;\n  zoomControlOptions?: ZoomControlOptions;\n  streetViewControl?: boolean;\n  streetViewControlOptions?: StreetViewControlOptions;\n  scaleControl?: boolean;\n  scaleControlOptions?: ScaleControlOptions;\n  mapTypeControl?: boolean;\n  mapTypeControlOptions?: MapTypeControlOptions;\n  panControl?: boolean;\n  panControlOptions?: PanControlOptions;\n  rotateControl?: boolean;\n  rotateControlOptions?: RotateControlOptions;\n  fullscreenControl?: boolean;\n  fullscreenControlOptions?: FullscreenControlOptions;\n  mapTypeId?: string | MapTypeId;\n  clickableIcons?: boolean;\n  gestureHandling?: 'cooperative' | 'greedy' | 'none' | 'auto';\n  tilt?: number;\n  restriction?: MapRestriction;\n}\n\nexport interface MapTypeStyle {\n  elementType?: 'all' | 'geometry' | 'geometry.fill' | 'geometry.stroke' | 'labels' | 'labels.icon' |\n  'labels.text' | 'labels.text.fill' | 'labels.text.stroke';\n  featureType?: 'administrative' | 'administrative.country' | 'administrative.land_parcel' |\n  'administrative.locality' | 'administrative.neighborhood' | 'administrative.province' | 'all' |\n  'landscape' | 'landscape.man_made' | 'landscape.natural' | 'landscape.natural.landcover' |\n  'landscape.natural.terrain' | 'poi' | 'poi.attraction' | 'poi.business' | 'poi.government' |\n  'poi.medical' | 'poi.park' | 'poi.place_of_worship' | 'poi.school' | 'poi.sports_complex' | 'road' |\n  'road.arterial' | 'road.highway' | 'road.highway.controlled_access' | 'road.local' | 'transit' |\n  'transit.line' | 'transit.station' | 'transit.station.airport' | 'transit.station.bus' |\n  'transit.station.rail' | 'water';\n  stylers: MapTypeStyler[];\n}\n\n/**\n *  If more than one key is specified in a single MapTypeStyler, all but one will be ignored.\n */\nexport interface MapTypeStyler {\n  color?: string;\n  gamma?: number;\n  hue?: string;\n  invert_lightness?: boolean;\n  lightness?: number;\n  saturation?: number;\n  visibility?: string;\n  weight?: number;\n}\n\nexport interface InfoWindow extends MVCObject {\n  close(): void;\n  getContent(): string | Node;\n  getPosition(): LatLng;\n  getZIndex(): number;\n  open(map?: GoogleMap, anchor?: MVCObject): void;\n  setContent(content: string | Node): void;\n  setOptions(options: InfoWindowOptions): void;\n  setPosition(position: LatLng | LatLngLiteral): void;\n  setZIndex(zIndex: number): void;\n}\n\nexport interface MapsEventListener { remove(): void; }\n\nexport interface Size {\n  height: number;\n  width: number;\n  equals(other: Size): boolean;\n  toString(): string;\n}\n\nexport interface InfoWindowOptions {\n  content?: string | Node;\n  disableAutoPan?: boolean;\n  maxWidth?: number;\n  pixelOffset?: Size;\n  position?: LatLng | LatLngLiteral;\n  zIndex?: number;\n}\n\nexport interface Point {\n  x: number;\n  y: number;\n  equals(other: Point): boolean;\n  toString(): string;\n}\n\nexport interface GoogleSymbol {\n  anchor?: Point;\n  fillColor?: string;\n  fillOpacity?: number;\n  labelOrigin?: Point;\n  path?: string | SymbolPath;\n  rotation?: number;\n  scale?: number;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n}\n\nexport interface IconSequence {\n  fixedRotation?: boolean;\n  icon?: GoogleSymbol;\n  offset?: string;\n  repeat?: string;\n}\n\nexport enum SymbolPath {\n  BACKWARD_CLOSED_ARROW = 3,\n  BACKWARD_OPEN_ARROW = 4,\n  CIRCLE = 0,\n  FORWARD_CLOSED_ARROW = 1,\n  FORWARD_OPEN_ARROW = 2,\n}\n\nexport interface PolylineOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  geodesic?: boolean;\n  icons?: Array<IconSequence>;\n  map?: GoogleMap;\n  path?: Array<LatLng> | Array<LatLng | LatLngLiteral>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polyline extends MVCObject {\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): MVCArray<LatLng>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setOptions(options: PolylineOptions): void;\n  setPath(path: Array<LatLng | LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\n/**\n * PolyMouseEvent gets emitted when the user triggers mouse events on a polyline.\n */\nexport interface PolyMouseEvent extends MouseEvent {\n  edge: number;\n  path: number;\n  vertex: number;\n}\n\nexport interface PolygonOptions {\n  clickable?: boolean;\n  draggable?: boolean;\n  editable?: boolean;\n  fillColor?: string;\n  fillOpacity?: number;\n  geodesic?: boolean;\n  icon?: Array<IconSequence>;\n  map?: GoogleMap;\n  paths?: Array<LatLng | LatLngLiteral> | Array<Array<LatLng | LatLngLiteral>>;\n  strokeColor?: string;\n  strokeOpacity?: number;\n  strokeWeight?: number;\n  visible?: boolean;\n  zIndex?: number;\n}\n\nexport interface Polygon extends MVCObject {\n  getDraggable(): boolean;\n  getEditable(): boolean;\n  getMap(): GoogleMap;\n  getPath(): MVCArray<LatLng>;\n  getPaths(): MVCArray<MVCArray<LatLng>>;\n  getVisible(): boolean;\n  setDraggable(draggable: boolean): void;\n  setEditable(editable: boolean): void;\n  setMap(map: GoogleMap): void;\n  setPath(path: Array<LatLng> | Array<LatLng | LatLngLiteral>): void;\n  setOptions(options: PolygonOptions): void;\n  setPaths(paths: Array<Array<LatLng | LatLngLiteral>> | Array<LatLng | LatLngLiteral>): void;\n  setVisible(visible: boolean): void;\n}\n\nexport interface KmlLayer extends MVCObject {\n  getDefaultViewport(): LatLngBounds;\n  getMap(): GoogleMap;\n  getMetadata(): KmlLayerMetadata;\n  getStatus(): KmlLayerStatus;\n  getUrl(): string;\n  getZIndex(): number;\n  setMap(map: GoogleMap): void;\n  setOptions(options: KmlLayerOptions): void;\n  setUrl(url: string): void;\n  setZIndex(zIndex: number): void;\n}\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerStatus\n */\nexport type KmlLayerStatus = 'DOCUMENT_NOT_FOUND' |\n  'DOCUMENT_TOO_LARGE' | 'FETCH_ERROR' | 'INVALID_DOCUMENT' | 'INVALID_REQUEST' |\n  'LIMITS_EXCEEDED' | 'OK' | 'TIMED_OUT' | 'UNKNOWN';\n\n/**\n * See: https://developers.google.com/maps/documentation/javascript/reference?hl=de#KmlLayerMetadata\n */\nexport interface KmlLayerMetadata {\n  author: KmlAuthor;\n  description: string;\n  hasScreenOverlays: boolean;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlAuthor {\n  email: string;\n  name: string;\n  uri: string;\n}\n\nexport interface KmlLayerOptions {\n  clickable?: boolean;\n  map?: GoogleMap;\n  preserveViewport?: boolean;\n  screenOverlays?: boolean;\n  suppressInfoWindows?: boolean;\n  url?: string;\n  zIndex?: number;\n}\n\nexport interface KmlFeatureData {\n  author: KmlAuthor;\n  description: string;\n  id: string;\n  infoWindowHtml: string;\n  name: string;\n  snippet: string;\n}\n\nexport interface KmlMouseEvent extends MouseEvent {\n  featureData: KmlFeatureData;\n  pixelOffset: Size;\n}\n\nexport interface TransitLayer extends MVCObject {\n  getMap(): GoogleMap;\n  setMap(map: GoogleMap): void;\n}\n\nexport interface TransitLayerOptions {\n  visible: boolean;\n}\n\nexport interface BicyclingLayer extends MVCObject {\n  getMap(): GoogleMap;\n  setMap(map: GoogleMap): void;\n}\n\nexport interface BicyclingLayerOptions {\n  visible: boolean;\n}\n\nexport interface Data extends MVCObject {\n  features: Feature[];\n  addGeoJson(geoJson: Object, options?: GeoJsonOptions): Feature[];\n  remove(feature: Feature): void;\n  setControlPosition(controlPosition: ControlPosition): void;\n  setControls(controls: string[]): void;\n  setDrawingMode(drawingMode: string): void;\n  setMap(map: GoogleMap): void;\n  /* tslint:disable */\n  /*\n  * Tslint configuration check-parameters will prompt errors for these lines of code.\n  * https://palantir.github.io/tslint/rules/no-unused-variable/\n  */\n  setStyle(style: () => void): void;\n  forEach(callback: (feature: Feature) => void): void;\n  loadGeoJson(url: string, options?: GeoJsonOptions, callback?: (feats: Feature[]) => void): void;\n  /* tslint:enable */\n}\n\nexport interface Feature extends MVCObject {\n  id?: number | string | undefined;\n  geometry: Geometry;\n  properties: any;\n}\n\nexport interface DataOptions {\n  controlPosition?: ControlPosition;\n  controls?: string[];\n  drawingMode?: string;\n  featureFactory?: (geometry: Geometry) => Feature;\n  map?: GoogleMap;\n  style?: () => void;\n}\n\nexport interface DataMouseEvent extends MouseEvent {\n  feature: Feature;\n}\n\nexport interface GeoJsonOptions {\n  idPropertyName: string;\n}\n\nexport interface Geometry {\n  type: string;\n}\n\n/**\n * Identifiers used to specify the placement of controls on the map. Controls are\n * positioned relative to other controls in the same layout position. Controls that\n * are added first are positioned closer to the edge of the map.\n */\nexport enum ControlPosition {\n  RIGHT_BOTTOM,\n  TOP_LEFT,\n  TOP_CENTER,\n  TOP_RIGHT,\n  LEFT_CENTER,\n  LEFT_TOP,\n  LEFT_BOTTOM,\n  RIGHT_TOP,\n  RIGHT_CENTER,\n  BOTTOM_RIGHT,\n  BOTTOM_LEFT,\n  BOTTOM_CENTER,\n}\n\nexport enum MapTypeId {\n  /** This map type displays a transparent layer of major streets on satellite images. */\n  HYBRID,\n  /** This map type displays a normal street map. */\n  ROADMAP,\n  /** This map type displays satellite images. */\n  SATELLITE,\n  /** This map type displays maps with physical features such as terrain and vegetation. */\n  TERRAIN,\n}\n\n/***** Controls *****/\n/** Options for the rendering of the map type control. */\nexport interface MapTypeControlOptions {\n  /** IDs of map types to show in the control. */\n  mapTypeIds?: (MapTypeId | string)[];\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_RIGHT.\n   */\n  position?: ControlPosition;\n  /** Style id. Used to select what style of map type control to display. */\n  style?: MapTypeControlStyle;\n}\n\nexport enum MapTypeControlStyle {\n  DEFAULT = 0,\n  DROPDOWN_MENU = 2,\n  HORIZONTAL_BAR = 1,\n}\n\nexport interface OverviewMapControlOptions {\n  opened?: boolean;\n}\n\n/** Options for the rendering of the pan control. */\nexport interface PanControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the rotate control. */\nexport interface RotateControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the scale control. */\nexport interface ScaleControlOptions {\n  /** Style id. Used to select what style of scale control to display. */\n  style?: ScaleControlStyle;\n}\n\nexport enum ScaleControlStyle {\n  DEFAULT,\n}\n\n/** Options for the rendering of the Street View pegman control on the map. */\nexport interface StreetViewControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map. The\n   * default position is embedded within the navigation (zoom and pan) controls.\n   * If this position is empty or the same as that specified in the\n   * zoomControlOptions or panControlOptions, the Street View control will be\n   * displayed as part of the navigation controls. Otherwise, it will be displayed\n   * separately.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the rendering of the zoom control. */\nexport interface ZoomControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is TOP_LEFT.\n   */\n  position?: ControlPosition;\n  style?: ZoomControlStyle;\n}\n\nexport enum ZoomControlStyle {\n  DEFAULT,\n  LARGE,\n  SMALL,\n}\n\n/** Options for the rendering of the fullscreen control. */\nexport interface FullscreenControlOptions {\n  /**\n   * Position id. Used to specify the position of the control on the map.\n   * The default position is RIGHT_TOP.\n   */\n  position?: ControlPosition;\n}\n\n/** Options for the restricting the bounds of the map. */\nexport interface MapRestriction {\n  latLngBounds: LatLngBounds | LatLngBoundsLiteral;\n  strictBounds?: boolean;\n}\n\nexport interface Geocoder {\n  geocode: (request: GeocoderRequest, googleCallback: (results: GeocoderResult[], status: GeocoderStatus) => void) => void;\n}\n\nexport interface GeocoderAddressComponent {\n  long_name: string;\n  short_name: string;\n  types: string[];\n}\n\n/** Options for restricting the geocoder results */\nexport interface GeocoderComponentRestrictions {\n  administrativeArea?: string;\n  country?: string;\n  locality?: string;\n  postalCode?: string;\n  route?: string;\n}\n\nexport interface GeocoderGeometry {\n  bounds: LatLngBounds;\n  location: LatLng;\n  location_type: GeocoderLocationType;\n  viewport: LatLngBounds;\n}\n\nexport enum GeocoderLocationType {\n  APPROXIMATE = 'APPROXIMATE',\n  GEOMETRIC_CENTER = 'GEOMETRIC_CENTER',\n  RANGE_INTERPOLATED = 'RANGE_INTERPOLATED',\n  ROOFTOP = 'ROOFTOP',\n}\n\nexport interface GeocoderRequest {\n  address?: string;\n  bounds?: LatLngBounds | LatLngBoundsLiteral;\n  componentRestrictions?: GeocoderComponentRestrictions;\n  location?: LatLng | LatLngLiteral;\n  placeId?: string;\n  region?: string;\n}\n\nexport interface GeocoderResult {\n  address_components: GeocoderAddressComponent[];\n  formatted_address: string;\n  geometry: GeocoderGeometry;\n  partial_match: boolean;\n  place_id: string;\n  postcode_localities: string[];\n  types: string[];\n}\n\nexport enum GeocoderStatus {\n  ERROR = 'ERROR',\n  INVALID_REQUEST = 'INVALID_REQUEST',\n  OK = 'OK',\n  OVER_QUERY_LIMIT = 'OVER_QUERY_LIMIT',\n  REQUEST_DENIED = 'REQUEST_DENIED',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n  ZERO_RESULTS = 'ZERO_RESULTS',\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { merge, Observable, Observer } from 'rxjs';\nimport { map, skip, startWith, switchMap } from 'rxjs/operators';\n\nimport { AgmPolygon, PathChangePolygonPathEvent, PathCollectionChangePolygonPathEvent, PolygonPathEvent } from '../../directives/polygon';\nimport { createMVCEventObservable, MVCEvent } from '../../utils/mvcarray-utils';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { LatLng, MVCArray, Polygon } from '../google-maps-types';\n\n@Injectable()\nexport class PolygonManager {\n  private _polygons: Map<AgmPolygon, Promise<Polygon>> =\n    new Map<AgmPolygon, Promise<Polygon>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) { }\n\n  addPolygon(path: AgmPolygon) {\n    const polygonPromise = this._mapsWrapper.createPolygon({\n      clickable: path.clickable,\n      draggable: path.draggable,\n      editable: path.editable,\n      fillColor: path.fillColor,\n      fillOpacity: path.fillOpacity,\n      geodesic: path.geodesic,\n      paths: path.paths,\n      strokeColor: path.strokeColor,\n      strokeOpacity: path.strokeOpacity,\n      strokeWeight: path.strokeWeight,\n      visible: path.visible,\n      zIndex: path.zIndex,\n    });\n    this._polygons.set(path, polygonPromise);\n  }\n\n  updatePolygon(polygon: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(polygon);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polygon) => this._zone.run(() => { l.setPaths(polygon.paths); }));\n  }\n\n  setPolygonOptions(path: AgmPolygon, options: { [propName: string]: any }): Promise<void> {\n    return this._polygons.get(path).then((l: Polygon) => { l.setOptions(options); });\n  }\n\n  deletePolygon(paths: AgmPolygon): Promise<void> {\n    const m = this._polygons.get(paths);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polygon) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polygons.delete(paths);\n      });\n    });\n  }\n\n  getPath(polygon: AgmPolygon): Promise<Array<LatLng>> {\n    return this._polygons.get(polygon)\n      .then((polygon) => polygon.getPath().getArray());\n  }\n\n  getPaths(polygon: AgmPolygon): Promise<Array<Array<LatLng>>> {\n    return this._polygons.get(polygon)\n      .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\n  }\n\n  createEventObservable<T>(eventName: string, path: AgmPolygon): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._polygons.get(path).then((l: Polygon) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  async createPathEventObservable(agmPolygon: AgmPolygon): Promise<Observable<PolygonPathEvent<any>>> {\n    const polygon = await this._polygons.get(agmPolygon);\n    const paths = polygon.getPaths();\n    const pathsChanges$ = createMVCEventObservable(paths);\n    return pathsChanges$.pipe(startWith(({ newArr: paths.getArray() } as MVCEvent<MVCArray<LatLng>>)), // in order to subscribe to them all\n      switchMap(parentMVEvent => merge(...// rest parameter\n        parentMVEvent.newArr.map((chMVC, index) =>\n          createMVCEventObservable(chMVC)\n          .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\n        .pipe(startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), // start the merged ob with an event signinifing change to parent\n      skip(1), // skip the manually added event\n      map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\n        let retVal;\n        if (!chMVCEvent) {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            eventName: parentMVEvent.evName,\n            index: parentMVEvent.index,\n          } as PathCollectionChangePolygonPathEvent;\n          if (parentMVEvent.previous) {\n            retVal.previous =  parentMVEvent.previous.getArray();\n          }\n        } else {\n          retVal = {\n            newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\n            pathIndex,\n            eventName: chMVCEvent.evName,\n            index: chMVCEvent.index,\n          } as PathChangePolygonPathEvent;\n          if (chMVCEvent.previous) {\n            retVal.previous = chMVCEvent.previous;\n          }\n        }\n        return retVal;\n      }));\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmPolyline, PathEvent } from '../../directives/polyline';\nimport { AgmPolylinePoint } from '../../directives/polyline-point';\nimport { createMVCEventObservable } from '../../utils/mvcarray-utils';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport { IconSequence, LatLng, LatLngLiteral, MVCArray, Polyline } from '../google-maps-types';\n\ndeclare var google: any;\n\n@Injectable()\nexport class PolylineManager {\n  private _polylines: Map<AgmPolyline, Promise<Polyline>> =\n      new Map<AgmPolyline, Promise<Polyline>>();\n\n  constructor(private _mapsWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  private static _convertPoints(line: AgmPolyline): Array<LatLngLiteral> {\n    const path = line._getPoints().map((point: AgmPolylinePoint) => {\n      return {lat: point.latitude, lng: point.longitude} as LatLngLiteral;\n    });\n    return path;\n  }\n\n  private static _convertPath(path: 'CIRCLE' | 'BACKWARD_CLOSED_ARROW' | 'BACKWARD_OPEN_ARROW' | 'FORWARD_CLOSED_ARROW' |\n  'FORWARD_CLOSED_ARROW' | string): number | string{\n    const symbolPath = google.maps.SymbolPath[path];\n    if (typeof symbolPath === 'number') {\n      return symbolPath;\n    } else{\n      return path;\n    }\n  }\n\n  private static _convertIcons(line: AgmPolyline): Array<IconSequence> {\n    const icons = line._getIcons().map(agmIcon => ({\n      fixedRotation: agmIcon.fixedRotation,\n      offset: agmIcon.offset,\n      repeat: agmIcon.repeat,\n      icon: {\n        anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\n        fillColor: agmIcon.fillColor,\n        fillOpacity: agmIcon.fillOpacity,\n        path: PolylineManager._convertPath(agmIcon.path),\n        rotation: agmIcon.rotation,\n        scale: agmIcon.scale,\n        strokeColor: agmIcon.strokeColor,\n        strokeOpacity: agmIcon.strokeOpacity,\n        strokeWeight: agmIcon.strokeWeight,\n      },\n    } as IconSequence));\n    // prune undefineds;\n    icons.forEach(icon => {\n      Object.entries(icon).forEach(([key, val]) => {\n        if (typeof val === 'undefined') {\n          delete (icon as any)[key];\n        }\n      });\n      if (typeof icon.icon.anchor.x === 'undefined' ||\n        typeof icon.icon.anchor.y === 'undefined') {\n          delete icon.icon.anchor;\n        }\n    });\n    return icons;\n  }\n\n  addPolyline(line: AgmPolyline) {\n    const polylinePromise = this._mapsWrapper.getNativeMap()\n    .then(() => [ PolylineManager._convertPoints(line),\n                  PolylineManager._convertIcons(line)])\n    .then(([path, icons]: [LatLngLiteral[], IconSequence[]]) =>\n      this._mapsWrapper.createPolyline({\n        clickable: line.clickable,\n        draggable: line.draggable,\n        editable: line.editable,\n        geodesic: line.geodesic,\n        strokeColor: line.strokeColor,\n        strokeOpacity: line.strokeOpacity,\n        strokeWeight: line.strokeWeight,\n        visible: line.visible,\n        zIndex: line.zIndex,\n        path: path,\n        icons: icons,\n    }));\n    this._polylines.set(line, polylinePromise);\n  }\n\n  updatePolylinePoints(line: AgmPolyline): Promise<void> {\n    const path = PolylineManager._convertPoints(line);\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polyline) => { return this._zone.run(() => { l.setPath(path); }); });\n  }\n\n  async updateIconSequences(line: AgmPolyline): Promise<void> {\n    await this._mapsWrapper.getNativeMap();\n    const icons = PolylineManager._convertIcons(line);\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return;\n    }\n    return m.then(l => this._zone.run(() => l.setOptions({icons: icons}) ) );\n  }\n\n  setPolylineOptions(line: AgmPolyline, options: {[propName: string]: any}):\n      Promise<void> {\n    return this._polylines.get(line).then((l: Polyline) => { l.setOptions(options); });\n  }\n\n  deletePolyline(line: AgmPolyline): Promise<void> {\n    const m = this._polylines.get(line);\n    if (m == null) {\n      return Promise.resolve();\n    }\n    return m.then((l: Polyline) => {\n      return this._zone.run(() => {\n        l.setMap(null);\n        this._polylines.delete(line);\n      });\n    });\n  }\n\n  private async getMVCPath(agmPolyline: AgmPolyline): Promise<MVCArray<LatLng>> {\n    const polyline = await this._polylines.get(agmPolyline);\n    return polyline.getPath();\n  }\n\n  async getPath(agmPolyline: AgmPolyline): Promise<Array<LatLng>> {\n    return (await this.getMVCPath(agmPolyline)).getArray();\n  }\n\n  createEventObservable<T>(eventName: string, line: AgmPolyline): Observable<T> {\n    return new Observable((observer: Observer<T>) => {\n      this._polylines.get(line).then((l: Polyline) => {\n        l.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n    });\n  }\n\n  async createPathEventObservable(line: AgmPolyline): Promise<Observable<PathEvent>> {\n    const mvcPath = await this.getMVCPath(line);\n    return createMVCEventObservable(mvcPath);\n  }\n}\n","import { Injectable, NgZone } from '@angular/core';\n\nimport { Observable, Observer } from 'rxjs';\n\nimport { AgmRectangle } from '../../directives/rectangle';\nimport { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';\nimport * as mapTypes from '../google-maps-types';\n\n@Injectable()\nexport class RectangleManager {\n  private _rectangles: Map<AgmRectangle, Promise<mapTypes.Rectangle>> =\n      new Map<AgmRectangle, Promise<mapTypes.Rectangle>>();\n\n  constructor(private _apiWrapper: GoogleMapsAPIWrapper, private _zone: NgZone) {}\n\n  addRectangle(rectangle: AgmRectangle) {\n    this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\n      bounds: {\n        north: rectangle.north,\n        east: rectangle.east,\n        south: rectangle.south,\n        west: rectangle.west,\n      },\n      clickable: rectangle.clickable,\n      draggable: rectangle.draggable,\n      editable: rectangle.editable,\n      fillColor: rectangle.fillColor,\n      fillOpacity: rectangle.fillOpacity,\n      strokeColor: rectangle.strokeColor,\n      strokeOpacity: rectangle.strokeOpacity,\n      strokePosition: rectangle.strokePosition,\n      strokeWeight: rectangle.strokeWeight,\n      visible: rectangle.visible,\n      zIndex: rectangle.zIndex,\n    }));\n  }\n\n  /**\n   * Removes the given rectangle from the map.\n   */\n  removeRectangle(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      r.setMap(null);\n      this._rectangles.delete(rectangle);\n    });\n  }\n\n  setOptions(rectangle: AgmRectangle, options: mapTypes.RectangleOptions): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => r.setOptions(options));\n  }\n\n  getBounds(rectangle: AgmRectangle): Promise<mapTypes.LatLngBounds> {\n    return this._rectangles.get(rectangle).then((r) => r.getBounds());\n  }\n\n  setBounds(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setBounds({\n        north: rectangle.north,\n        east: rectangle.east,\n        south: rectangle.south,\n        west: rectangle.west,\n      });\n    });\n  }\n\n  setEditable(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setEditable(rectangle.editable);\n    });\n  }\n\n  setDraggable(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setDraggable(rectangle.draggable);\n    });\n  }\n\n  setVisible(rectangle: AgmRectangle): Promise<void> {\n    return this._rectangles.get(rectangle).then((r) => {\n      return r.setVisible(rectangle.visible);\n    });\n  }\n\n  createEventObservable<T>(eventName: string, rectangle: AgmRectangle): Observable<T> {\n    return Observable.create((observer: Observer<T>) => {\n      let listener: mapTypes.MapsEventListener = null;\n      this._rectangles.get(rectangle).then((r) => {\n        listener = r.addListener(eventName, (e: T) => this._zone.run(() => observer.next(e)));\n      });\n\n      return () => {\n        if (listener !== null) {\n          listener.remove();\n        }\n      };\n    });\n  }\n}\n","import { isPlatformServer } from '@angular/common';\nimport { Component, ElementRef, EventEmitter, Inject, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, PLATFORM_ID, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { MouseEvent } from '../map-types';\nimport { FitBoundsService } from '../services/fit-bounds';\nimport { GoogleMapsAPIWrapper } from '../services/google-maps-api-wrapper';\nimport {\n  FullscreenControlOptions, LatLng, LatLngBounds, LatLngBoundsLiteral, LatLngLiteral,\n  MapRestriction, MapTypeControlOptions, MapTypeId, MapTypeStyle, Padding, PanControlOptions,\n  RotateControlOptions, ScaleControlOptions, StreetViewControlOptions, ZoomControlOptions,\n} from '../services/google-maps-types';\nimport { CircleManager } from '../services/managers/circle-manager';\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\nimport { LayerManager } from '../services/managers/layer-manager';\nimport { MarkerManager } from '../services/managers/marker-manager';\nimport { PolygonManager } from '../services/managers/polygon-manager';\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { RectangleManager } from '../services/managers/rectangle-manager';\nimport { DataLayerManager } from './../services/managers/data-layer-manager';\nimport { KmlLayerManager } from './../services/managers/kml-layer-manager';\n\ndeclare var google: any;\n\n/**\n * AgmMap renders a Google Map.\n * **Important note**: To be able see a map in the browser, you have to define a height for the\n * element `agm-map`.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Component({\n  selector: 'agm-map',\n  providers: [\n    CircleManager,\n    DataLayerManager,\n    DataLayerManager,\n    FitBoundsService,\n    GoogleMapsAPIWrapper,\n    InfoWindowManager,\n    KmlLayerManager,\n    LayerManager,\n    MarkerManager,\n    PolygonManager,\n    PolylineManager,\n    RectangleManager,\n  ],\n  host: {\n    // todo: deprecated - we will remove it with the next version\n    '[class.sebm-google-map-container]': 'true',\n  },\n  styles: [`\n    .agm-map-container-inner {\n      width: inherit;\n      height: inherit;\n    }\n    .agm-map-content {\n      display:none;\n    }\n  `],\n  template: `\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\n              <div class='agm-map-content'>\n                <ng-content></ng-content>\n              </div>\n  `,\n})\nexport class AgmMap implements OnChanges, OnInit, OnDestroy {\n  /**\n   * The longitude that defines the center of the map.\n   */\n  @Input() longitude = 0;\n\n  /**\n   * The latitude that defines the center of the map.\n   */\n  @Input() latitude = 0;\n\n  /**\n   * The zoom level of the map. The default zoom level is 8.\n   */\n  @Input() zoom = 8;\n\n  /**\n   * The minimal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() minZoom: number;\n\n  /**\n   * The maximal zoom level of the map allowed. When not provided, no restrictions to the zoom level\n   * are enforced.\n   */\n  @Input() maxZoom: number;\n\n  /**\n   * The control size for the default map controls. Only governs the controls made by the Maps API itself\n   */\n  @Input() controlSize: number;\n\n  /**\n   * Enables/disables if map is draggable.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('mapDraggable') draggable = true;\n\n  /**\n   * Enables/disables zoom and center on double click. Enabled by default.\n   */\n  @Input() disableDoubleClickZoom = false;\n\n  /**\n   * Enables/disables all default UI of the Google map. Please note: When the map is created, this\n   * value cannot get updated.\n   */\n  @Input() disableDefaultUI = false;\n\n  /**\n   * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\n   */\n  @Input() scrollwheel = true;\n\n  /**\n   * Color used for the background of the Map div. This color will be visible when tiles have not\n   * yet loaded as the user pans. This option can only be set when the map is initialized.\n   */\n  @Input() backgroundColor: string;\n\n  /**\n   * The name or url of the cursor to display when mousing over a draggable map. This property uses\n   * the css  * cursor attribute to change the icon. As with the css property, you must specify at\n   * least one fallback cursor that is not a URL. For example:\n   * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggableCursor: string;\n\n  /**\n   * The name or url of the cursor to display when the map is being dragged. This property uses the\n   * css cursor attribute to change the icon. As with the css property, you must specify at least\n   * one fallback cursor that is not a URL. For example:\n   * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\n   */\n  @Input() draggingCursor: string;\n\n  /**\n   * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\n   * enabled by default.\n   */\n  @Input() keyboardShortcuts = true;\n\n  /**\n   * The enabled/disabled state of the Zoom control.\n   */\n  @Input() zoomControl: boolean;\n\n  /**\n   * Options for the Zoom control.\n   */\n  @Input() zoomControlOptions: ZoomControlOptions;\n\n  /**\n   * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\n   * modes, these styles will only apply to labels and geometry.\n   */\n  @Input() styles: MapTypeStyle[] = [];\n\n  /**\n   * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\n   * used to\n   * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\n   */\n  @Input() usePanning = false;\n\n  /**\n   * The initial enabled/disabled state of the Street View Pegman control.\n   * This control is part of the default UI, and should be set to false when displaying a map type\n   * on which the Street View road overlay should not appear (e.g. a non-Earth map type).\n   */\n  @Input() streetViewControl: boolean;\n\n  /**\n   * Options for the Street View control.\n   */\n  @Input() streetViewControlOptions: StreetViewControlOptions;\n\n  /**\n   * Sets the viewport to contain the given bounds.\n   * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\n   */\n  @Input() fitBounds: LatLngBoundsLiteral | LatLngBounds | boolean = false;\n\n  /**\n   * Padding amount for the bounds.\n   */\n  @Input() fitBoundsPadding: number | Padding;\n\n  /**\n   * The initial enabled/disabled state of the Scale control. This is disabled by default.\n   */\n  @Input() scaleControl = false;\n\n  /**\n   * Options for the scale control.\n   */\n  @Input() scaleControlOptions: ScaleControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Map type control.\n   */\n  @Input() mapTypeControl = false;\n\n  /**\n   * Options for the Map type control.\n   */\n  @Input() mapTypeControlOptions: MapTypeControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Pan control.\n   */\n  @Input() panControl  = false;\n\n  /**\n   * Options for the Pan control.\n   */\n  @Input() panControlOptions: PanControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Rotate control.\n   */\n  @Input() rotateControl = false;\n\n  /**\n   * Options for the Rotate control.\n   */\n  @Input() rotateControlOptions: RotateControlOptions;\n\n  /**\n   * The initial enabled/disabled state of the Fullscreen control.\n   */\n  @Input() fullscreenControl  = false;\n\n  /**\n   * Options for the Fullscreen control.\n   */\n  @Input() fullscreenControlOptions: FullscreenControlOptions;\n\n  /**\n   * The map mapTypeId. Defaults to 'roadmap'.\n   */\n  @Input() mapTypeId: 'roadmap' | 'hybrid' | 'satellite' | 'terrain' | string = 'roadmap';\n\n  /**\n   * When false, map icons are not clickable. A map icon represents a point of interest,\n   * also known as a POI. By default map icons are clickable.\n   */\n  @Input() clickableIcons = true;\n\n  /**\n   * A map icon represents a point of interest, also known as a POI.\n   * When map icons are clickable by default, an info window is displayed.\n   * When this property is set to false, the info window will not be shown but the click event\n   * will still fire\n   */\n  @Input() showDefaultInfoWindow = true;\n\n  /**\n   * This setting controls how gestures on the map are handled.\n   * Allowed values:\n   * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\n   * - 'greedy'      (All touch gestures pan or zoom the map.)\n   * - 'none'        (The map cannot be panned or zoomed by user gestures.)\n   * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\n   */\n  @Input() gestureHandling: 'cooperative' | 'greedy' | 'none' | 'auto' = 'auto';\n\n    /**\n     * Controls the automatic switching behavior for the angle of incidence of\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\n     * to always use a 0Â° overhead view regardless of the zoom level and\n     * viewport. The value 45 causes the tilt angle to automatically switch to\n     * 45 whenever 45Â° imagery is available for the current zoom level and\n     * viewport, and switch back to 0 whenever 45Â° imagery is not available\n     * (this is the default behavior). 45Â° imagery is only available for\n     * satellite and hybrid map types, within some locations, and at some zoom\n     * levels. Note: getTilt returns the current tilt angle, not the value\n     * specified by this option. Because getTilt and this option refer to\n     * different things, do not bind() the tilt property; doing so may yield\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\n     */\n  @Input() tilt = 0;\n\n  /**\n   * Options for restricting the bounds of the map.\n   * User cannot pan or zoom away from restricted area.\n   */\n  @Input() restriction: MapRestriction;\n  /**\n   * Map option attributes that can change over time\n   */\n  private static _mapOptionsAttributes: string[] = [\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\n    'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\n    'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\n    'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\n    'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\n    'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction',\n  ];\n\n  private _observableSubscriptions: Subscription[] = [];\n  private _fitBoundsSubscription: Subscription;\n\n  /**\n   * This event emitter gets emitted when the user clicks on the map (but not when they click on a\n   * marker or infoWindow).\n   */\n  @Output() mapClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user right-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapRightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user double-clicks on the map (but not when they click\n   * on a marker or infoWindow).\n   */\n  @Output() mapDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter is fired when the map center changes.\n   */\n  @Output() centerChange: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  /**\n   * This event is fired when the viewport bounds have changed.\n   */\n  @Output() boundsChange: EventEmitter<LatLngBounds> = new EventEmitter<LatLngBounds>();\n\n  /**\n   * This event is fired when the mapTypeId property changes.\n   */\n  @Output() mapTypeIdChange: EventEmitter<MapTypeId> = new EventEmitter<MapTypeId>();\n\n  /**\n   * This event is fired when the map becomes idle after panning or zooming.\n   */\n  @Output() idle: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the zoom level has changed.\n   */\n  @Output() zoomChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   * This event is fired when the google map is fully initialized.\n   * You get the google.maps.Map instance as a result of this EventEmitter.\n   */\n  @Output() mapReady: EventEmitter<any> = new EventEmitter<any>();\n\n  /**\n   * This event is fired when the visible tiles have finished loading.\n   */\n  @Output() tilesLoaded: EventEmitter<void> = new EventEmitter<void>();\n\n  constructor(\n    private _elem: ElementRef,\n    private _mapsWrapper: GoogleMapsAPIWrapper,\n    @Inject(PLATFORM_ID) private _platformId: Object,\n    protected _fitBoundsService: FitBoundsService,\n    private _zone: NgZone\n  ) {}\n\n  /** @internal */\n  ngOnInit() {\n    if (isPlatformServer(this._platformId)) {\n      // The code is running on the server, do nothing\n      return;\n    }\n    // todo: this should be solved with a new component and a viewChild decorator\n    const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\n    this._initMapInstance(container);\n  }\n\n  private _initMapInstance(el: HTMLElement) {\n    this._mapsWrapper.createMap(el, {\n      center: {lat: this.latitude || 0, lng: this.longitude || 0},\n      zoom: this.zoom,\n      minZoom: this.minZoom,\n      maxZoom: this.maxZoom,\n      controlSize: this.controlSize,\n      disableDefaultUI: this.disableDefaultUI,\n      disableDoubleClickZoom: this.disableDoubleClickZoom,\n      scrollwheel: this.scrollwheel,\n      backgroundColor: this.backgroundColor,\n      draggable: this.draggable,\n      draggableCursor: this.draggableCursor,\n      draggingCursor: this.draggingCursor,\n      keyboardShortcuts: this.keyboardShortcuts,\n      styles: this.styles,\n      zoomControl: this.zoomControl,\n      zoomControlOptions: this.zoomControlOptions,\n      streetViewControl: this.streetViewControl,\n      streetViewControlOptions: this.streetViewControlOptions,\n      scaleControl: this.scaleControl,\n      scaleControlOptions: this.scaleControlOptions,\n      mapTypeControl: this.mapTypeControl,\n      mapTypeControlOptions: this.mapTypeControlOptions,\n      panControl: this.panControl,\n      panControlOptions: this.panControlOptions,\n      rotateControl: this.rotateControl,\n      rotateControlOptions: this.rotateControlOptions,\n      fullscreenControl: this.fullscreenControl,\n      fullscreenControlOptions: this.fullscreenControlOptions,\n      mapTypeId: this.mapTypeId,\n      clickableIcons: this.clickableIcons,\n      gestureHandling: this.gestureHandling,\n      tilt: this.tilt,\n      restriction: this.restriction,\n    })\n      .then(() => this._mapsWrapper.getNativeMap())\n      .then(map => this.mapReady.emit(map));\n\n    // register event listeners\n    this._handleMapCenterChange();\n    this._handleMapZoomChange();\n    this._handleMapMouseEvents();\n    this._handleBoundsChange();\n    this._handleMapTypeIdChange();\n    this._handleTilesLoadedEvent();\n    this._handleIdleEvent();\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n\n    // remove all listeners from the map instance\n    this._mapsWrapper.clearInstanceListeners();\n    if (this._fitBoundsSubscription) {\n      this._fitBoundsSubscription.unsubscribe();\n    }\n  }\n\n  /* @internal */\n  ngOnChanges(changes: SimpleChanges) {\n    this._updateMapOptionsChanges(changes);\n    this._updatePosition(changes);\n  }\n\n  private _updateMapOptionsChanges(changes: SimpleChanges) {\n    let options: {[propName: string]: any} = {};\n    let optionKeys =\n      Object.keys(changes).filter(k => AgmMap._mapOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\n    this._mapsWrapper.setMapOptions(options);\n  }\n\n  /**\n   * Triggers a resize event on the google map instance.\n   * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\n   * Returns a promise that gets resolved after the event was triggered.\n   */\n  triggerResize(recenter: boolean = true): Promise<void> {\n    // Note: When we would trigger the resize event and show the map in the same turn (which is a\n    // common case for triggering a resize event), then the resize event would not\n    // work (to show the map), so we trigger the event in a timeout.\n    return new Promise<void>((resolve) => {\n      setTimeout(() => {\n        return this._mapsWrapper.triggerMapEvent('resize').then(() => {\n          if (recenter) {\n            this.fitBounds != null ? this._fitBounds() : this._setCenter();\n          }\n          resolve();\n        });\n      });\n    });\n  }\n\n  private _updatePosition(changes: SimpleChanges) {\n    if (changes['latitude'] == null && changes['longitude'] == null &&\n        !changes['fitBounds']) {\n      // no position update needed\n      return;\n    }\n\n    // we prefer fitBounds in changes\n    if ('fitBounds' in changes) {\n      this._fitBounds();\n      return;\n    }\n\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    this._setCenter();\n  }\n\n  private _setCenter() {\n    let newCenter = {\n      lat: this.latitude,\n      lng: this.longitude,\n    };\n    if (this.usePanning) {\n      this._mapsWrapper.panTo(newCenter);\n    } else {\n      this._mapsWrapper.setCenter(newCenter);\n    }\n  }\n\n  private _fitBounds() {\n    switch (this.fitBounds) {\n      case true:\n        this._subscribeToFitBoundsUpdates();\n        break;\n      case false:\n        if (this._fitBoundsSubscription) {\n          this._fitBoundsSubscription.unsubscribe();\n        }\n        break;\n      default:\n        this._updateBounds(this.fitBounds, this.fitBoundsPadding);\n    }\n  }\n\n  private _subscribeToFitBoundsUpdates() {\n    this._zone.runOutsideAngular(() => {\n      this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\n        this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\n      });\n    });\n  }\n\n  protected _updateBounds(bounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding) {\n    if (!bounds) {\n      return;\n    }\n    if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\n      const newBounds = new google.maps.LatLngBounds();\n      newBounds.union(bounds);\n      bounds = newBounds;\n    }\n    if (this.usePanning) {\n      this._mapsWrapper.panToBounds(bounds, padding);\n      return;\n    }\n    this._mapsWrapper.fitBounds(bounds, padding);\n  }\n\n  private _isLatLngBoundsLiteral(bounds: LatLngBounds | LatLngBoundsLiteral): bounds is LatLngBoundsLiteral {\n    return bounds != null && (bounds as any).extend === undefined;\n  }\n\n  private _handleMapCenterChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('center_changed').subscribe(() => {\n      this._mapsWrapper.getCenter().then((center: LatLng) => {\n        this.latitude = center.lat();\n        this.longitude = center.lng();\n        this.centerChange.emit({lat: this.latitude, lng: this.longitude} as LatLngLiteral);\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleBoundsChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('bounds_changed').subscribe(() => {\n      this._mapsWrapper.getBounds().then(\n        (bounds: LatLngBounds) => { this.boundsChange.emit(bounds); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapTypeIdChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('maptypeid_changed').subscribe(() => {\n      this._mapsWrapper.getMapTypeId().then(\n        (mapTypeId: MapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapZoomChange() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('zoom_changed').subscribe(() => {\n      this._mapsWrapper.getZoom().then((z: number) => {\n        this.zoom = z;\n        this.zoomChange.emit(z);\n      });\n    });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleIdleEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('idle').subscribe(\n      () => { this.idle.emit(void 0); });\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleTilesLoadedEvent() {\n    const s = this._mapsWrapper.subscribeToMapEvent<void>('tilesloaded').subscribe(\n      () => this.tilesLoaded.emit(void 0),\n    );\n    this._observableSubscriptions.push(s);\n  }\n\n  private _handleMapMouseEvents() {\n    interface Emitter {\n      emit(value: any): void;\n    }\n\n    type Event = { name: string, emitter: Emitter };\n\n    const events: Event[] = [\n      {name: 'click', emitter: this.mapClick},\n      {name: 'rightclick', emitter: this.mapRightClick},\n      {name: 'dblclick', emitter: this.mapDblClick},\n    ];\n\n    events.forEach((e: Event) => {\n      const s = this._mapsWrapper.subscribeToMapEvent<{latLng: LatLng}>(e.name).subscribe(\n        (event: {latLng: LatLng}) => {\n          let value: MouseEvent = {\n            coords: {\n              lat: event.latLng.lat(),\n              lng: event.latLng.lng(),\n            },\n            placeId: (event as {latLng: LatLng, placeId: string}).placeId,\n          };\n          // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\n          if (value.placeId && !this.showDefaultInfoWindow) {\n            (event as any).stop();\n          }\n          e.emitter.emit(value);\n        });\n      this._observableSubscriptions.push(s);\n    });\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, forwardRef, Input, OnChanges, OnDestroy, Output, QueryList, SimpleChange } from '@angular/core';\nimport { Observable, ReplaySubject, Subscription } from 'rxjs';\nimport { MouseEvent } from '../map-types';\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\nimport * as mapTypes from '../services/google-maps-types';\nimport { MarkerManager } from '../services/managers/marker-manager';\nimport { AgmInfoWindow } from './info-window';\n\nlet markerId = 0;\n\n/**\n * AgmMarker renders a map marker inside a {@link AgmMap}.\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\n *      </agm-marker>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-marker',\n  providers: [\n    { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker) },\n  ],\n  inputs: [\n    'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\n    'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation',\n  ],\n  outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut'],\n})\nexport class AgmMarker implements OnDestroy, OnChanges, AfterContentInit, FitBoundsAccessor {\n  /**\n   * The latitude position of the marker.\n   */\n  @Input() latitude: number;\n\n  /**\n   * The longitude position of the marker.\n   */\n  @Input() longitude: number;\n\n  /**\n   * The title of the marker.\n   */\n  @Input() title: string;\n\n  /**\n   * The label (a single uppercase character) for the marker.\n   */\n  @Input() label: string | mapTypes.MarkerLabel;\n\n  /**\n   * If true, the marker can be dragged. Default value is false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerDraggable') draggable = false;\n\n  /**\n   * Icon (the URL of the image) for the foreground.\n   */\n  @Input() iconUrl: string;\n\n  /**\n   * If true, the marker is visible\n   */\n  @Input() visible = true;\n\n  /**\n   * Whether to automatically open the child info window when the marker is clicked.\n   */\n  @Input() openInfoWindow = true;\n\n  /**\n   * The marker's opacity between 0.0 and 1.0.\n   */\n  @Input() opacity = 1;\n\n  /**\n   * All markers are displayed on the map in order of their zIndex, with higher values displaying in\n   * front of markers with lower values. By default, markers are displayed according to their\n   * vertical position on screen, with lower markers appearing in front of markers further up the\n   * screen.\n   */\n  @Input() zIndex = 1;\n\n  /**\n   * If true, the marker can be clicked. Default value is true.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('markerClickable') clickable = true;\n\n  /**\n   * Which animation to play when marker is added to a map.\n   * This can be 'BOUNCE' or 'DROP'\n   */\n  @Input() animation: Animation;\n\n  /**\n   * This event is fired when the marker's animation property changes.\n   *\n   * @memberof AgmMarker\n   */\n  @Output() animationChange = new EventEmitter<Animation>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the marker.\n   */\n  @Output() markerClick: EventEmitter<AgmMarker> = new EventEmitter<AgmMarker>();\n\n  /**\n   * This event emitter gets emitted when the user clicks twice on the marker.\n   */\n  @Output() markerDblClick: EventEmitter<AgmMarker> = new EventEmitter<AgmMarker>();\n\n  /**\n   * This event is fired when the user rightclicks on the marker.\n   */\n  @Output() markerRightClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * This event is fired when the user starts dragging the marker.\n   */\n  @Output() dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the marker.\n   */\n  @Output() drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the marker.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses over the marker.\n   */\n  @Output() mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user mouses outside the marker.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /** @internal */\n  @ContentChildren(AgmInfoWindow) infoWindow: QueryList<AgmInfoWindow> = new QueryList<AgmInfoWindow>();\n\n  private _markerAddedToManger = false;\n  private _id: string;\n  private _observableSubscriptions: Subscription[] = [];\n\n  protected readonly _fitBoundsDetails$: ReplaySubject<FitBoundsDetails> = new ReplaySubject<FitBoundsDetails>(1);\n\n  constructor(private _markerManager: MarkerManager) { this._id = (markerId++).toString(); }\n\n  /* @internal */\n  ngAfterContentInit() {\n    this.handleInfoWindowUpdate();\n    this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\n  }\n\n  private handleInfoWindowUpdate() {\n    if (this.infoWindow.length > 1) {\n      throw new Error('Expected no more than one info window.');\n    }\n    this.infoWindow.forEach(marker => {\n      marker.hostMarker = this;\n    });\n  }\n\n  /** @internal */\n  ngOnChanges(changes: { [key: string]: SimpleChange }) {\n    if (typeof this.latitude === 'string') {\n      this.latitude = Number(this.latitude);\n    }\n    if (typeof this.longitude === 'string') {\n      this.longitude = Number(this.longitude);\n    }\n    if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\n      return;\n    }\n    if (!this._markerAddedToManger) {\n      this._markerManager.addMarker(this);\n      this._updateFitBoundsDetails();\n      this._markerAddedToManger = true;\n      this._addEventListeners();\n      return;\n    }\n    if (changes['latitude'] || changes['longitude']) {\n      this._markerManager.updateMarkerPosition(this);\n      this._updateFitBoundsDetails();\n    }\n    if (changes['title']) {\n      this._markerManager.updateTitle(this);\n    }\n    if (changes['label']) {\n      this._markerManager.updateLabel(this);\n    }\n    if (changes['draggable']) {\n      this._markerManager.updateDraggable(this);\n    }\n    if (changes['iconUrl']) {\n      this._markerManager.updateIcon(this);\n    }\n    if (changes['opacity']) {\n      this._markerManager.updateOpacity(this);\n    }\n    if (changes['visible']) {\n      this._markerManager.updateVisible(this);\n    }\n    if (changes['zIndex']) {\n      this._markerManager.updateZIndex(this);\n    }\n    if (changes['clickable']) {\n      this._markerManager.updateClickable(this);\n    }\n    if (changes['animation']) {\n      this._markerManager.updateAnimation(this);\n    }\n  }\n\n  /** @internal */\n  getFitBoundsDetails$(): Observable<FitBoundsDetails> {\n    return this._fitBoundsDetails$.asObservable();\n  }\n\n  protected _updateFitBoundsDetails() {\n    this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\n  }\n\n  private _addEventListeners() {\n    const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\n      if (this.openInfoWindow) {\n        this.infoWindow.forEach(infoWindow => infoWindow.open());\n      }\n      this.markerClick.emit(this);\n    });\n    this._observableSubscriptions.push(cs);\n\n    const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\n      this.markerDblClick.emit(null);\n    });\n    this._observableSubscriptions.push(dcs);\n\n    const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\n      this.markerRightClick.emit(null);\n    });\n    this._observableSubscriptions.push(rc);\n\n    const ds =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('dragstart', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.dragStart.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(ds);\n\n    const d =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('drag', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.drag.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(d);\n\n    const de =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('dragend', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(de);\n\n    const mover =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('mouseover', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(mover);\n\n    const mout =\n      this._markerManager.createEventObservable<mapTypes.MouseEvent>('mouseout', this)\n        .subscribe((e: mapTypes.MouseEvent) => {\n          this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } } as MouseEvent);\n        });\n    this._observableSubscriptions.push(mout);\n\n    const anChng =\n      this._markerManager.createEventObservable<void>('animation_changed', this)\n        .subscribe(() => {\n          this.animationChange.emit(this.animation);\n        });\n    this._observableSubscriptions.push(anChng);\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  toString(): string { return 'AgmMarker-' + this._id.toString(); }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._markerManager.deleteMarker(this);\n    // unsubscribe all registered observable subscriptions\n    this._observableSubscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n\nexport type Animation = 'BOUNCE' | 'DROP' | null;\n","import { AfterContentInit, Directive, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { LatLng, LatLngLiteral, PolygonOptions, PolyMouseEvent } from '../services/google-maps-types';\nimport { PolygonManager } from '../services/managers/polygon-manager';\nimport { MvcEventType } from '../utils/mvcarray-utils';\n\n/**\n * AgmPolygon renders a polygon on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    agm-map {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polygon [paths]=\"paths\">\n *      </agm-polygon>\n *    </agm-map>\n *  `\n * })\n * export class MyMapCmp {\n *   lat: number = 0;\n *   lng: number = 0;\n *   zoom: number = 10;\n *   paths: Array<LatLngLiteral> = [\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ]\n *   // Nesting paths will create a hole where they overlap;\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\n *     { lat: 0,  lng: 10 },\n *     { lat: 0,  lng: 20 },\n *     { lat: 10, lng: 20 },\n *     { lat: 10, lng: 10 },\n *     { lat: 0,  lng: 10 }\n *   ], [\n *     { lat: 0, lng: 15 },\n *     { lat: 0, lng: 20 },\n *     { lat: 5, lng: 20 },\n *     { lat: 5, lng: 15 },\n *     { lat: 0, lng: 15 }\n *   ]]\n * }\n * ```\n */\n@Directive({\n  selector: 'agm-polygon',\n})\nexport class AgmPolygon implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * Indicates whether this Polygon handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic\n   * property defines the mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polyDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this shape by dragging the control\n   * points shown at the vertices and on each segment. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will\n   * follow the curvature of the Earth. When false, edges of the polygon are\n   * rendered as straight lines in screen space. Note that the shape of a\n   * geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic = false;\n\n  /**\n   * The ordered sequence of coordinates that designates a closed loop.\n   * Unlike polylines, a polygon may consist of one or more paths.\n   *  As a result, the paths property may specify one or more arrays of\n   * LatLng coordinates. Paths are closed automatically; do not repeat the\n   * first vertex of the path as the last vertex. Simple polygons may be\n   * defined using a single array of LatLngs. More complex polygons may\n   * specify an array of arrays. Any simple arrays are converted into Arrays.\n   * Inserting or removing LatLngs from the Array will automatically update\n   * the polygon on the map.\n   */\n  @Input() paths: Array<LatLng | LatLngLiteral> | Array<Array<LatLng | LatLngLiteral>> = [];\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended\n   * named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n\n  /**\n   * Whether this polygon is visible on the map. Defaults to true.\n   */\n  @Input() visible: boolean;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the DOM click event is fired on the Polygon.\n   */\n  @Output() polyClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polygon.\n   */\n  @Output() polyDblClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the polygon.\n   */\n  @Output() polyDrag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the polygon.\n   */\n  @Output() polyDragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the polygon.\n   */\n  @Output() polyDragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polygon.\n   */\n  @Output() polyMouseDown: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polygon.\n   */\n  @Output() polyMouseMove: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polygon mouseout.\n   */\n  @Output() polyMouseOut: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polygon mouseover.\n   */\n  @Output() polyMouseOver: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polygon\n   */\n  @Output() polyMouseUp: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the Polygon is right-clicked on.\n   */\n  @Output() polyRightClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired after Polygon first path changes.\n   */\n  @Output() polyPathsChange = new EventEmitter<PolygonPathEvent<any>>();\n\n  private static _polygonOptionsAttributes: Array<string> = [\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\n    'editable', 'visible',\n  ];\n\n  private _id: string;\n  private _polygonAddedToManager = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polygonManager: PolygonManager) { }\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (!this._polygonAddedToManager) {\n      this._init();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polygonAddedToManager) {\n      this._init();\n      return;\n    }\n\n    this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\n  }\n\n  private _init() {\n    this._polygonManager.addPolygon(this);\n    this._polygonAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      { name: 'click', handler: (ev: PolyMouseEvent) => this.polyClick.emit(ev) },\n      { name: 'dblclick', handler: (ev: PolyMouseEvent) => this.polyDblClick.emit(ev) },\n      { name: 'drag', handler: (ev: MouseEvent) => this.polyDrag.emit(ev) },\n      { name: 'dragend', handler: (ev: MouseEvent) => this.polyDragEnd.emit(ev) },\n      { name: 'dragstart', handler: (ev: MouseEvent) => this.polyDragStart.emit(ev) },\n      { name: 'mousedown', handler: (ev: PolyMouseEvent) => this.polyMouseDown.emit(ev) },\n      { name: 'mousemove', handler: (ev: PolyMouseEvent) => this.polyMouseMove.emit(ev) },\n      { name: 'mouseout', handler: (ev: PolyMouseEvent) => this.polyMouseOut.emit(ev) },\n      { name: 'mouseover', handler: (ev: PolyMouseEvent) => this.polyMouseOver.emit(ev) },\n      { name: 'mouseup', handler: (ev: PolyMouseEvent) => this.polyMouseUp.emit(ev) },\n      { name: 'rightclick', handler: (ev: PolyMouseEvent) => this.polyRightClick.emit(ev) },\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n\n    this._polygonManager.createPathEventObservable(this)\n    .then(paths$ => {\n      const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\n      this._subscriptions.push(os);\n    });\n  }\n\n  private _updatePolygonOptions(changes: SimpleChanges): PolygonOptions {\n    return Object.keys(changes)\n      .filter(k => AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1)\n      .reduce((obj: any, k: string) => {\n        obj[k] = changes[k].currentValue;\n        return obj;\n      }, {});\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polygonManager.deletePolygon(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n\n  getPath(): Promise<Array<LatLng>> {\n    return this._polygonManager.getPath(this);\n  }\n\n  getPaths(): Promise<Array<Array<LatLng>>> {\n    return this._polygonManager.getPaths(this);\n  }\n}\n\nexport interface PolygonPathEvent<T extends (LatLng | Array<LatLng>)> {\n  newArr: LatLng[][];\n  eventName: MvcEventType;\n  index: number;\n  previous?: T;\n}\n\nexport interface PathCollectionChangePolygonPathEvent extends PolygonPathEvent <Array<LatLng>>{\n}\n\nexport interface PathChangePolygonPathEvent extends PolygonPathEvent<LatLng> {\n  pathIndex: number;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\n\n/**\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\n * or custom icons either along the entire line, or in a specific part of it.\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\n *\n * ### Example\n * ```html\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\n *          </agm-icon-sequence>\n *      </agm-polyline>\n *    </agm-map>\n * ```\n *\n * @export\n * @class AgmPolylineIcon\n */\n@Directive({selector: 'agm-polyline agm-icon-sequence'})\nexport class AgmPolylineIcon implements OnInit{\n\n  /**\n   * If `true`, each icon in the sequence has the same fixed rotation regardless of the\n   * angle of the edge on which it lies. Defaults to `false`, in which case each icon\n   * in the sequence is rotated to align with its edge.\n   *\n   * @type {boolean}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() fixedRotation: boolean;\n\n  /**\n   * The distance from the start of the line at which an icon is to be rendered. This\n   * distance may be expressed as a percentage of line's length (e.g. '50%') or in pixels\n   * (e.g. '50px'). Defaults to '100%'.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() offset: string;\n\n  /**\n   * The distance between consecutive icons on the line. This distance may be expressed as\n   * a percentage of the line's length (e.g. '50%') or in pixels (e.g. '50px'). To disable\n   * repeating of the icon, specify '0'. Defaults to '0'.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() repeat: string;\n\n  /**\n   * The x coordinate of the position of the symbol relative to the polyline. The coordinate\n   * of the symbol's path is translated _left_ by the anchor's x coordinate. By default, a\n   * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n   * symbol's path.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() anchorX: number;\n\n  /**\n   * The y coordinate of the position of the symbol relative to the polyline. The coordinate\n   * of the symbol's path is translated _up_ by the anchor's y coordinate. By default, a\n   * symbol is anchored at (0, 0). The position is expressed in the same coordinate system as the\n   * symbol's path.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() anchorY: number;\n\n  /**\n   * The symbol's fill color. All CSS3 colors are supported except for extended named\n   * colors. Defaults to the stroke color of the corresponding polyline.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The symbol's fill opacity. Defaults to 0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The symbol's path, which is a built-in symbol path, or a custom path expressed using\n   * SVG path notation. Required.\n   *\n   * @type {SymbolPath}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() path: 'CIRCLE' | 'BACKWARD_CLOSED_ARROW' | 'BACKWARD_OPEN_ARROW' | 'FORWARD_CLOSED_ARROW' |\n        'FORWARD_OPEN_ARROW' | string;\n\n  /**\n   * The angle by which to rotate the symbol, expressed clockwise in degrees.\n   * Defaults to 0. A symbol where `fixedRotation` is `false` is rotated relative to\n   * the angle of the edge on which it lies.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() rotation: number;\n\n  /**\n   * The amount by which the symbol is scaled in size. Defaults to the stroke weight\n   * of the polyline; after scaling, the symbol must lie inside a square 22 pixels in\n   * size centered at the symbol's anchor.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() scale: number;\n\n  /**\n   * The symbol's stroke color. All CSS3 colors are supported except for extended named\n   * colors. Defaults to the stroke color of the polyline.\n   *\n   * @type {string}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The symbol's stroke opacity. Defaults to the stroke opacity of the polyline.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The symbol's stroke weight. Defaults to the scale of the symbol.\n   *\n   * @type {number}\n   * @memberof AgmPolylineIcon\n   */\n  @Input() strokeWeight: number;\n\n  ngOnInit(): void {\n    if (this.path == null) {\n      throw new Error('Icon Sequence path is required');\n    }\n  }\n}\n","import { Directive, EventEmitter, forwardRef, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { LatLngLiteral } from '../../core/services/google-maps-types';\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\n\n/**\n * AgmPolylinePoint represents one element of a polyline within a  {@link\n * AgmPolyline}\n */\n@Directive({\n  selector: 'agm-polyline-point',\n  providers: [\n    {provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint)},\n  ],\n})\nexport class AgmPolylinePoint implements OnChanges, FitBoundsAccessor {\n  /**\n   * The latitude position of the point.\n   */\n  @Input() public latitude: number;\n\n  /**\n   * The longitude position of the point;\n   */\n  @Input() public longitude: number;\n\n  /**\n   * This event emitter gets emitted when the position of the point changed.\n   */\n  @Output() positionChanged: EventEmitter<LatLngLiteral> = new EventEmitter<LatLngLiteral>();\n\n  constructor() {}\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (changes['latitude'] || changes['longitude']) {\n      const position: LatLngLiteral = {\n        lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\n        lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\n      } as LatLngLiteral;\n      this.positionChanged.emit(position);\n    }\n  }\n\n  /** @internal */\n  getFitBoundsDetails$(): Observable<FitBoundsDetails> {\n    return this.positionChanged.pipe(\n      startWith({lat: this.latitude, lng: this.longitude}),\n      map(position => ({latLng: position}))\n    );\n  }\n}\n","import { AfterContentInit, ContentChildren, Directive, EventEmitter, Input, OnChanges, OnDestroy, Output, QueryList, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { LatLng, PolyMouseEvent } from '../services/google-maps-types';\nimport { PolylineManager } from '../services/managers/polyline-manager';\nimport { AgmPolylineIcon } from './polyline-icon';\nimport { AgmPolylinePoint } from './polyline-point';\n\nlet polylineId = 0;\n/**\n * AgmPolyline renders a polyline on a {@link AgmMap}\n *\n * ### Example\n * ```typescript\n * import { Component } from '@angular/core';\n *\n * @Component({\n *  selector: 'my-map-cmp',\n *  styles: [`\n *    .agm-map-container {\n *      height: 300px;\n *    }\n * `],\n *  template: `\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\n *      <agm-polyline>\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\n *          </agm-polyline-point>\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\n *          </agm-polyline-point>\n *      </agm-polyline>\n *    </agm-map>\n *  `\n * })\n * ```\n */\n@Directive({\n  selector: 'agm-polyline',\n})\nexport class AgmPolyline implements OnDestroy, OnChanges, AfterContentInit {\n  /**\n   * Indicates whether this Polyline handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this shape over the map. The geodesic property defines the\n   * mode of dragging. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('polylineDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this shape by dragging the control points shown at the\n   * vertices and on each segment. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\n   * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\n   * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\n   * are maintained relative to the surface of the earth. Defaults to false.\n   */\n  @Input() geodesic = false;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0.\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight: number;\n\n  /**\n   * Whether this polyline is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the DOM click event is fired on the Polyline.\n   */\n  @Output() lineClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM dblclick event is fired on the Polyline.\n   */\n  @Output() lineDblClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the polyline.\n   */\n  @Output() lineDrag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the polyline.\n   */\n  @Output() lineDragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the polyline.\n   */\n  @Output() lineDragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the Polyline.\n   */\n  @Output() lineMouseDown: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the Polyline.\n   */\n  @Output() lineMouseMove: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polyline mouseout.\n   */\n  @Output() lineMouseOut: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired on Polyline mouseover.\n   */\n  @Output() lineMouseOver: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired whe the DOM mouseup event is fired on the Polyline\n   */\n  @Output() lineMouseUp: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired when the Polyline is right-clicked on.\n   */\n  @Output() lineRightClick: EventEmitter<PolyMouseEvent> = new EventEmitter<PolyMouseEvent>();\n\n  /**\n   * This event is fired after Polyline's path changes.\n   */\n  @Output() polyPathChange = new EventEmitter<PathEvent>();\n\n  /**\n   * @internal\n   */\n  @ContentChildren(AgmPolylinePoint) points: QueryList<AgmPolylinePoint>;\n\n  @ContentChildren(AgmPolylineIcon) iconSequences: QueryList<AgmPolylineIcon>;\n\n  private static _polylineOptionsAttributes: Array<string> = [\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\n    'zIndex',\n  ];\n\n  private _id: string;\n  private _polylineAddedToManager = false;\n  private _subscriptions: Subscription[] = [];\n\n  constructor(private _polylineManager: PolylineManager) { this._id = (polylineId++).toString(); }\n\n  /** @internal */\n  ngAfterContentInit() {\n    if (this.points.length) {\n      this.points.forEach((point: AgmPolylinePoint) => {\n        const s = point.positionChanged.subscribe(\n            () => { this._polylineManager.updatePolylinePoints(this); });\n        this._subscriptions.push(s);\n      });\n    }\n    if (!this._polylineAddedToManager) {\n      this._init();\n    }\n    const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\n    this._subscriptions.push(pointSub);\n    this._polylineManager.updatePolylinePoints(this);\n\n    const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\n    this._subscriptions.push(iconSub);\n  }\n\n  ngOnChanges(changes: SimpleChanges): any {\n    if (!this._polylineAddedToManager) {\n      this._init();\n      return;\n    }\n\n    let options: {[propName: string]: any} = {};\n    const optionKeys = Object.keys(changes).filter(\n        k => AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1);\n    optionKeys.forEach(k => options[k] = changes[k].currentValue);\n    this._polylineManager.setPolylineOptions(this, options);\n  }\n\n  getPath(): Promise<Array<LatLng>> {\n    return this._polylineManager.getPath(this);\n  }\n\n  private _init() {\n    this._polylineManager.addPolyline(this);\n    this._polylineAddedToManager = true;\n    this._addEventListeners();\n  }\n\n  private _addEventListeners() {\n    const handlers = [\n      {name: 'click', handler: (ev: PolyMouseEvent) => this.lineClick.emit(ev)},\n      {name: 'dblclick', handler: (ev: PolyMouseEvent) => this.lineDblClick.emit(ev)},\n      {name: 'drag', handler: (ev: MouseEvent) => this.lineDrag.emit(ev)},\n      {name: 'dragend', handler: (ev: MouseEvent) => this.lineDragEnd.emit(ev)},\n      {name: 'dragstart', handler: (ev: MouseEvent) => this.lineDragStart.emit(ev)},\n      {name: 'mousedown', handler: (ev: PolyMouseEvent) => this.lineMouseDown.emit(ev)},\n      {name: 'mousemove', handler: (ev: PolyMouseEvent) => this.lineMouseMove.emit(ev)},\n      {name: 'mouseout', handler: (ev: PolyMouseEvent) => this.lineMouseOut.emit(ev)},\n      {name: 'mouseover', handler: (ev: PolyMouseEvent) => this.lineMouseOver.emit(ev)},\n      {name: 'mouseup', handler: (ev: PolyMouseEvent) => this.lineMouseUp.emit(ev)},\n      {name: 'rightclick', handler: (ev: PolyMouseEvent) => this.lineRightClick.emit(ev)},\n    ];\n    handlers.forEach((obj) => {\n      const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\n      this._subscriptions.push(os);\n    });\n\n    this._polylineManager.createPathEventObservable(this).then((ob$) => {\n      const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\n      this._subscriptions.push(os);\n    });\n  }\n\n  /** @internal */\n  _getPoints(): Array<AgmPolylinePoint> {\n    if (this.points) {\n      return this.points.toArray();\n    }\n    return [];\n  }\n\n  _getIcons(): Array<AgmPolylineIcon> {\n    if (this.iconSequences) {\n      return this.iconSequences.toArray();\n    }\n    return [];\n  }\n\n  /** @internal */\n  id(): string { return this._id; }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._polylineManager.deletePolyline(this);\n    // unsubscribe all registered observable subscriptions\n    this._subscriptions.forEach((s) => s.unsubscribe());\n  }\n}\n\nexport interface PathEvent {\n  newArr: LatLng[];\n  evName: 'insert_at' | 'remove_at' | 'set_at';\n  index: number;\n  previous?: LatLng;\n}\n","import {\n  Directive,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChange,\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { MouseEvent } from '../map-types';\nimport {\n  LatLngBounds,\n  LatLngBoundsLiteral,\n  MouseEvent as MapMouseEvent,\n} from '../services/google-maps-types';\nimport { RectangleManager } from '../services/managers/rectangle-manager';\n\n@Directive({\n  selector: 'agm-rectangle',\n})\nexport class AgmRectangle implements OnInit, OnChanges, OnDestroy {\n  /**\n   * The north position of the rectangle (required).\n   */\n  @Input() north: number;\n\n  /**\n   * The east position of the rectangle (required).\n   */\n  @Input() east: number;\n\n  /**\n   * The south position of the rectangle (required).\n   */\n  @Input() south: number;\n\n  /**\n   * The west position of the rectangle (required).\n   */\n  @Input() west: number;\n\n  /**\n   * Indicates whether this Rectangle handles mouse events. Defaults to true.\n   */\n  @Input() clickable = true;\n\n  /**\n   * If set to true, the user can drag this rectangle over the map. Defaults to false.\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('rectangleDraggable') draggable = false;\n\n  /**\n   * If set to true, the user can edit this rectangle by dragging the control points shown at\n   * the center and around the circumference of the rectangle. Defaults to false.\n   */\n  @Input() editable = false;\n\n  /**\n   * The fill color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() fillColor: string;\n\n  /**\n   * The fill opacity between 0.0 and 1.0.\n   */\n  @Input() fillOpacity: number;\n\n  /**\n   * The stroke color. All CSS3 colors are supported except for extended named colors.\n   */\n  @Input() strokeColor: string;\n\n  /**\n   * The stroke opacity between 0.0 and 1.0\n   */\n  @Input() strokeOpacity: number;\n\n  /**\n   * The stroke position. Defaults to CENTER.\n   * This property is not supported on Internet Explorer 8 and earlier.\n   */\n  @Input() strokePosition: 'CENTER' | 'INSIDE' | 'OUTSIDE' = 'CENTER';\n\n  /**\n   * The stroke width in pixels.\n   */\n  @Input() strokeWeight = 0;\n\n  /**\n   * Whether this rectangle is visible on the map. Defaults to true.\n   */\n  @Input() visible = true;\n\n  /**\n   * The zIndex compared to other polys.\n   */\n  @Input() zIndex: number;\n\n  /**\n   * This event is fired when the rectangle's is changed.\n   */\n  @Output()\n  boundsChange: EventEmitter<LatLngBoundsLiteral> = new EventEmitter<\n    LatLngBoundsLiteral\n  >();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the rectangle.\n   */\n  @Output()\n  rectangleClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event emitter gets emitted when the user clicks on the rectangle.\n   */\n  @Output()\n  rectangleDblClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is repeatedly fired while the user drags the rectangle.\n   */\n  @Output() drag: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user stops dragging the rectangle.\n   */\n  @Output() dragEnd: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the user starts dragging the rectangle.\n   */\n  @Output()\n  dragStart: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousedown event is fired on the rectangle.\n   */\n  @Output()\n  mouseDown: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mousemove event is fired on the rectangle.\n   */\n  @Output()\n  mouseMove: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on rectangle mouseout.\n   */\n  @Output() mouseOut: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired on rectangle mouseover.\n   */\n  @Output()\n  mouseOver: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the DOM mouseup event is fired on the rectangle.\n   */\n  @Output() mouseUp: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * This event is fired when the rectangle is right-clicked on.\n   */\n  @Output()\n  rightClick: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  private _rectangleAddedToManager = false;\n\n  private static _mapOptions: string[] = [\n    'fillColor',\n    'fillOpacity',\n    'strokeColor',\n    'strokeOpacity',\n    'strokePosition',\n    'strokeWeight',\n    'visible',\n    'zIndex',\n    'clickable',\n  ];\n\n  private _eventSubscriptions: Subscription[] = [];\n\n  constructor(private _manager: RectangleManager) {}\n\n  /** @internal */\n  ngOnInit() {\n    this._manager.addRectangle(this);\n    this._rectangleAddedToManager = true;\n    this._registerEventListeners();\n  }\n\n  /** @internal */\n  ngOnChanges(changes: { [key: string]: SimpleChange }) {\n    if (!this._rectangleAddedToManager) {\n      return;\n    }\n    if (\n      changes['north'] ||\n      changes['east'] ||\n      changes['south'] ||\n      changes['west']\n    ) {\n      this._manager.setBounds(this);\n    }\n    if (changes['editable']) {\n      this._manager.setEditable(this);\n    }\n    if (changes['draggable']) {\n      this._manager.setDraggable(this);\n    }\n    if (changes['visible']) {\n      this._manager.setVisible(this);\n    }\n    this._updateRectangleOptionsChanges(changes);\n  }\n\n  private _updateRectangleOptionsChanges(changes: {\n    [propName: string]: SimpleChange;\n  }) {\n    let options: { [propName: string]: any } = {};\n    let optionKeys = Object.keys(changes).filter(\n      k => AgmRectangle._mapOptions.indexOf(k) !== -1,\n    );\n    optionKeys.forEach(k => {\n      options[k] = changes[k].currentValue;\n    });\n    if (optionKeys.length > 0) {\n      this._manager.setOptions(this, options);\n    }\n  }\n\n  private _registerEventListeners() {\n    let events: Map<string, EventEmitter<any>> = new Map<\n      string,\n      EventEmitter<any>\n    >();\n    events.set('bounds_changed', this.boundsChange);\n    events.set('click', this.rectangleClick);\n    events.set('dblclick', this.rectangleDblClick);\n    events.set('drag', this.drag);\n    events.set('dragend', this.dragEnd);\n    events.set('dragStart', this.dragStart);\n    events.set('mousedown', this.mouseDown);\n    events.set('mousemove', this.mouseMove);\n    events.set('mouseout', this.mouseOut);\n    events.set('mouseover', this.mouseOver);\n    events.set('mouseup', this.mouseUp);\n    events.set('rightclick', this.rightClick);\n\n    events.forEach((eventEmitter, eventName) => {\n      this._eventSubscriptions.push(\n        this._manager\n          .createEventObservable<MapMouseEvent>(eventName, this)\n          .subscribe(value => {\n            switch (eventName) {\n              case 'bounds_changed':\n                this._manager.getBounds(this).then(bounds =>\n                  eventEmitter.emit({\n                    north: bounds.getNorthEast().lat(),\n                    east: bounds.getNorthEast().lng(),\n                    south: bounds.getSouthWest().lat(),\n                    west: bounds.getSouthWest().lng(),\n                  } as LatLngBoundsLiteral),\n                );\n                break;\n              default:\n                eventEmitter.emit({\n                  coords: { lat: value.latLng.lat(), lng: value.latLng.lng() },\n                } as MouseEvent);\n            }\n          }),\n      );\n    });\n  }\n\n  /** @internal */\n  ngOnDestroy() {\n    this._eventSubscriptions.forEach(function(s: Subscription) {\n      s.unsubscribe();\n    });\n    this._eventSubscriptions = null;\n    this._manager.removeRectangle(this);\n  }\n\n  /**\n   * Gets the LatLngBounds of this Rectangle.\n   */\n  getBounds(): Promise<LatLngBounds> {\n    return this._manager.getBounds(this);\n  }\n}\n","import { Directive, Input, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { LayerManager } from '../services/managers/layer-manager';\n\nlet layerId = 0;\n\n/*\n * This directive adds a transit layer to a google map instance\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\n * */\n@Directive({\n    selector: 'agm-transit-layer',\n})\n\nexport class AgmTransitLayer implements OnInit, OnChanges, OnDestroy{\n    private _addedToManager = false;\n    private _id: string = (layerId++).toString();\n\n    /**\n     * Hide/show transit layer\n     */\n    @Input() visible = true;\n\n    constructor( private _manager: LayerManager ) {}\n\n    ngOnInit() {\n        if (this._addedToManager) {\n            return;\n        }\n        this._manager.addTransitLayer(this, {visible: this.visible});\n        this._addedToManager = true;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (!this._addedToManager) {\n            return;\n        }\n        if (changes['visible'] != null) {\n            this._manager.toggleLayerVisibility(this, {visible: changes['visible'].currentValue});\n        }\n    }\n\n    /** @internal */\n    id(): string { return this._id; }\n\n    /** @internal */\n    toString(): string { return `AgmTransitLayer-${this._id.toString()}`; }\n\n    /** @internal */\n    ngOnDestroy() {\n        this._manager.deleteLayer(this);\n    }\n\n}\n","import { Inject, Injectable, InjectionToken, LOCALE_ID, Optional } from '@angular/core';\n\nimport { DocumentRef, WindowRef } from '../../utils/browser-globals';\n\nimport { MapsAPILoader } from './maps-api-loader';\n\nexport enum GoogleMapsScriptProtocol {\n  HTTP = 1,\n  HTTPS = 2,\n  AUTO = 3,\n}\n\n/**\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\n * LazyMapsAPILoaderConfig}.\n */\nexport const LAZY_MAPS_API_CONFIG = new InjectionToken<LazyMapsAPILoaderConfigLiteral>('angular-google-maps LAZY_MAPS_API_CONFIG');\n\n/**\n * Configuration for the {@link LazyMapsAPILoader}.\n */\nexport interface LazyMapsAPILoaderConfigLiteral {\n  /**\n   * The Google Maps API Key (see:\n   * https://developers.google.com/maps/documentation/javascript/get-api-key)\n   */\n  apiKey?: string;\n\n  /**\n   * The Google Maps client ID (for premium plans).\n   * When you have a Google Maps APIs Premium Plan license, you must authenticate\n   * your application with either an API key or a client ID.\n   * The Google Maps API will fail to load if both a client ID and an API key are included.\n   */\n  clientId?: string;\n\n  /**\n   * The Google Maps channel name (for premium plans).\n   * A channel parameter is an optional parameter that allows you to track usage under your client\n   * ID by assigning a distinct channel to each of your applications.\n   */\n  channel?: string;\n\n  /**\n   * Google Maps API version.\n   */\n  apiVersion?: string;\n\n  /**\n   * Host and Path used for the `<script>` tag.\n   */\n  hostAndPath?: string;\n\n  /**\n   * Protocol used for the `<script>` tag.\n   */\n  protocol?: GoogleMapsScriptProtocol;\n\n  /**\n   * Defines which Google Maps libraries should get loaded.\n   */\n  libraries?: string[];\n\n  /**\n   * The default bias for the map behavior is US.\n   * If you wish to alter your application to serve different map tiles or bias the\n   * application, you can overwrite the default behavior (US) by defining a `region`.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Region\n   */\n  region?: string;\n\n  /**\n   * The Google Maps API uses the browser's preferred language when displaying\n   * textual information. If you wish to overwrite this behavior and force the API\n   * to use a given language, you can use this setting.\n   * See https://developers.google.com/maps/documentation/javascript/basics#Language\n   */\n  language?: string;\n}\n\n@Injectable()\nexport class LazyMapsAPILoader extends MapsAPILoader {\n  protected _scriptLoadingPromise: Promise<void>;\n  protected _config: LazyMapsAPILoaderConfigLiteral;\n  protected _windowRef: WindowRef;\n  protected _documentRef: DocumentRef;\n  protected readonly _SCRIPT_ID: string = 'agmGoogleMapsApiScript';\n  protected readonly callbackName: string = `agmLazyMapsAPILoader`;\n\n  constructor(@Optional() @Inject(LAZY_MAPS_API_CONFIG) config: any = null, w: WindowRef, d: DocumentRef,\n   @Inject(LOCALE_ID) private localeId: string) {\n    super();\n    this._config = config || {};\n    this._windowRef = w;\n    this._documentRef = d;\n  }\n\n  load(): Promise<void> {\n    const window = this._windowRef.getNativeWindow() as any;\n    if (window.google && window.google.maps) {\n      // Google maps already loaded on the page.\n      return Promise.resolve();\n    }\n\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    }\n\n    // this can happen in HMR situations or Stackblitz.io editors.\n    const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\n    if (scriptOnPage) {\n      this._assignScriptLoadingPromise(scriptOnPage);\n      return this._scriptLoadingPromise;\n    }\n\n    const script = this._documentRef.getNativeDocument().createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.id = this._SCRIPT_ID;\n    script.src = this._getScriptSrc(this.callbackName);\n    this._assignScriptLoadingPromise(script);\n    this._documentRef.getNativeDocument().body.appendChild(script);\n    return this._scriptLoadingPromise;\n  }\n\n  private _assignScriptLoadingPromise(scriptElem: HTMLElement) {\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n      (this._windowRef.getNativeWindow() as any)[this.callbackName] = () => {\n        resolve();\n      };\n\n      scriptElem.onerror = (error: Event) => {\n        reject(error);\n      };\n    });\n  }\n\n  protected _getScriptSrc(callbackName: string): string {\n    let protocolType: GoogleMapsScriptProtocol =\n        (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\n    let protocol: string;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\n    const queryParams: {[key: string]: string | Array<string>} = {\n      v: this._config.apiVersion || 'quarterly',\n      callback: callbackName,\n      key: this._config.apiKey,\n      client: this._config.clientId,\n      channel: this._config.channel,\n      libraries: this._config.libraries,\n      region: this._config.region,\n      language: this._config.language || (this.localeId !== 'en-US' ? this.localeId : null),\n    };\n    const params: string = Object.keys(queryParams)\n                               .filter((k: string) => queryParams[k] != null)\n                               .filter((k: string) => {\n                                 // remove empty arrays\n                                 return !Array.isArray(queryParams[k]) ||\n                                     (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\n                               })\n                               .map((k: string) => {\n                                 // join arrays as comma seperated strings\n                                 let i = queryParams[k];\n                                 if (Array.isArray(i)) {\n                                   return {key: k, value: i.join(',')};\n                                 }\n                                 return {key: k, value: queryParams[k]};\n                               })\n                               .map((entry: {key: string, value: string}) => {\n                                 return `${entry.key}=${entry.value}`;\n                               })\n                               .join('&');\n    return `${protocol}//${hostAndPath}?${params}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { bindCallback, ConnectableObservable, Observable, of, ReplaySubject, throwError } from 'rxjs';\nimport { map, multicast, switchMap } from 'rxjs/operators';\nimport { Geocoder, GeocoderRequest, GeocoderResult, GeocoderStatus } from './google-maps-types';\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\n\ndeclare var google: any;\n\n@Injectable({ providedIn: 'root' })\nexport class AgmGeocoder {\n  protected readonly geocoder$: Observable<Geocoder>;\n\n  constructor(loader: MapsAPILoader) {\n    const connectableGeocoder$ = new Observable(subscriber => {\n      loader.load().then(() => subscriber.next());\n    })\n      .pipe(\n        map(() => this._createGeocoder()),\n        multicast(new ReplaySubject(1)),\n      ) as ConnectableObservable<Geocoder>;\n\n    connectableGeocoder$.connect(); // ignore the subscription\n    // since we will remain subscribed till application exits\n\n    this.geocoder$ = connectableGeocoder$;\n  }\n\n  geocode(request: GeocoderRequest): Observable<GeocoderResult[]> {\n    return this.geocoder$.pipe(\n      switchMap((geocoder) => this._getGoogleResults(geocoder, request))\n    );\n  }\n\n  private _getGoogleResults(geocoder: Geocoder, request: GeocoderRequest): Observable<GeocoderResult[]> {\n    const geocodeObservable = bindCallback(geocoder.geocode);\n    return geocodeObservable(request).pipe(\n      switchMap(([results, status]) => {\n        if (status === GeocoderStatus.OK) {\n          return of(results);\n        }\n\n        return throwError(status);\n      })\n    );\n  }\n\n  private _createGeocoder(): Geocoder {\n    return new google.maps.Geocoder() as Geocoder;\n  }\n}\n","import { Provider } from '@angular/core';\n\nexport class WindowRef {\n  getNativeWindow(): any { return window; }\n}\n\nexport class DocumentRef {\n  getNativeDocument(): any { return document; }\n}\n\nexport const BROWSER_GLOBALS_PROVIDERS: Provider[] = [WindowRef, DocumentRef];\n","import { MapsAPILoader } from './maps-api-loader';\n\n/**\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\n * Tag.\n * It's important that the Google Maps API script gets loaded first on the page.\n */\nexport class NoOpMapsAPILoader implements MapsAPILoader {\n  load(): Promise<void> {\n    if (!(window as any).google || !(window as any).google.maps) {\n      throw new Error(\n          'Google Maps API not loaded on page. Make sure window.google.maps is available!');\n    }\n    return Promise.resolve();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { AgmBicyclingLayer } from './directives/bicycling-layer';\nimport { AgmCircle } from './directives/circle';\nimport { AgmDataLayer } from './directives/data-layer';\nimport { AgmFitBounds } from './directives/fit-bounds';\nimport { AgmInfoWindow } from './directives/info-window';\nimport { AgmKmlLayer } from './directives/kml-layer';\nimport { AgmMap } from './directives/map';\nimport { AgmMarker } from './directives/marker';\nimport { AgmPolygon } from './directives/polygon';\nimport { AgmPolyline } from './directives/polyline';\nimport { AgmPolylineIcon } from './directives/polyline-icon';\nimport { AgmPolylinePoint } from './directives/polyline-point';\nimport { AgmRectangle } from './directives/rectangle';\nimport { AgmTransitLayer } from './directives/transit-layer';\n\nimport { LAZY_MAPS_API_CONFIG, LazyMapsAPILoader, LazyMapsAPILoaderConfigLiteral } from './services/maps-api-loader/lazy-maps-api-loader';\nimport { MapsAPILoader } from './services/maps-api-loader/maps-api-loader';\n\nimport { BROWSER_GLOBALS_PROVIDERS } from './utils/browser-globals';\n\n/**\n * @internal\n */\nexport function coreDirectives() {\n  return [\n    AgmBicyclingLayer,\n    AgmCircle,\n    AgmDataLayer,\n    AgmFitBounds,\n    AgmInfoWindow,\n    AgmKmlLayer,\n    AgmMap,\n    AgmMarker,\n    AgmPolygon,\n    AgmPolyline,\n    AgmPolylineIcon,\n    AgmPolylinePoint,\n    AgmRectangle,\n    AgmTransitLayer,\n  ];\n}\n\n/**\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\n */\n@NgModule({declarations: coreDirectives(), exports: coreDirectives()})\nexport class AgmCoreModule {\n  /**\n   * Please use this method when you register the module at the root level.\n   */\n  static forRoot(lazyMapsAPILoaderConfig?: LazyMapsAPILoaderConfigLiteral): ModuleWithProviders {\n    return {\n      ngModule: AgmCoreModule,\n      providers: [\n        ...BROWSER_GLOBALS_PROVIDERS, {provide: MapsAPILoader, useClass: LazyMapsAPILoader},\n        {provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig},\n      ],\n    };\n  }\n}\n"]}